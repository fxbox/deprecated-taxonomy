var searchIndex = {};
searchIndex["foxbox_taxonomy"] = {"doc":"This crate defines the high-level API for accessing Connected Devices.","items":[[0,"services","foxbox_taxonomy","Metadata on devices\nThis module defines the metadata on devices and services.",null,null],[3,"Service","foxbox_taxonomy::services","Metadata on a service. A service is a device or collection of devices\nthat may offer services. The `FoxBox` itself is a service offering\nservices such as a clock, communicating with the user through her\nsmart devices, etc.",null,null],[12,"tags","","Tags describing the service.",0,null],[12,"id","","An id unique to this service.",0,null],[12,"properties","","Service properties that are set at creation time.\nFor instance, these can be device manufacturer, model, etc.",0,null],[12,"getters","","Getter channels connected directly to this service.",0,null],[12,"setters","","Setter channels connected directly to this service.",0,null],[12,"adapter","","Identifier of the adapter for this service.",0,null],[3,"Getter","","A getter operation available on a channel.",null,null],[12,"kind","","The kind of value that can be obtained from this channel.",1,null],[12,"updated","","Date at which the latest value was received, whether through\npolling or through a trigger.",1,null],[3,"Setter","","An setter operation available on an channel.",null,null],[12,"kind","","The kind of value that can be sent to this channel.",2,null],[12,"updated","","Date at which the latest value was sent to the channel.",2,null],[3,"Channel","","An channel represents a single place where data can enter or\nleave a device. Note that channels support either a single kind\nof getter or a single kind of setter. Devices that support both\ngetters or setters, or several kinds of getters, or several kinds of\nsetters, are represented as services containing several channels.",null,null],[12,"tags","","Tags describing the channel.",3,null],[12,"id","","An id unique to this channel.",3,null],[12,"service","","The service owning this channel.",3,null],[12,"mechanism","","The update mechanism for this channel.",3,null],[12,"adapter","","Identifier of the adapter for this channel.",3,null],[12,"last_seen","","The last time the device was seen.",3,null],[4,"ChannelKind","","The kind of the channel, i.e. a strongly-typed description of\n_what_ the channel can do. Used both for locating channels\n(e.g. &quot;I need a clock&quot; or &quot;I need something that can provide\npictures&quot;) and for determining the data structure that these\nchannel can provide or consume.",null,null],[13,"Ready","","The service is ready. Used for instance once a countdown has\nreached completion.",4,null],[13,"LightOn","","The service is used to detect or decide whether some light\nis on or off.",4,null],[13,"OpenClosed","","The service is used to detect or decide whether some device\nis open or closed.",4,null],[13,"DoorLocked","","The service is used to deterct or decide whether a door lock\nis locked or unlocked.\n# JSON",4,null],[13,"Username","","The service is used to read or set the username associated with the\nservice. This is typically used for devices which have additional\nauthentication (like an IP Camera).",4,null],[13,"Password","","The service is used to read or set the password associated with the\nservice. This is typically used for devices which have additional\nauthentication (like an IP Camera).",4,null],[13,"Countdown","","The service is used to execute something after a given delay.",4,null],[13,"CountEveryInterval","","The service is used to execute something at a regular interval.",4,null],[13,"CurrentTime","","The service is used to read or set the current absolute time.\nUsed for instance to wait until a specific time and day before\ntriggering an action, or to set the appropriate time on a new\ndevice.",4,null],[13,"CurrentTimeOfDay","","The service is used to read or set the current time of day.\nUsed for instance to trigger an action at a specific hour\nevery day.",4,null],[13,"RemainingTime","","The service is part of a countdown. This is the time\nremaining until the countdown is elapsed.",4,null],[13,"OvenTemperature","","",4,null],[13,"AddThinkerbellRule","","",4,null],[13,"RemoveThinkerbellRule","","",4,null],[13,"ThinkerbellRuleSource","","",4,null],[13,"ThinkerbellRuleOn","","",4,null],[13,"TakeSnapshot","","Capture a new snapshot.",4,null],[13,"Log","","Write to a log file",4,null],[13,"WebPushNotify","","",4,null],[13,"Extension","","An operation of a kind that has not been standardized yet.",4,null],[12,"vendor","foxbox_taxonomy::services::ChannelKind","The vendor. Used for namespacing purposes, to avoid\nconfusing two incompatible extensions with similar\nnames. For instance, &quot;foxlink@mozilla.com&quot;.",4,null],[12,"adapter","","Identification of the adapter introducing this operation.\nDesigned to aid with tracing and debugging.",4,null],[12,"kind","","A string describing the nature of the value, designed to\nlet applications discover the devices.",4,null],[12,"typ","","The data type of the value.",4,null],[8,"IOMechanism","foxbox_taxonomy::services","The communication mechanism used by the channel.",null,null],[11,"deserialize","","",0,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",0,{"inputs":[{"name":"service"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"service"}],"output":{"name":"service"}}],[11,"fmt","","",0,{"inputs":[{"name":"service"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Create an empty service.",0,{"inputs":[{"name":"id"},{"name":"id"}],"output":{"name":"self"}}],[11,"to_json","","",0,{"inputs":[{"name":"service"}],"output":{"name":"json"}}],[11,"deserialize","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",4,{"inputs":[{"name":"channelkind"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"channelkind"},{"name":"channelkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"channelkind"},{"name":"channelkind"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"channelkind"}],"output":{"name":"channelkind"}}],[11,"fmt","","",4,{"inputs":[{"name":"channelkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","Parse a single value from JSON, consuming as much as necessary from JSON.",4,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",4,{"inputs":[{"name":"channelkind"}],"output":{"name":"json"}}],[11,"get_type","","Get the type of values used to communicate with this service.",4,{"inputs":[{"name":"channelkind"}],"output":{"name":"type"}}],[11,"deserialize","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",1,{"inputs":[{"name":"getter"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"getter"}],"output":{"name":"getter"}}],[11,"fmt","","",1,{"inputs":[{"name":"getter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",2,{"inputs":[{"name":"setter"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"setter"}],"output":{"name":"setter"}}],[11,"fmt","","",2,{"inputs":[{"name":"setter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",3,{"inputs":[{"name":"channel"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"channel"}],"output":{"name":"channel"}}],[11,"fmt","","",3,{"inputs":[{"name":"channel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"to_json","","",3,{"inputs":[{"name":"channel"}],"output":{"name":"json"}}],[11,"to_json","","",3,{"inputs":[{"name":"channel"}],"output":{"name":"json"}}],[11,"eq","","",3,{"inputs":[{"name":"channel"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",3,{"inputs":[{"name":"channel"},{"name":"h"}],"output":null}],[0,"api","foxbox_taxonomy","Public-facing API",null,null],[4,"Error","foxbox_taxonomy::api","An error that arose during interaction with either a device, an adapter or the\nadapter manager",null,null],[13,"GetterDoesNotSupportPolling","","Attempting to fetch a value from a Channel&lt;Getter&gt; that doesn&#39;t support this operation.",5,null],[13,"GetterDoesNotSupportWatching","","Attempting to watch a value from a Channel&lt;Getter&gt; that doesn&#39;t support this operation.",5,null],[13,"GetterRequiresThresholdForWatching","","Attempting to watch all values from a Channel&lt;Getter&gt; that requires a filter.\nFor instance, some Channel&lt;Getter&gt; may be updated 60 times per second. Attempting to\nwatch all values could easily exceed the capacity of the network or exhaust the battery.\nIn such a case, the adapter should return this error.",5,null],[13,"TypeError","","Attempting to send a value with a wrong type.",5,null],[13,"RangeError","","Attempting to use an inconsistent range. For instance, one with `min &gt; max`.",5,null],[13,"InvalidValue","","Attempting to send an invalid value. For instance, a time of day larger than 24h.",5,null],[13,"InternalError","","An error internal to the foxbox or an adapter. Normally, these errors should never\narise from the high-level API.",5,null],[4,"InternalError","","",null,null],[13,"NoSuchGetter","","Attempting to fetch or watch a getter that isn&#39;t registered.",6,null],[13,"NoSuchSetter","","Attempting to send values to a setter that isn&#39;t registered.",6,null],[13,"NoSuchService","","Attempting to access a service that isn&#39;t registered.",6,null],[13,"NoSuchAdapter","","Attempting to access an adapter that isn&#39;t registered.",6,null],[13,"DuplicateGetter","","Attempting to register a getter with an id that is already used.",6,null],[13,"DuplicateSetter","","Attempting to register a setter with an id that is already used.",6,null],[13,"DuplicateService","","Attempting to register a service with an id that is already used.",6,null],[13,"DuplicateAdapter","","Attempting to register an adapter with an id that is already used.",6,null],[13,"ConflictingAdapter","","Attempting to register a channel with an adapter that doesn&#39;t match that of its service.",6,null],[13,"GenericError","","Open question: Individual adapters will have errors of many adapter-specific types.\nHow do we make this best represent those?",6,null],[13,"InvalidInitialService","","Attempting to register a service in an invalid initial state. Typically, a service that\npretends that it already has channels.",6,null],[4,"WatchEvent","","An event during watching.",null,null],[13,"EnterRange","","If a range was specified when we registered for watching, `EnterRange` is fired whenever\nwe enter this range. If `Always` was specified, `EnterRange` is fired whenever a new value\nis available. Otherwise, never fired.",7,null],[12,"from","foxbox_taxonomy::api::WatchEvent","The channel that sent the value.",7,null],[12,"value","","The actual value.",7,null],[13,"ExitRange","foxbox_taxonomy::api","If a range was specified when we registered for watching, `ExitRange` is fired whenever\nwe exit this range. Otherwise, never fired.",7,null],[12,"from","foxbox_taxonomy::api::WatchEvent","The channel that sent the value.",7,null],[12,"value","","The actual value.",7,null],[13,"GetterRemoved","foxbox_taxonomy::api","The set of devices being watched has changed, typically either\nbecause a tag was edited or because a device was\nremoved. Payload is the id of the device that was removed.",7,null],[13,"GetterAdded","","The set of devices being watched has changed, typically either\nbecause a tag was edited or because a device was\nadded. Payload is the id of the device that was added.",7,null],[13,"InitializationError","","One of the channels encountered an error during initialization.\nThis channel will not be watched, but other channels will remain\nwatched.",7,null],[12,"channel","foxbox_taxonomy::api::WatchEvent","",7,null],[12,"error","","",7,null],[4,"User","foxbox_taxonomy::api","User identifier that will be passed from the REST API handlers to the\nadapters.",null,null],[13,"None","","",8,null],[13,"Id","","",8,null],[8,"API","","A handle to the public API.",null,null],[10,"get_services","","Get the metadata on services matching some conditions.",9,{"inputs":[{"name":"api"},{"name":"vec"}],"output":{"name":"vec"}}],[10,"add_service_tags","","Label a set of services with a set of tags.",9,{"inputs":[{"name":"api"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[10,"remove_service_tags","","Remove a set of tags from a set of services.",9,{"inputs":[{"name":"api"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[10,"get_getter_channels","","Get a list of getters matching some conditions",9,{"inputs":[{"name":"api"},{"name":"vec"}],"output":{"name":"vec"}}],[10,"get_setter_channels","","Get a list of getters matching some conditions",9,{"inputs":[{"name":"api"},{"name":"vec"}],"output":{"name":"vec"}}],[10,"add_getter_tags","","Label a set of channels with a set of tags.",9,{"inputs":[{"name":"api"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[10,"add_setter_tags","","",9,{"inputs":[{"name":"api"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[10,"remove_getter_tags","","Remove a set of tags from a set of channels.",9,{"inputs":[{"name":"api"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[10,"remove_setter_tags","","",9,{"inputs":[{"name":"api"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[10,"fetch_values","","Read the latest value from a set of channels",9,{"inputs":[{"name":"api"},{"name":"vec"},{"name":"user"}],"output":{"name":"resultmap"}}],[10,"send_values","","Send a bunch of values to a set of channels.",9,{"inputs":[{"name":"api"},{"name":"targetmap"},{"name":"user"}],"output":{"name":"resultmap"}}],[10,"watch_values","","Watch for changes from channels.",9,{"inputs":[{"name":"api"},{"name":"targetmap"},{"name":"box"}],"output":{"name":"watchguard"}}],[16,"WatchGuard","","A value that causes a disconnection once it is dropped.",9,null],[11,"clone","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",5,{"inputs":[{"name":"error"},{"name":"__s"}],"output":{"name":"result"}}],[11,"deserialize","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"to_json","","",5,{"inputs":[{"name":"error"}],"output":{"name":"json"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"internalerror"}],"output":{"name":"internalerror"}}],[11,"fmt","","",6,{"inputs":[{"name":"internalerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",6,{"inputs":[{"name":"internalerror"},{"name":"__s"}],"output":{"name":"result"}}],[11,"deserialize","","",6,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"watchevent"}],"output":{"name":"watchevent"}}],[11,"fmt","","",7,{"inputs":[{"name":"watchevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",7,{"inputs":[{"name":"watchevent"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"user"},{"name":"user"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"user"},{"name":"user"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"user"}],"output":{"name":"user"}}],[11,"fmt","","",8,{"inputs":[{"name":"user"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"parse","foxbox_taxonomy","Tools for parsing from JSON.\nUtilities for defining a JSON parser.",null,null],[11,"find","serde_json::value","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",10,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",10,null],[11,"lookup","","Looks up a value by path.",10,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",10,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated BTreeMap.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_string","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"fmt","","Serializes a json value into a string",10,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"serialize","","",10,{"inputs":[{"name":"value"},{"name":"s"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"eq","","",10,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[4,"JSON","foxbox_taxonomy::parse","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",10,null],[13,"Bool","","Represents a JSON Boolean",10,null],[13,"I64","","Represents a JSON signed integer",10,null],[13,"U64","","Represents a JSON unsigned integer",10,null],[13,"F64","","Represents a JSON floating point number",10,null],[13,"String","","Represents a JSON string",10,null],[13,"Array","","Represents a JSON array",10,null],[13,"Object","","Represents a JSON object",10,null],[3,"Path","","A path in the JSON tree. Used for displaying error messages.",null,null],[3,"JSONError","","",null,null],[4,"ParseError","","An error during parsing.",null,null],[13,"JSON","","",11,null],[13,"MissingField","","",11,null],[12,"name","foxbox_taxonomy::parse::ParseError","",11,null],[12,"at","","",11,null],[13,"UnknownFields","foxbox_taxonomy::parse","",11,null],[12,"names","foxbox_taxonomy::parse::ParseError","",11,null],[12,"at","","",11,null],[13,"TypeError","foxbox_taxonomy::parse","",11,null],[12,"name","foxbox_taxonomy::parse::ParseError","",11,null],[12,"at","","",11,null],[12,"expected","","",11,null],[13,"EmptyObject","foxbox_taxonomy::parse","",11,null],[12,"at","foxbox_taxonomy::parse::ParseError","",11,null],[13,"UnknownConstant","foxbox_taxonomy::parse","",11,null],[12,"at","foxbox_taxonomy::parse::ParseError","",11,null],[12,"constant","","",11,null],[5,"check_fields","foxbox_taxonomy::parse","Utility function: Make sure that we have consumed all the fields of an object.",null,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[8,"Parser","","An object that knows how to parse values from JSON into type T.",null,null],[10,"description","","",12,{"inputs":[],"output":{"name":"string"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_at","","",12,{"inputs":[{"name":"path"},{"name":"str"}],"output":{"name":"result"}}],[10,"parse","","Parse a single value from JSON, consuming as much as necessary from JSON.",12,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"take","","Parse a field from JSON, consuming it.",12,{"inputs":[{"name":"path"},{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"take_opt","","Parse a field from JSON, consuming it.",12,{"inputs":[{"name":"path"},{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"take_vec_opt","","Parse a field containing an array from JSON, consuming the field.",12,{"inputs":[{"name":"path"},{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"take_vec","","",12,{"inputs":[{"name":"path"},{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"ToJSON","","",null,null],[10,"to_json","","",13,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",14,{"inputs":[{"name":"path"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"new","","Create an empty Path.",14,{"inputs":[],"output":{"name":"self"}}],[11,"push_str","","Push a suffix after a path.",14,{"inputs":[{"name":"path"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[11,"push_index","","",14,{"inputs":[{"name":"path"},{"name":"usize"},{"name":"f"}],"output":{"name":"t"}}],[11,"push","","",14,{"inputs":[{"name":"path"},{"name":"str"},{"name":"f"}],"output":{"name":"t"}}],[11,"to_string","","",14,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[11,"fmt","","",11,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",11,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"missing_field","","",11,{"inputs":[{"name":"str"},{"name":"path"}],"output":{"name":"self"}}],[11,"type_error","","",11,{"inputs":[{"name":"str"},{"name":"path"},{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_fields","","",11,{"inputs":[{"name":"vec"},{"name":"path"}],"output":{"name":"self"}}],[11,"unknown_constant","","",11,{"inputs":[{"name":"str"},{"name":"path"}],"output":{"name":"self"}}],[11,"empty_object","","",11,{"inputs":[{"name":"path"}],"output":{"name":"self"}}],[11,"json","","",11,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",15,{"inputs":[{"name":"jsonerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",15,{"inputs":[{"name":"jsonerror"},{"name":"s"}],"output":{"name":"result"}}],[11,"description","collections::vec","",16,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",16,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"description","collections::string","",17,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",17,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"description","alloc::arc","",18,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",18,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","collections::string","",17,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","foxbox_taxonomy::parse","",10,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::set","",19,{"inputs":[{"name":"hashset"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",16,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","","",16,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",21,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[0,"selector","foxbox_taxonomy","Selecting one or more devices. Exposed through the API.\nSelectors for services and channels.",null,null],[3,"ServiceSelector","foxbox_taxonomy::selector","A selector for one or more services.",null,null],[12,"id","","If `Exactly(id)`, return only the service with the corresponding id.",22,null],[12,"tags","","Restrict results to services that have all the tags in `tags`.",22,null],[12,"getters","","Restrict results to services that have all the getters in `getters`.",22,null],[12,"setters","","Restrict results to services that have all the setters in `setters`.",22,null],[3,"GetterSelector","","A selector for one or more getter channels.",null,null],[12,"id","","If `Exactly(id)`, return only the channel with the corresponding id.",23,null],[12,"parent","","If `Eactly(id)`, return only channels that are children of\nservice `id`.",23,null],[12,"tags","","Restrict results to channels that have all the tags in `tags`.",23,null],[12,"service_tags","","Restrict results to channels offered by a service that has all the tags in `tags`.",23,null],[12,"kind","","If `Exatly(k)`, restrict results to channels that produce values\nof kind `k`.",23,null],[3,"SetterSelector","","A selector for one or more setter channels.",null,null],[12,"id","","If `Exactly(id)`, return only the channel with the corresponding id.",24,null],[12,"parent","","If `Exactly(id)`, return only channels that are immediate children\nof service `id`.",24,null],[12,"tags","","Restrict results to channels that have all the tags in `tags`.",24,null],[12,"service_tags","","Restrict results to channels offered by a service that has all the tags in `tags`.",24,null],[12,"kind","","If `Exactly(k)`, restrict results to channels that accept values\nof kind `k`.",24,null],[3,"Period","","An acceptable interval of time.",null,null],[12,"min","","",25,null],[12,"max","","",25,null],[8,"SelectedBy","","",null,null],[10,"matches","","",26,{"inputs":[{"name":"selectedby"},{"name":"t"}],"output":{"name":"bool"}}],[8,"ServiceLike","","A trait used to let `ServiceSelector` work on complex data structures\nthat are not necessarily exactly Selector.",null,null],[10,"id","","",27,{"inputs":[{"name":"servicelike"}],"output":{"name":"id"}}],[10,"adapter","","",27,{"inputs":[{"name":"servicelike"}],"output":{"name":"id"}}],[10,"with_tags","","",27,{"inputs":[{"name":"servicelike"},{"name":"f"}],"output":{"name":"bool"}}],[10,"has_getters","","",27,{"inputs":[{"name":"servicelike"},{"name":"f"}],"output":{"name":"bool"}}],[10,"has_setters","","",27,{"inputs":[{"name":"servicelike"},{"name":"f"}],"output":{"name":"bool"}}],[11,"id","foxbox_taxonomy::services","",0,{"inputs":[{"name":"service"}],"output":{"name":"id"}}],[11,"adapter","","",0,{"inputs":[{"name":"service"}],"output":{"name":"id"}}],[11,"with_tags","","",0,{"inputs":[{"name":"service"},{"name":"f"}],"output":{"name":"bool"}}],[11,"has_getters","","",0,{"inputs":[{"name":"service"},{"name":"f"}],"output":{"name":"bool"}}],[11,"has_setters","","",0,{"inputs":[{"name":"service"},{"name":"f"}],"output":{"name":"bool"}}],[11,"default","foxbox_taxonomy::selector","",22,{"inputs":[],"output":{"name":"serviceselector"}}],[11,"deserialize","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",22,{"inputs":[{"name":"serviceselector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"serviceselector"}],"output":{"name":"serviceselector"}}],[11,"description","","",22,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",22,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"new","","Create a new selector that accepts all services.",22,{"inputs":[],"output":{"name":"self"}}],[11,"with_id","","Selector for a service with a specific id.",22,{"inputs":[{"name":"serviceselector"},{"name":"id"}],"output":{"name":"self"}}],[11,"with_tags","","Restrict results to services that have all the tags in `tags`.",22,{"inputs":[{"name":"serviceselector"},{"name":"vec"}],"output":{"name":"self"}}],[11,"with_getters","","Restrict results to services that have all the getters in `getters`.",22,{"inputs":[{"name":"serviceselector"},{"name":"vec"}],"output":{"name":"self"}}],[11,"with_setters","","Restrict results to services that have all the setters in `setters`.",22,{"inputs":[{"name":"serviceselector"},{"name":"vec"}],"output":{"name":"self"}}],[11,"and","","Restrict results to services that are accepted by two selector.",22,{"inputs":[{"name":"serviceselector"},{"name":"serviceselector"}],"output":{"name":"self"}}],[11,"matches","","",22,{"inputs":[{"name":"serviceselector"},{"name":"t"}],"output":{"name":"bool"}}],[11,"matches","foxbox_taxonomy::services","",0,{"inputs":[{"name":"service"},{"name":"serviceselector"}],"output":{"name":"bool"}}],[11,"default","foxbox_taxonomy::selector","",23,{"inputs":[],"output":{"name":"getterselector"}}],[11,"deserialize","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",23,{"inputs":[{"name":"getterselector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"getterselector"}],"output":{"name":"getterselector"}}],[11,"description","","",23,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",23,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"new","","Create a new selector that accepts all getter channels.",23,{"inputs":[],"output":{"name":"self"}}],[11,"with_id","","Restrict to a channel with a specific id.",23,{"inputs":[{"name":"getterselector"},{"name":"id"}],"output":{"name":"self"}}],[11,"with_parent","","Restrict to a channel with a specific parent.",23,{"inputs":[{"name":"getterselector"},{"name":"id"}],"output":{"name":"self"}}],[11,"with_kind","","Restrict to a channel with a specific kind.",23,{"inputs":[{"name":"getterselector"},{"name":"channelkind"}],"output":{"name":"self"}}],[11,"with_tags","","Restrict to channels that have all the tags in `tags`.",23,{"inputs":[{"name":"getterselector"},{"name":"vec"}],"output":{"name":"self"}}],[11,"with_service_tags","","Restrict to channels offered by a service that has all the tags in `tags`.",23,{"inputs":[{"name":"getterselector"},{"name":"vec"}],"output":{"name":"self"}}],[11,"and","","Restrict to channels that are accepted by two selector.",23,{"inputs":[{"name":"getterselector"},{"name":"self"}],"output":{"name":"self"}}],[11,"matches","","Determine if a channel is matched by this selector.",23,{"inputs":[{"name":"getterselector"},{"name":"hashset"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"default","","",24,{"inputs":[],"output":{"name":"setterselector"}}],[11,"deserialize","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"setterselector"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"setterselector"}],"output":{"name":"setterselector"}}],[11,"description","","",24,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",24,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"new","","Create a new selector that accepts all getter channels.",24,{"inputs":[],"output":{"name":"self"}}],[11,"with_id","","Selector to a channel with a specific id.",24,{"inputs":[{"name":"setterselector"},{"name":"id"}],"output":{"name":"self"}}],[11,"with_parent","","Selector to channels with a specific parent.",24,{"inputs":[{"name":"setterselector"},{"name":"id"}],"output":{"name":"self"}}],[11,"with_kind","","Selector to channels with a specific kind.",24,{"inputs":[{"name":"setterselector"},{"name":"channelkind"}],"output":{"name":"self"}}],[11,"with_tags","","Restrict to channels that have all the tags in `tags`.",24,{"inputs":[{"name":"setterselector"},{"name":"vec"}],"output":{"name":"self"}}],[11,"with_service_tags","","Restrict to channels offered by a service that has all the tags in `tags`.",24,{"inputs":[{"name":"setterselector"},{"name":"vec"}],"output":{"name":"self"}}],[11,"and","","Restrict results to channels that are accepted by two selector.",24,{"inputs":[{"name":"setterselector"},{"name":"self"}],"output":{"name":"self"}}],[11,"matches","","Determine if a channel is matched by this selector.",24,{"inputs":[{"name":"setterselector"},{"name":"hashset"},{"name":"channel"}],"output":{"name":"bool"}}],[11,"deserialize","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",25,{"inputs":[{"name":"period"},{"name":"__s"}],"output":{"name":"result"}}],[11,"default","","",25,{"inputs":[],"output":{"name":"period"}}],[11,"fmt","","",25,{"inputs":[{"name":"period"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"period"}],"output":{"name":"period"}}],[11,"and","","",25,{"inputs":[{"name":"period"},{"name":"self"}],"output":{"name":"self"}}],[11,"and_option","","",25,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"matches","","",25,{"inputs":[{"name":"period"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"matches_option","","",25,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[0,"values","foxbox_taxonomy","Values that may be sent to/received from devices",null,null],[3,"TypeError","foxbox_taxonomy::values","Representation of a type error.",null,null],[12,"expected","","The type we expected.",28,null],[12,"got","","The type we actually got.",28,null],[3,"WebPushNotify","","",null,null],[12,"resource","","",29,null],[12,"message","","",29,null],[3,"ThinkerbellRule","","",null,null],[12,"name","","",30,null],[12,"source","","",30,null],[3,"Json","","Representation of an object in JSON. It is often (albeit not\nalways) possible to choose a more precise data structure for\nrepresenting values send/accepted by a service. If possible,\nadapters should rather pick such more precise data structure.",null,null],[12,"0","","",31,null],[3,"ExtValue","","A data structure holding a boolean value of a type that has not\nbeen standardized yet.",null,null],[12,"value","","",32,null],[12,"vendor","","The vendor. Used for namespacing purposes, to avoid\nconfusing two incompatible extensions with similar\nnames. For instance, &quot;foxlink@mozilla.com&quot;.",32,null],[12,"adapter","","Identification of the adapter introducing this value.\nDesigned to aid with tracing and debugging.",32,null],[12,"kind","","A string describing the nature of the value, designed to\naid with type-checking.",32,null],[3,"Binary","","",null,null],[12,"data","","The actual data. We put it behind an `Arc` to make sure\nthat cloning remains inexpensive.",33,null],[12,"mimetype","","The mime type. Should probably be an Id&lt;MimeTypeId&gt;.",33,null],[3,"TimeStamp","","An absolute time and date.",null,null],[3,"Duration","","A duration, also used to represent a time of day.",null,null],[4,"Type","","",null,null],[13,"Unit","","",34,null],[13,"OnOff","","",34,null],[13,"OpenClosed","","A boolean open/closed state. Used for instance for doors,\nwindows, etc.",34,null],[13,"DoorLocked","","A boolean locked/unlocked states. Used for door locks.",34,null],[13,"Duration","","",34,null],[13,"TimeStamp","","A precise timestamp. Used for instance to determine when an\nevent has taken place.",34,null],[13,"ThinkerbellRule","","",34,null],[13,"WebPushNotify","","",34,null],[13,"Temperature","","",34,null],[13,"String","","",34,null],[13,"Color","","",34,null],[13,"Json","","",34,null],[13,"Binary","","",34,null],[13,"ExtBool","","",34,null],[13,"ExtNumeric","","",34,null],[4,"OnOff","","An on/off state.",null,null],[13,"On","","# JSON",35,null],[13,"Off","","# JSON",35,null],[4,"OpenClosed","","An open/closed state.",null,null],[13,"Open","","# JSON",36,null],[13,"Closed","","# JSON",36,null],[4,"DoorLocked","","An locked/unlocked state.",null,null],[13,"Locked","","# JSON",37,null],[13,"Unlocked","","# JSON",37,null],[4,"Temperature","","A temperature. Internal representation may be either Fahrenheit or\nCelcius. The `FoxBox` adapters are expected to perform conversions\nto the format requested by their devices.",null,null],[13,"F","","Fahrenheit",38,null],[13,"C","","Celcius",38,null],[4,"Color","","A color. Internal representation may vary. The `FoxBox` adapters are\nexpected to perform conversions to the format requested by their\ndevice.",null,null],[13,"RGBA","","# JSON",39,null],[4,"Value","","Representation of an actual value that can be sent to/received\nfrom a service.",null,null],[13,"Unit","","An absolute time and date.",40,null],[13,"OnOff","","An on/off value.",40,null],[13,"OpenClosed","","An open/closed value.",40,null],[13,"DoorLocked","","An locked/unlocked value.",40,null],[13,"TimeStamp","","An absolute time and date.",40,null],[13,"Duration","","A duration, also used to represent a time of day.",40,null],[13,"Temperature","","A temperature.",40,null],[13,"Color","","A color.",40,null],[13,"String","","A string.",40,null],[13,"ThinkerbellRule","","",40,null],[13,"WebPushNotify","","",40,null],[13,"ExtBool","","A boolean value representing a unit that has not been\nstandardized yet into the API.",40,null],[13,"ExtNumeric","","A numeric value representing a unit that has not been\nstandardized yet into the API.",40,null],[13,"Json","","A Json value. We put it behind an `Arc` to make sure that\ncloning remains inexpensive.",40,null],[13,"Binary","","Binary data.",40,null],[4,"Range","","A comparison between two values.",null,null],[13,"Leq","","Leq(x) accepts any value v such that v &lt;= x.",41,null],[13,"Geq","","Geq(x) accepts any value v such that v &gt;= x.",41,null],[13,"BetweenEq","","BetweenEq {min, max} accepts any value v such that `min &lt;= v`\nand `v &lt;= max`. If `max &lt; min`, it never accepts anything.",41,null],[12,"min","foxbox_taxonomy::values::Range","",41,null],[12,"max","","",41,null],[13,"OutOfStrict","foxbox_taxonomy::values","OutOfStrict {min, max} accepts any value v such that `v &lt; min`\nor `max &lt; v`",41,null],[12,"min","foxbox_taxonomy::values::Range","",41,null],[12,"max","","",41,null],[13,"Eq","foxbox_taxonomy::values","Eq(x) accespts any value v such that v == x",41,null],[11,"clone","","",28,{"inputs":[{"name":"typeerror"}],"output":{"name":"typeerror"}}],[11,"fmt","","",28,{"inputs":[{"name":"typeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deserialize","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",28,{"inputs":[{"name":"typeerror"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",28,{"inputs":[{"name":"typeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",28,{"inputs":[{"name":"typeerror"}],"output":{"name":"str"}}],[11,"cause","","",28,{"inputs":[{"name":"typeerror"}],"output":{"name":"option"}}],[11,"deserialize","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",34,{"inputs":[{"name":"type"},{"name":"__s"}],"output":{"name":"result"}}],[11,"cmp","","",34,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",34,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"option"}}],[11,"eq","","",34,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[11,"fmt","","",34,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",34,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",34,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",34,{"inputs":[{"name":"type"}],"output":{"name":"json"}}],[11,"supports_eq","","Determine whether using `Range::Eq` for this type is\nappropriate. Typically, using `Range::Eq` for a floating point\nnumber is a bad idea.",34,{"inputs":[{"name":"type"}],"output":{"name":"bool"}}],[11,"ensure_eq","","",34,{"inputs":[{"name":"type"},{"name":"self"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"onoff"},{"name":"onoff"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"onoff"}],"output":{"name":"onoff"}}],[11,"fmt","","",35,{"inputs":[{"name":"onoff"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",35,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",35,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",35,{"inputs":[{"name":"onoff"}],"output":{"name":"json"}}],[11,"into","","",35,{"inputs":[{"name":"onoff"}],"output":{"name":"value"}}],[11,"partial_cmp","","",35,{"inputs":[{"name":"onoff"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",35,{"inputs":[{"name":"onoff"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"serialize","","",35,{"inputs":[{"name":"onoff"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"openclosed"},{"name":"openclosed"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"openclosed"}],"output":{"name":"openclosed"}}],[11,"fmt","","",36,{"inputs":[{"name":"openclosed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",36,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",36,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",36,{"inputs":[{"name":"openclosed"}],"output":{"name":"json"}}],[11,"into","","",36,{"inputs":[{"name":"openclosed"}],"output":{"name":"value"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"openclosed"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",36,{"inputs":[{"name":"openclosed"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"serialize","","",36,{"inputs":[{"name":"openclosed"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",36,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",37,{"inputs":[{"name":"doorlocked"},{"name":"doorlocked"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"doorlocked"}],"output":{"name":"doorlocked"}}],[11,"fmt","","",37,{"inputs":[{"name":"doorlocked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",37,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",37,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",37,{"inputs":[{"name":"doorlocked"}],"output":{"name":"json"}}],[11,"into","","",37,{"inputs":[{"name":"doorlocked"}],"output":{"name":"value"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"doorlocked"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",37,{"inputs":[{"name":"doorlocked"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"serialize","","",37,{"inputs":[{"name":"doorlocked"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",38,{"inputs":[{"name":"temperature"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"temperature"},{"name":"temperature"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"temperature"},{"name":"temperature"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"temperature"}],"output":{"name":"temperature"}}],[11,"fmt","","",38,{"inputs":[{"name":"temperature"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_f","","Get a temperature in Fahrenheit.",38,{"inputs":[{"name":"temperature"}],"output":{"name":"f64"}}],[11,"as_c","","Get a temperature in Celcius.",38,{"inputs":[{"name":"temperature"}],"output":{"name":"f64"}}],[11,"description","","",38,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",38,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",38,{"inputs":[{"name":"temperature"}],"output":{"name":"json"}}],[11,"partial_cmp","","",38,{"inputs":[{"name":"temperature"},{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",39,{"inputs":[{"name":"color"},{"name":"__s"}],"output":{"name":"result"}}],[11,"partial_cmp","","",39,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"option"}}],[11,"lt","","",39,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"le","","",39,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"gt","","",39,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ge","","",39,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"eq","","",39,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"color"},{"name":"color"}],"output":{"name":"bool"}}],[11,"clone","","",39,{"inputs":[{"name":"color"}],"output":{"name":"color"}}],[11,"fmt","","",39,{"inputs":[{"name":"color"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",39,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",39,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",39,{"inputs":[{"name":"color"}],"output":{"name":"json"}}],[11,"deserialize","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",29,{"inputs":[{"name":"webpushnotify"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"webpushnotify"},{"name":"webpushnotify"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"webpushnotify"},{"name":"webpushnotify"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"webpushnotify"}],"output":{"name":"webpushnotify"}}],[11,"fmt","","",29,{"inputs":[{"name":"webpushnotify"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",29,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",29,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",29,{"inputs":[{"name":"webpushnotify"}],"output":{"name":"json"}}],[11,"deserialize","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",30,{"inputs":[{"name":"thinkerbellrule"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"thinkerbellrule"},{"name":"thinkerbellrule"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"thinkerbellrule"},{"name":"thinkerbellrule"}],"output":{"name":"bool"}}],[11,"clone","","",30,{"inputs":[{"name":"thinkerbellrule"}],"output":{"name":"thinkerbellrule"}}],[11,"fmt","","",30,{"inputs":[{"name":"thinkerbellrule"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",30,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",30,{"inputs":[{"name":"thinkerbellrule"}],"output":{"name":"json"}}],[11,"deserialize","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",31,{"inputs":[{"name":"json"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",31,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",31,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"fmt","","",31,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",31,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",31,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",31,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"partial_cmp","","Two Json objects are never comparable to each other.",31,{"inputs":[{"name":"json"},{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",32,{"inputs":[{"name":"extvalue"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"extvalue"}],"output":{"name":"extvalue"}}],[11,"fmt","","",32,{"inputs":[{"name":"extvalue"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",32,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",32,{"inputs":[{"name":"extvalue"}],"output":{"name":"json"}}],[11,"eq","","",32,{"inputs":[{"name":"extvalue"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",32,{"inputs":[{"name":"extvalue"},{"name":"self"}],"output":{"name":"option"}}],[11,"deserialize","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",33,{"inputs":[{"name":"binary"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"fmt","","",33,{"inputs":[{"name":"binary"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",33,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",33,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",33,{"inputs":[{"name":"binary"}],"output":{"name":"json"}}],[11,"deserialize","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",40,{"inputs":[{"name":"value"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",40,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",40,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"fmt","","",40,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","std::collections::hash::map","Creates an empty HashMap.",20,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",20,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",20,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",20,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"s"}}],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",20,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",20,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"valuesmut"}}],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"itermut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",20,{"inputs":[{"name":"hashmap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"len","","Returns the number of elements in the map.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"bool"}}],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"drain"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",20,null],[11,"get","","Returns a reference to the value corresponding to the key.",20,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",20,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",20,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",20,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",20,{"inputs":[{"name":"hashmap"},{"name":"q"}],"output":{"name":"option"}}],[11,"description","foxbox_taxonomy::values","",40,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",40,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",40,{"inputs":[{"name":"value"}],"output":{"name":"json"}}],[11,"get_type","","",40,{"inputs":[{"name":"value"}],"output":{"name":"type"}}],[11,"as_timestamp","","",40,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"as_duration","","",40,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"partial_cmp","","Two values of the same type can be compared using the usual\ncomparison for values of this type. Two values of distinct\ntypes cannot be compared.",40,{"inputs":[{"name":"value"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",42,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"eq","","",42,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"timestamp"},{"name":"timestamp"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"timestamp"}],"output":{"name":"timestamp"}}],[11,"fmt","","",42,{"inputs":[{"name":"timestamp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_datetime","","",42,{"inputs":[{"name":"datetime"}],"output":{"name":"self"}}],[11,"as_datetime","","",42,{"inputs":[{"name":"timestamp"}],"output":{"name":"datetime"}}],[11,"from_s","","",42,{"inputs":[{"name":"i64"}],"output":{"name":"self"}}],[11,"description","","",42,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",42,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",42,{"inputs":[{"name":"timestamp"}],"output":{"name":"json"}}],[11,"into","","",42,{"inputs":[{"name":"timestamp"}],"output":{"name":"datetime"}}],[11,"into","","",42,{"inputs":[{"name":"timestamp"}],"output":{"name":"datetime"}}],[11,"from","","",42,{"inputs":[{"name":"datetime"}],"output":{"name":"self"}}],[11,"serialize","","",42,{"inputs":[{"name":"timestamp"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"eq","","",41,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"serialize","","",41,{"inputs":[{"name":"range"},{"name":"__s"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"description","","",41,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",41,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",41,{"inputs":[{"name":"range"}],"output":{"name":"json"}}],[11,"contains","","Determine if a value is accepted by this range.",41,{"inputs":[{"name":"range"},{"name":"value"}],"output":{"name":"bool"}}],[11,"get_type","","Get the type associated to this range.",41,{"inputs":[{"name":"range"}],"output":{"name":"result"}}],[11,"eq","","",43,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"description","","",43,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",43,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",43,{"inputs":[{"name":"duration"}],"output":{"name":"json"}}],[11,"into","","",43,{"inputs":[{"name":"duration"}],"output":{"name":"value"}}],[11,"serialize","","",43,{"inputs":[{"name":"duration"},{"name":"s"}],"output":{"name":"result"}}],[11,"from","","",43,{"inputs":[{"name":"chronoduration"}],"output":{"name":"self"}}],[11,"into","","",43,{"inputs":[{"name":"duration"}],"output":{"name":"chronoduration"}}],[11,"deserialize","","Deserialize this value given this `Deserializer`.",43,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"util","foxbox_taxonomy","Various utilities",null,null],[3,"Phantom","foxbox_taxonomy::util","A variant of `PhantomData` that supports [De]serialization",null,null],[3,"Targetted","","",null,null],[12,"select","","",44,null],[12,"payload","","",44,null],[3,"Id","","A unique id for values of a given kind.",null,null],[3,"TrivialEnumVisitor","","By default, the (de)serialization of trivial enums by Serde is surprising, e.g.\nin JSON,  `enum Foo {A, B, C}` will produce `{&quot;\\&quot;A\\&quot;: []&quot;}` for `A`, where `&quot;\\&quot;A\\&quot;&quot;`\nwould be expected.",null,null],[3,"ServiceId","","A marker for Id.\nOnly useful for writing `Id&lt;ServiceId&gt;`.",null,null],[3,"AdapterId","","A marker for Id.\nOnly useful for writing `Id&lt;AdapterId&gt;`.",null,null],[3,"TagId","","Only useful for writing `Id&lt;TagId&gt;`.",null,null],[3,"KindId","","",null,null],[3,"VendorId","","",null,null],[3,"MimeTypeId","","",null,null],[4,"Exactly","","A marker for a request that a expects a specific value.",null,null],[13,"Always","","No constraint.",45,null],[13,"Exactly","","Expect a specific value.",45,null],[13,"Never","","Never accept a constraint. This can happen, for instance, we have have\nattempted to `and` two conflicting `Exactly`",45,null],[5,"is_sync","","Helper function, to check that a type implements Sync.",null,{"inputs":[],"output":null}],[6,"ResultMap","","A bunch of results coming from different sources.",null,null],[6,"TargetMap","","A bunch of instructions, going to different targets.",null,null],[11,"serialize","","",45,{"inputs":[{"name":"exactly"},{"name":"__s"}],"output":{"name":"result"}}],[11,"deserialize","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",45,{"inputs":[{"name":"exactly"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"exactly"}],"output":{"name":"exactly"}}],[11,"description","","",45,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","Parse a single value from JSON, consuming as much as necessary from JSON.",45,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"and","","Combine two constraints.",45,{"inputs":[{"name":"exactly"},{"name":"self"}],"output":{"name":"self"}}],[11,"is_empty","","",45,{"inputs":[{"name":"exactly"}],"output":{"name":"bool"}}],[11,"matches","","",45,{"inputs":[{"name":"exactly"},{"name":"t"}],"output":{"name":"bool"}}],[11,"default","","",45,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",46,null],[11,"eq","","",46,{"inputs":[{"name":"phantom"},{"name":"phantom"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"phantom"},{"name":"phantom"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"phantom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"phantom"}],"output":{"name":"phantom"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",46,{"inputs":[],"output":{"name":"self"}}],[11,"serialize","","",46,{"inputs":[{"name":"phantom"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",46,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"targetted"}],"output":{"name":"targetted"}}],[11,"default","","",44,{"inputs":[],"output":{"name":"self"}}],[11,"new","","",44,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"self"}}],[11,"clone","","",47,{"inputs":[{"name":"id"}],"output":{"name":"id"}}],[11,"fmt","","",47,{"inputs":[{"name":"id"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",47,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"as_atom","","",47,{"inputs":[{"name":"id"}],"output":{"name":"atom"}}],[11,"fmt","","",47,{"inputs":[{"name":"id"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",47,{"inputs":[{"name":"id"},{"name":"self"}],"output":{"name":"bool"}}],[11,"hash","","",47,{"inputs":[{"name":"id"},{"name":"h"}],"output":null}],[11,"serialize","","",47,{"inputs":[{"name":"id"},{"name":"s"}],"output":{"name":"result"}}],[11,"description","","",47,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","Parse a single value from JSON, consuming as much as necessary from JSON.",47,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"to_json","","",47,{"inputs":[{"name":"id"}],"output":{"name":"json"}}],[11,"deserialize","","",47,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"to_json","std::collections::hash::map","",20,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"new","foxbox_taxonomy::util","",48,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"visit_str","","",48,{"inputs":[{"name":"trivialenumvisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","",48,{"inputs":[{"name":"trivialenumvisitor"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_bytes","","",48,null],[11,"visit_byte_buf","","",48,{"inputs":[{"name":"trivialenumvisitor"},{"name":"vec"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"deserialize","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",49,{"inputs":[{"name":"serviceid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",49,{"inputs":[{"name":"serviceid"},{"name":"serviceid"}],"output":{"name":"bool"}}],[11,"clone","","",49,{"inputs":[{"name":"serviceid"}],"output":{"name":"serviceid"}}],[11,"fmt","","",49,{"inputs":[{"name":"serviceid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"deserialize","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",50,{"inputs":[{"name":"adapterid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",50,{"inputs":[{"name":"adapterid"},{"name":"adapterid"}],"output":{"name":"bool"}}],[11,"clone","","",50,{"inputs":[{"name":"adapterid"}],"output":{"name":"adapterid"}}],[11,"fmt","","",50,{"inputs":[{"name":"adapterid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"deserialize","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",51,{"inputs":[{"name":"tagid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",51,{"inputs":[{"name":"tagid"},{"name":"tagid"}],"output":{"name":"bool"}}],[11,"clone","","",51,{"inputs":[{"name":"tagid"}],"output":{"name":"tagid"}}],[11,"fmt","","",51,{"inputs":[{"name":"tagid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"deserialize","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",52,{"inputs":[{"name":"kindid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"kindid"},{"name":"kindid"}],"output":{"name":"bool"}}],[11,"clone","","",52,{"inputs":[{"name":"kindid"}],"output":{"name":"kindid"}}],[11,"fmt","","",52,{"inputs":[{"name":"kindid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"deserialize","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"serialize","","",53,{"inputs":[{"name":"vendorid"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",53,{"inputs":[{"name":"vendorid"},{"name":"vendorid"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"vendorid"}],"output":{"name":"vendorid"}}],[11,"fmt","","",53,{"inputs":[{"name":"vendorid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",54,{"inputs":[{"name":"mimetypeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"mimetypeid"}],"output":{"name":"mimetypeid"}}],[11,"new","alloc::arc","Constructs a new `Arc&lt;T&gt;`.",18,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Arc&lt;T&gt;` has exactly one strong reference.",18,{"inputs":[{"name":"arc"}],"output":{"name":"result"}}],[11,"downgrade","","Downgrades the `Arc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",18,{"inputs":[{"name":"arc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",18,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",18,{"inputs":[{"name":"arc"}],"output":{"name":"usize"}}],[11,"make_mut","","Make a mutable reference into the given `Arc&lt;T&gt;`.\nIf the `Arc&lt;T&gt;` has more than one strong reference, or any weak\nreferences, the inner data is cloned.",18,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Arc&lt;T&gt;` has\none strong reference and no weak references.",18,{"inputs":[{"name":"arc"}],"output":{"name":"option"}}],[11,"as_ref","","",18,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"borrow","","",18,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"from","","",18,{"inputs":[{"name":"t"}],"output":{"name":"arc"}}],[11,"hash","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"arc"}}],[11,"fmt","","",18,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"arc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",18,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","Partial comparison for two `Arc&lt;T&gt;`s.",18,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"option"}}],[11,"lt","","Less-than comparison for two `Arc&lt;T&gt;`s.",18,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",18,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"gt","","Greater-than comparison for two `Arc&lt;T&gt;`s.",18,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Arc&lt;T&gt;`s.",18,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"eq","","Equality for two `Arc&lt;T&gt;`s.",18,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"ne","","Inequality for two `Arc&lt;T&gt;`s.",18,{"inputs":[{"name":"arc"},{"name":"arc"}],"output":{"name":"bool"}}],[11,"drop","","Drops the `Arc&lt;T&gt;`.",18,null],[11,"deref","","",18,{"inputs":[{"name":"arc"}],"output":{"name":"t"}}],[11,"clone","","Makes a clone of the `Arc&lt;T&gt;`.",18,{"inputs":[{"name":"arc"}],"output":{"name":"arc"}}],[0,"manager","foxbox_taxonomy","The manager provides an API for (un)registering adapters, services, channels, and\nuses these to implements the taxonomy API.\nThe Adapter manager",null,null],[3,"AdapterManager","foxbox_taxonomy::manager","An implementation of the `AdapterManager`.",null,null],[3,"WatchGuard","","A data structure that causes cancellation of a watch when dropped.",null,null],[11,"new","","Create an empty `AdapterManager`.\nThis function does not attempt to load any state from the disk.",55,{"inputs":[],"output":{"name":"self"}}],[11,"default","","",55,{"inputs":[],"output":{"name":"self"}}],[11,"add_adapter","","Add an adapter to the system.",55,{"inputs":[{"name":"adaptermanager"},{"name":"arc"}],"output":{"name":"result"}}],[11,"remove_adapter","","Remove an adapter from the system, including all its services and channels.",55,{"inputs":[{"name":"adaptermanager"},{"name":"id"}],"output":{"name":"result"}}],[11,"add_service","","Add a service to the system. Called by the adapter when a new\nservice (typically a new device) has been detected/configured.",55,{"inputs":[{"name":"adaptermanager"},{"name":"service"}],"output":{"name":"result"}}],[11,"remove_service","","Remove a service previously registered on the system. Typically, called by\nan adapter when a service (e.g. a device) is disconnected.",55,{"inputs":[{"name":"adaptermanager"},{"name":"id"}],"output":{"name":"result"}}],[11,"add_getter","","Add a setter to the system. Typically, this is called by the adapter when a new\nservice has been detected/configured. Some services may gain/lose getters at\nruntime depending on their configuration.",55,{"inputs":[{"name":"adaptermanager"},{"name":"channel"}],"output":{"name":"result"}}],[11,"remove_getter","","Remove a setter previously registered on the system. Typically, called by\nan adapter when a service is reconfigured to remove one of its getters.",55,{"inputs":[{"name":"adaptermanager"},{"name":"id"}],"output":{"name":"result"}}],[11,"add_setter","","Add a setter to the system. Typically, this is called by the adapter when a new\nservice has been detected/configured. Some services may gain/lose setters at\nruntime depending on their configuration.",55,{"inputs":[{"name":"adaptermanager"},{"name":"channel"}],"output":{"name":"result"}}],[11,"remove_setter","","Remove a setter previously registered on the system. Typically, called by\nan adapter when a service is reconfigured to remove one of its setters.",55,{"inputs":[{"name":"adaptermanager"},{"name":"id"}],"output":{"name":"result"}}],[11,"get_services","","Get the metadata on services matching some conditions.",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"add_service_tags","","Label a set of services with a set of tags.",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[11,"remove_service_tags","","Remove a set of tags from a set of services.",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[11,"get_getter_channels","","Get a list of channels matching some conditions",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"get_setter_channels","","",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"}],"output":{"name":"vec"}}],[11,"add_getter_tags","","Label a set of channels with a set of tags.",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[11,"add_setter_tags","","",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[11,"remove_getter_tags","","Remove a set of tags from a set of channels.",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[11,"remove_setter_tags","","",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"},{"name":"vec"}],"output":{"name":"usize"}}],[11,"fetch_values","","Read the latest value from a set of channels",55,{"inputs":[{"name":"adaptermanager"},{"name":"vec"},{"name":"user"}],"output":{"name":"resultmap"}}],[11,"send_values","","Send a bunch of values to a set of channels",55,{"inputs":[{"name":"adaptermanager"},{"name":"targetmap"},{"name":"user"}],"output":{"name":"resultmap"}}],[11,"watch_values","","Watch for any change",55,{"inputs":[{"name":"adaptermanager"},{"name":"targetmap"},{"name":"box"}],"output":{"name":"watchguard"}}],[11,"drop","","",56,{"inputs":[{"name":"watchguard"}],"output":null}],[11,"stop","","",55,{"inputs":[{"name":"adaptermanager"}],"output":null}],[0,"adapter","foxbox_taxonomy","The API for defining Adapters.",null,null],[4,"WatchEvent","foxbox_taxonomy::adapter","",null,null],[13,"Enter","","Fired when we enter the range specified when we started watching, or if no range was\nspecified, fired whenever a new value is available.",57,null],[12,"id","foxbox_taxonomy::adapter::WatchEvent","",57,null],[12,"value","","",57,null],[13,"Exit","foxbox_taxonomy::adapter","Fired when we exit the range specified when we started watching. If no range was\nspecified, never fired.",57,null],[12,"id","foxbox_taxonomy::adapter::WatchEvent","",57,null],[12,"value","","",57,null],[6,"ResultMap","foxbox_taxonomy::adapter","",null,null],[6,"WatchTarget","","",null,null],[6,"WatchResult","","",null,null],[8,"AdapterWatchGuard","","A witness that we are currently watching for a value.\nWatching stops when the guard is dropped.",null,null],[8,"AdapterManagerHandle","","An API that adapter managers must implement",null,null],[10,"add_adapter","","Add an adapter to the system.",58,{"inputs":[{"name":"adaptermanagerhandle"},{"name":"arc"}],"output":{"name":"result"}}],[10,"remove_adapter","","Remove an adapter from the system, including all its services and channels.",58,{"inputs":[{"name":"adaptermanagerhandle"},{"name":"id"}],"output":{"name":"result"}}],[10,"add_service","","Add a service to the system. Called by the adapter when a new\nservice (typically a new device) has been detected/configured.",58,{"inputs":[{"name":"adaptermanagerhandle"},{"name":"service"}],"output":{"name":"result"}}],[10,"remove_service","","Remove a service previously registered on the system. Typically, called by\nan adapter when a service (e.g. a device) is disconnected.",58,{"inputs":[{"name":"adaptermanagerhandle"},{"name":"id"}],"output":{"name":"result"}}],[10,"add_getter","","Add a setter to the system. Typically, this is called by the adapter when a new\nservice has been detected/configured. Some services may gain/lose getters at\nruntime depending on their configuration.",58,{"inputs":[{"name":"adaptermanagerhandle"},{"name":"channel"}],"output":{"name":"result"}}],[10,"remove_getter","","Remove a setter previously registered on the system. Typically, called by\nan adapter when a service is reconfigured to remove one of its getters.",58,{"inputs":[{"name":"adaptermanagerhandle"},{"name":"id"}],"output":{"name":"result"}}],[10,"add_setter","","Add a setter to the system. Typically, this is called by the adapter when a new\nservice has been detected/configured. Some services may gain/lose setters at\nruntime depending on their configuration.",58,{"inputs":[{"name":"adaptermanagerhandle"},{"name":"channel"}],"output":{"name":"result"}}],[10,"remove_setter","","Remove a setter previously registered on the system. Typically, called by\nan adapter when a service is reconfigured to remove one of its setters.",58,{"inputs":[{"name":"adaptermanagerhandle"},{"name":"id"}],"output":{"name":"result"}}],[8,"Adapter","","API that adapters must implement.",null,null],[10,"id","","An id unique to this adapter. This id must persist between\nreboots/reconnections.",59,{"inputs":[{"name":"adapter"}],"output":{"name":"id"}}],[10,"name","","The name of the adapter.",59,{"inputs":[{"name":"adapter"}],"output":{"name":"str"}}],[10,"vendor","","",59,{"inputs":[{"name":"adapter"}],"output":{"name":"str"}}],[10,"version","","",59,null],[10,"fetch_values","","Request values from a group of channels.",59,{"inputs":[{"name":"adapter"},{"name":"vec"},{"name":"user"}],"output":{"name":"resultmap"}}],[10,"send_values","","Request that values be sent to channels.",59,{"inputs":[{"name":"adapter"},{"name":"hashmap"},{"name":"user"}],"output":{"name":"resultmap"}}],[10,"register_watch","","Watch a bunch of getters as they change.",59,{"inputs":[{"name":"adapter"},{"name":"vec"}],"output":{"name":"watchresult"}}],[11,"stop","","Signal the adapter that it is time to stop.",59,{"inputs":[{"name":"adapter"}],"output":null}],[0,"adapter_utils","foxbox_taxonomy","Utilities for writing Adapters.\nUtilities for writing adapters.",null,null],[3,"MakeSyncAdapter","foxbox_taxonomy::adapter_utils","A simple way of converting an Adapter to an Adapter + Sync.",null,null],[11,"new","","",60,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"id","","",60,{"inputs":[{"name":"makesyncadapter"}],"output":{"name":"id"}}],[11,"name","","",60,{"inputs":[{"name":"makesyncadapter"}],"output":{"name":"str"}}],[11,"vendor","","",60,{"inputs":[{"name":"makesyncadapter"}],"output":{"name":"str"}}],[11,"version","","",60,null],[11,"fetch_values","","",60,{"inputs":[{"name":"makesyncadapter"},{"name":"vec"},{"name":"user"}],"output":{"name":"resultmap"}}],[11,"send_values","","",60,{"inputs":[{"name":"makesyncadapter"},{"name":"hashmap"},{"name":"user"}],"output":{"name":"resultmap"}}],[11,"register_watch","","",60,{"inputs":[{"name":"makesyncadapter"},{"name":"vec"}],"output":{"name":"vec"}}],[0,"transact","foxbox_taxonomy","Utility module for inserting values in maps and keeping the insertion reversible in case of\nany error.\nImplementation of reversible insertions on maps.",null,null],[3,"InsertInMap","foxbox_taxonomy::transact","Insert a (key, value) pair in a map. However, if the object is dropped before method `commit()`\nis called, the insertion is cancelled.",null,null],[11,"start","","Insert (key, value) pairs in a map, reversibly, and without overwriting.",61,{"inputs":[{"name":"hashmap"},{"name":"vec"}],"output":{"name":"result"}}],[11,"commit","","Commit the transaction. Once this is done, the value may be dropped without cancelling\nthe insertion.",61,{"inputs":[{"name":"insertinmap"}],"output":null}],[11,"drop","","If this object is dropped before being committed, cancel the transaction.",61,{"inputs":[{"name":"insertinmap"}],"output":null}],[0,"fake_adapter","foxbox_taxonomy","Implementation of a fake adapter, controlled entirely programmatically. Designed to be used\nas a component of tests.\nAn adapter to a non-existing device, whose state is entirely controlled programmatically.\nUsed for testing.",null,null],[3,"FakeAdapter","foxbox_taxonomy::fake_adapter","",null,null],[4,"Tweak","","A tweak sent to the virtual device, to set a value, inject an error, ...",null,null],[13,"InjectGetterValue","","Inject a value in a virtual getter.",62,null],[13,"InjectSetterError","","Inject an error in a virtual setter. All operations on this setter will\nraise the error until `None` is injected instead.",62,null],[4,"Effect","","Something that happened to the virtual device, e.g. a value was sent.",null,null],[13,"ValueSent","","",63,null],[11,"fmt","","",63,{"inputs":[{"name":"effect"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",64,{"inputs":[{"name":"id"}],"output":{"name":"self"}}],[11,"take_rx","","",64,{"inputs":[{"name":"fakeadapter"}],"output":{"name":"receiver"}}],[11,"get_tweak","","",64,{"inputs":[{"name":"fakeadapter"}],"output":{"name":"arc"}}],[11,"id","","An id unique to this adapter. This id must persist between\nreboots/reconnections.",64,{"inputs":[{"name":"fakeadapter"}],"output":{"name":"id"}}],[11,"name","","The name of the adapter.",64,{"inputs":[{"name":"fakeadapter"}],"output":{"name":"str"}}],[11,"vendor","","",64,{"inputs":[{"name":"fakeadapter"}],"output":{"name":"str"}}],[11,"version","","",64,null],[11,"fetch_values","","Request a value from a channel. The `FoxBox` (not the adapter)\nis in charge of keeping track of the age of values.",64,{"inputs":[{"name":"fakeadapter"},{"name":"vec"},{"name":"user"}],"output":{"name":"resultmap"}}],[11,"send_values","","Request that a value be sent to a channel.",64,{"inputs":[{"name":"fakeadapter"},{"name":"hashmap"},{"name":"user"}],"output":{"name":"resultmap"}}],[11,"register_watch","","",64,{"inputs":[{"name":"fakeadapter"},{"name":"vec"}],"output":{"name":"vec"}}],[14,"service_id!","foxbox_taxonomy","",null,null],[14,"adapter_id!","","",null,null],[14,"tag_id!","","",null,null],[11,"description","foxbox_taxonomy::util","",44,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",44,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}],[11,"description","","",44,{"inputs":[],"output":{"name":"string"}}],[11,"parse","","",44,{"inputs":[{"name":"path"},{"name":"json"}],"output":{"name":"result"}}]],"paths":[[3,"Service"],[3,"Getter"],[3,"Setter"],[3,"Channel"],[4,"ChannelKind"],[4,"Error"],[4,"InternalError"],[4,"WatchEvent"],[4,"User"],[8,"API"],[4,"JSON"],[4,"ParseError"],[8,"Parser"],[8,"ToJSON"],[3,"Path"],[3,"JSONError"],[3,"Vec"],[3,"String"],[3,"Arc"],[3,"HashSet"],[3,"HashMap"],[4,"Option"],[3,"ServiceSelector"],[3,"GetterSelector"],[3,"SetterSelector"],[3,"Period"],[8,"SelectedBy"],[8,"ServiceLike"],[3,"TypeError"],[3,"WebPushNotify"],[3,"ThinkerbellRule"],[3,"Json"],[3,"ExtValue"],[3,"Binary"],[4,"Type"],[4,"OnOff"],[4,"OpenClosed"],[4,"DoorLocked"],[4,"Temperature"],[4,"Color"],[4,"Value"],[4,"Range"],[3,"TimeStamp"],[3,"Duration"],[3,"Targetted"],[4,"Exactly"],[3,"Phantom"],[3,"Id"],[3,"TrivialEnumVisitor"],[3,"ServiceId"],[3,"AdapterId"],[3,"TagId"],[3,"KindId"],[3,"VendorId"],[3,"MimeTypeId"],[3,"AdapterManager"],[3,"WatchGuard"],[4,"WatchEvent"],[8,"AdapterManagerHandle"],[8,"Adapter"],[3,"MakeSyncAdapter"],[3,"InsertInMap"],[4,"Tweak"],[4,"Effect"],[3,"FakeAdapter"]]};
searchIndex["clippy"] = {"doc":"","items":[[5,"plugin_registrar","clippy","",null,{"inputs":[{"name":"registry"}],"output":null}],[0,"consts","","",null,null],[4,"FloatWidth","clippy::consts","",null,null],[13,"F32","","",0,null],[13,"F64","","",0,null],[13,"Any","","",0,null],[4,"Constant","","A `LitKind`-like enum to fold constant `Expr`s into.",null,null],[13,"Str","","a String &quot;abc&quot;",1,null],[13,"Binary","","a Binary String b&quot;abc&quot;",1,null],[13,"Char","","a single char &#39;a&#39;",1,null],[13,"Int","","an integer, third argument is whether the value is negated",1,null],[13,"Float","","a float with given type",1,null],[13,"Bool","","true or false",1,null],[13,"Vec","","an array of constants",1,null],[13,"Repeat","","also an array, but with only one constant, repeated N times",1,null],[13,"Tuple","","a tuple of constants",1,null],[5,"constant","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"constant_simple","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"floatwidth"}],"output":{"name":"floatwidth"}}],[11,"fmt","","",0,{"inputs":[{"name":"floatwidth"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"floatty"}],"output":{"name":"floatwidth"}}],[11,"clone","","",1,{"inputs":[{"name":"constant"}],"output":{"name":"constant"}}],[11,"fmt","","",1,{"inputs":[{"name":"constant"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_float","","convert this constant to a f64, if possible",1,{"inputs":[{"name":"constant"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"constant"},{"name":"constant"}],"output":{"name":"bool"}}],[11,"hash","","",1,{"inputs":[{"name":"constant"},{"name":"h"}],"output":null}],[11,"partial_cmp","","",1,{"inputs":[{"name":"constant"},{"name":"constant"}],"output":{"name":"option"}}],[0,"utils","clippy","",null,null],[3,"SpanlessEq","clippy::utils","Type used to check whether two ast are the same. This is different from the operator\n`==` on ast types as this operator would compare true equality with ID and span.",null,null],[3,"SpanlessHash","","Type used to hash an ast element. This is different from the `Hash` trait on ast types as this\ntrait would consider IDs and spans.",null,null],[3,"DiagnosticWrapper","","",null,null],[12,"0","","",2,null],[3,"LimitStack","","",null,null],[3,"UnsugaredRange","","Represent a range akin to `ast::ExprKind::Range`.",null,null],[12,"start","","",3,null],[12,"end","","",3,null],[12,"limits","","",3,null],[5,"differing_macro_contexts","","Returns true if the two spans come from differing expansions (i.e. one is from a macro and one\nisn&#39;t).",null,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"bool"}}],[5,"in_macro","","Returns true if this `expn_info` was expanded by any macro.",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"bool"}}],[5,"in_external_macro","","Returns true if the macro that expanded the crate was outside of the current crate or was a\ncompiler plugin.",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"bool"}}],[5,"match_def_path","","Check if a `DefId`&#39;s path matches the given absolute type path usage.",null,null],[5,"match_type","","Check if type is struct or enum type with given def path.",null,null],[5,"match_impl_method","","Check if the method call given in `expr` belongs to given type.",null,null],[5,"match_trait_method","","Check if the method call given in `expr` belongs to given trait.",null,null],[5,"match_path","","Match a `Path` against a slice of segment string literals.",null,null],[5,"match_path_ast","","Match a `Path` against a slice of segment string literals, e.g.",null,null],[5,"path_to_def","","Get the definition associated to a path.\nTODO: investigate if there is something more efficient for that.",null,null],[5,"get_trait_def_id","","Convenience function to get the `DefId` of a trait by path.",null,null],[5,"implements_trait","","Check whether a type implements a trait.\nSee also `get_trait_def_id`.",null,{"inputs":[{"name":"latecontext"},{"name":"ty"},{"name":"defid"},{"name":"vec"}],"output":{"name":"bool"}}],[5,"method_chain_args","","Match an `Expr` against a chain of methods, and return the matched `Expr`s.",null,null],[5,"get_item_name","","Get the name of the item the expression is in, if available.",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"is_from_for_desugar","","Checks if a `let` decl is from a `for` loop desugaring.",null,{"inputs":[{"name":"decl"}],"output":{"name":"bool"}}],[5,"snippet","","Convert a span to a code snippet if available, otherwise use default.",null,{"inputs":[{"name":"t"},{"name":"span"},{"name":"str"}],"output":{"name":"cow"}}],[5,"snippet_opt","","Convert a span to a code snippet. Returns `None` if not available.",null,{"inputs":[{"name":"t"},{"name":"span"}],"output":{"name":"option"}}],[5,"snippet_block","","Convert a span (from a block) to a code snippet if available, otherwise use default.\nThis trims the code of indentation, except for the first line. Use it for blocks or block-like\nthings which need to be printed as such.",null,{"inputs":[{"name":"t"},{"name":"span"},{"name":"str"}],"output":{"name":"cow"}}],[5,"expr_block","","Like `snippet_block`, but add braces if the expr is not an `ExprBlock`.\nAlso takes an `Option&lt;String&gt;` which can be put inside the braces.",null,{"inputs":[{"name":"t"},{"name":"expr"},{"name":"option"},{"name":"str"}],"output":{"name":"cow"}}],[5,"trim_multiline","","Trim indentation from a multiline string with possibility of ignoring the first line.",null,{"inputs":[{"name":"cow"},{"name":"bool"}],"output":{"name":"cow"}}],[5,"get_parent_expr","","Get a parent expressions if any – this is useful to constrain a lint.",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[5,"get_enclosing_block","","",null,{"inputs":[{"name":"latecontext"},{"name":"nodeid"}],"output":{"name":"option"}}],[5,"span_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticwrapper"}}],[5,"span_help_and_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"str"}],"output":{"name":"diagnosticwrapper"}}],[5,"span_note_and_lint","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"span"},{"name":"str"}],"output":{"name":"diagnosticwrapper"}}],[5,"span_lint_and_then","","",null,{"inputs":[{"name":"t"},{"name":"lint"},{"name":"span"},{"name":"str"},{"name":"f"}],"output":{"name":"diagnosticwrapper"}}],[5,"walk_ptrs_ty","","Return the base type for references and raw pointers.",null,{"inputs":[{"name":"ty"}],"output":{"name":"ty"}}],[5,"walk_ptrs_ty_depth","","Return the base type for references and raw pointers, and count reference depth.",null,null],[5,"is_integer_literal","","Check whether the given expression is a constant literal of the given value.",null,{"inputs":[{"name":"expr"},{"name":"u64"}],"output":{"name":"bool"}}],[5,"is_adjusted","","",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"bool"}}],[5,"is_expn_of","","Return the pre-expansion span if is this comes from an expansion of the macro `name`.\nSee also `is_direct_expn_of`.",null,{"inputs":[{"name":"latecontext"},{"name":"span"},{"name":"str"}],"output":{"name":"option"}}],[5,"is_direct_expn_of","","Return the pre-expansion span if is this directly comes from an expansion of the macro `name`.\nThe difference with `is_expn_of` is that in\n```rust,ignore\nfoo!(bar!(42));\n```\n`42` is considered expanded from `foo!` and `bar!` by `is_expn_of` but only `bar!` by\n`is_direct_expn_of`.",null,{"inputs":[{"name":"latecontext"},{"name":"span"},{"name":"str"}],"output":{"name":"option"}}],[5,"camel_case_until","","Return the index of the character after the first camel-case component of `s`.",null,{"inputs":[{"name":"str"}],"output":{"name":"usize"}}],[5,"camel_case_from","","Return index of the last camel-case component of `s`.",null,{"inputs":[{"name":"str"}],"output":{"name":"usize"}}],[5,"unsugar_range","","Unsugar a `hir` range.",null,{"inputs":[{"name":"expr"}],"output":{"name":"option"}}],[5,"return_ty","","Convenience function to get the return type of a function or `None` if the function diverges.",null,{"inputs":[{"name":"latecontext"},{"name":"nodeid"}],"output":{"name":"option"}}],[5,"same_tys","","Check if two types are the same.",null,{"inputs":[{"name":"latecontext"},{"name":"ty"},{"name":"ty"},{"name":"nodeid"}],"output":{"name":"bool"}}],[5,"recover_for_loop","","Recover the essential nodes of a desugared for loop:\n`for pat in arg { body }` becomes `(pat, arg, body)`.",null,{"inputs":[{"name":"expr"}],"output":{"name":"option"}}],[0,"comparisons","","",null,null],[4,"Rel","clippy::utils::comparisons","",null,null],[13,"Lt","","",4,null],[13,"Le","","",4,null],[13,"Eq","","",4,null],[13,"Ne","","",4,null],[5,"normalize_comparison","","Put the expression in the form  `lhs &lt; rhs` or `lhs &lt;= rhs`.",null,{"inputs":[{"name":"binop_"},{"name":"expr"},{"name":"expr"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"rel"}],"output":{"name":"rel"}}],[11,"fmt","","",4,{"inputs":[{"name":"rel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"rel"},{"name":"rel"}],"output":{"name":"bool"}}],[0,"conf","clippy::utils","",null,null],[3,"Conf","clippy::utils::conf","Type used to store lint configuration.",null,null],[12,"blacklisted_names","","Lint: BLACKLISTED_NAME. The list of blacklisted names to lint about",5,null],[12,"cyclomatic_complexity_threshold","","Lint: CYCLOMATIC_COMPLEXITY. The maximum cyclomatic complexity a function can have",5,null],[12,"doc_valid_idents","","Lint: DOC_MARKDOWN. The list of words this lint should not consider as identifiers needing ticks",5,null],[12,"too_many_arguments_threshold","","Lint: TOO_MANY_ARGUMENTS. The maximum number of argument a function or method can have",5,null],[12,"type_complexity_threshold","","Lint: TYPE_COMPLEXITY. The maximum complexity a type can have",5,null],[12,"max_single_char_names","","Lint: MANY_SINGLE_CHAR_NAMES. The maximum number of single char bindings a scope may have",5,null],[4,"ConfError","","Error from reading a configuration file.",null,null],[13,"IoError","","",6,null],[13,"TomlError","","",6,null],[13,"TypeError","","",6,null],[13,"UnknownKey","","",6,null],[5,"conf_file","","Get the configuration file from arguments.",null,null],[5,"read_conf","","Read the `toml` configuration file. The function will ignore “File not found” errors iif\n`!must_exist`, in which case, it will return the default configuration.\nIn case of error, the function tries to continue as much as possible.",null,null],[11,"fmt","","",6,{"inputs":[{"name":"conferror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"conferror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",6,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"default","","",5,{"inputs":[],"output":{"name":"conf"}}],[11,"new","clippy::utils","",7,{"inputs":[{"name":"latecontext"}],"output":{"name":"self"}}],[11,"ignore_fn","","",7,{"inputs":[{"name":"spanlesseq"}],"output":{"name":"self"}}],[11,"eq_stmt","","Check whether two statements are the same.",7,{"inputs":[{"name":"spanlesseq"},{"name":"stmt"},{"name":"stmt"}],"output":{"name":"bool"}}],[11,"eq_block","","Check whether two blocks are the same.",7,{"inputs":[{"name":"spanlesseq"},{"name":"block"},{"name":"block"}],"output":{"name":"bool"}}],[11,"eq_expr","","",7,{"inputs":[{"name":"spanlesseq"},{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"eq_pat","","Check whether two patterns are the same.",7,{"inputs":[{"name":"spanlesseq"},{"name":"pat"},{"name":"pat"}],"output":{"name":"bool"}}],[11,"new","","",8,{"inputs":[{"name":"latecontext"}],"output":{"name":"self"}}],[11,"finish","","",8,{"inputs":[{"name":"spanlesshash"}],"output":{"name":"u64"}}],[11,"hash_block","","",8,{"inputs":[{"name":"spanlesshash"},{"name":"block"}],"output":null}],[11,"hash_expr","","",8,{"inputs":[{"name":"spanlesshash"},{"name":"expr"}],"output":null}],[11,"hash_exprs","","",8,null],[11,"hash_name","","",8,{"inputs":[{"name":"spanlesshash"},{"name":"name"}],"output":null}],[11,"hash_path","","",8,{"inputs":[{"name":"spanlesshash"},{"name":"path"}],"output":null}],[11,"hash_stmt","","",8,{"inputs":[{"name":"spanlesshash"},{"name":"stmt"}],"output":null}],[6,"MethodArgs","","",null,null],[17,"BEGIN_UNWIND","","",null,null],[17,"BOX_NEW_PATH","","",null,null],[17,"BTREEMAP_ENTRY_PATH","","",null,null],[17,"BTREEMAP_PATH","","",null,null],[17,"CLONE_PATH","","",null,null],[17,"CLONE_TRAIT_PATH","","",null,null],[17,"COW_PATH","","",null,null],[17,"DEBUG_FMT_METHOD_PATH","","",null,null],[17,"DEFAULT_TRAIT_PATH","","",null,null],[17,"DISPLAY_FMT_METHOD_PATH","","",null,null],[17,"DROP_PATH","","",null,null],[17,"FMT_ARGUMENTS_NEWV1_PATH","","",null,null],[17,"FMT_ARGUMENTV1_NEW_PATH","","",null,null],[17,"HASHMAP_ENTRY_PATH","","",null,null],[17,"HASHMAP_PATH","","",null,null],[17,"HASH_PATH","","",null,null],[17,"IO_PRINT_PATH","","",null,null],[17,"LL_PATH","","",null,null],[17,"MUTEX_PATH","","",null,null],[17,"OPEN_OPTIONS_PATH","","",null,null],[17,"OPTION_PATH","","",null,null],[17,"RANGE_FROM_PATH","","",null,null],[17,"RANGE_FULL_PATH","","",null,null],[17,"RANGE_INCLUSIVE_NON_EMPTY_PATH","","",null,null],[17,"RANGE_PATH","","",null,null],[17,"RANGE_TO_INCLUSIVE_PATH","","",null,null],[17,"RANGE_TO_PATH","","",null,null],[17,"REGEX_NEW_PATH","","",null,null],[17,"RESULT_PATH","","",null,null],[17,"STRING_PATH","","",null,null],[17,"TRANSMUTE_PATH","","",null,null],[17,"VEC_FROM_ELEM_PATH","","",null,null],[17,"VEC_PATH","","",null,null],[17,"BOX_PATH","","",null,null],[11,"drop","","",2,{"inputs":[{"name":"diagnosticwrapper"}],"output":null}],[11,"deref_mut","","",2,{"inputs":[{"name":"diagnosticwrapper"}],"output":{"name":"diagnosticbuilder"}}],[11,"emit","syntax::errors","Emit the diagnostic.",9,null],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or\ncancelled or it will panic when dropped).\nBEWARE: if this DiagnosticBuilder is an error, then creating it will\nbump the error count on the Handler and cancelling it won&#39;t undo that.\nIf you want to decrement the error count you should use `Handler::cancel`.",9,null],[11,"cancelled","","",9,{"inputs":[{"name":"diagnosticbuilder"}],"output":{"name":"bool"}}],[11,"is_fatal","","",9,{"inputs":[{"name":"diagnosticbuilder"}],"output":{"name":"bool"}}],[11,"note","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_note","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"warn","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_warn","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"help","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_help","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"s"},{"name":"str"},{"name":"string"}],"output":{"name":"diagnosticbuilder"}}],[11,"span_end_note","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"fileline_warn","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"fileline_note","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"fileline_help","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"s"},{"name":"str"}],"output":{"name":"diagnosticbuilder"}}],[11,"span","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"s"}],"output":{"name":"diagnosticbuilder"}}],[11,"code","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"string"}],"output":{"name":"diagnosticbuilder"}}],[11,"drop","","",9,null],[11,"fmt","","",9,{"inputs":[{"name":"diagnosticbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","clippy::utils","",2,{"inputs":[{"name":"diagnosticwrapper"}],"output":{"name":"diagnosticbuilder"}}],[11,"drop","","",10,{"inputs":[{"name":"limitstack"}],"output":null}],[11,"new","","",10,{"inputs":[{"name":"u64"}],"output":{"name":"limitstack"}}],[11,"limit","","",10,{"inputs":[{"name":"limitstack"}],"output":{"name":"u64"}}],[11,"push_attrs","","",10,null],[11,"pop_attrs","","",10,null],[11,"clone","","",3,{"inputs":[{"name":"unsugaredrange"}],"output":{"name":"unsugaredrange"}}],[11,"fmt","","",3,{"inputs":[{"name":"unsugaredrange"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"approx_const","clippy","",null,null],[3,"ApproxConstant","clippy::approx_const","",null,null],[7,"APPROX_CONSTANT","","",null,null],[11,"clone","","",11,{"inputs":[{"name":"approxconstant"}],"output":{"name":"approxconstant"}}],[11,"get_lints","","",11,{"inputs":[{"name":"approxconstant"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",11,{"inputs":[{"name":"approxconstant"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"array_indexing","clippy","",null,null],[3,"ArrayIndexing","clippy::array_indexing","",null,null],[7,"OUT_OF_BOUNDS_INDEXING","","",null,null],[7,"INDEXING_SLICING","","",null,null],[11,"clone","","",12,{"inputs":[{"name":"arrayindexing"}],"output":{"name":"arrayindexing"}}],[11,"get_lints","","",12,{"inputs":[{"name":"arrayindexing"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",12,{"inputs":[{"name":"arrayindexing"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"attrs","clippy","checks for attributes",null,null],[3,"AttrPass","clippy::attrs","",null,null],[7,"INLINE_ALWAYS","","",null,null],[7,"DEPRECATED_SEMVER","","",null,null],[11,"clone","","",13,{"inputs":[{"name":"attrpass"}],"output":{"name":"attrpass"}}],[11,"get_lints","","",13,{"inputs":[{"name":"attrpass"}],"output":{"name":"lintarray"}}],[11,"check_attribute","","",13,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"attribute"}],"output":null}],[11,"check_item","","",13,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",13,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",13,{"inputs":[{"name":"attrpass"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"bit_mask","clippy","",null,null],[3,"BitMask","clippy::bit_mask","Checks for incompatible bit masks in comparisons, e.g. `x &amp; 1 == 2`.\nThis cannot work because the bit that makes up the value two was\nzeroed out by the bit-and with 1. So the formula for detecting if an\nexpression of the type  `_ &lt;bit_op&gt; m &lt;cmp_op&gt; c` (where `&lt;bit_op&gt;`\nis one of {`&amp;`, &#39;|&#39;} and `&lt;cmp_op&gt;` is one of {`!=`, `&gt;=`, `&gt;` ,\n`!=`, `&gt;=`, `&gt;`}) can be determined from the following table:",null,null],[7,"BAD_BIT_MASK","","",null,null],[7,"INEFFECTIVE_BIT_MASK","","",null,null],[11,"clone","","",14,{"inputs":[{"name":"bitmask"}],"output":{"name":"bitmask"}}],[11,"get_lints","","",14,{"inputs":[{"name":"bitmask"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",14,{"inputs":[{"name":"bitmask"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"blacklisted_name","clippy","",null,null],[3,"BlackListedName","clippy::blacklisted_name","",null,null],[7,"BLACKLISTED_NAME","","",null,null],[11,"fmt","","",15,{"inputs":[{"name":"blacklistedname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"blacklistedname"}],"output":{"name":"blacklistedname"}}],[11,"new","","",15,{"inputs":[{"name":"vec"}],"output":{"name":"blacklistedname"}}],[11,"get_lints","","",15,{"inputs":[{"name":"blacklistedname"}],"output":{"name":"lintarray"}}],[11,"check_pat","","",15,{"inputs":[{"name":"blacklistedname"},{"name":"latecontext"},{"name":"pat"}],"output":null}],[0,"block_in_if_condition","clippy","",null,null],[3,"BlockInIfCondition","clippy::block_in_if_condition","",null,null],[7,"BLOCK_IN_IF_CONDITION_EXPR","","",null,null],[7,"BLOCK_IN_IF_CONDITION_STMT","","",null,null],[11,"clone","","",16,{"inputs":[{"name":"blockinifcondition"}],"output":{"name":"blockinifcondition"}}],[11,"get_lints","","",16,{"inputs":[{"name":"blockinifcondition"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",16,{"inputs":[{"name":"blockinifcondition"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"booleans","clippy","",null,null],[3,"NonminimalBool","clippy::booleans","",null,null],[7,"NONMINIMAL_BOOL","","",null,null],[7,"LOGIC_BUG","","",null,null],[11,"clone","","",17,{"inputs":[{"name":"nonminimalbool"}],"output":{"name":"nonminimalbool"}}],[11,"get_lints","","",17,{"inputs":[{"name":"nonminimalbool"}],"output":{"name":"lintarray"}}],[11,"check_item","","",17,{"inputs":[{"name":"nonminimalbool"},{"name":"latecontext"},{"name":"item"}],"output":null}],[0,"collapsible_if","clippy","Checks for if expressions that contain only an if expression.",null,null],[3,"CollapsibleIf","clippy::collapsible_if","",null,null],[7,"COLLAPSIBLE_IF","","",null,null],[11,"clone","","",18,{"inputs":[{"name":"collapsibleif"}],"output":{"name":"collapsibleif"}}],[11,"get_lints","","",18,{"inputs":[{"name":"collapsibleif"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",18,{"inputs":[{"name":"collapsibleif"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"copies","clippy","",null,null],[3,"CopyAndPaste","clippy::copies","",null,null],[7,"IFS_SAME_COND","","",null,null],[7,"IF_SAME_THEN_ELSE","","",null,null],[7,"MATCH_SAME_ARMS","","",null,null],[11,"fmt","","",19,{"inputs":[{"name":"copyandpaste"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"copyandpaste"}],"output":{"name":"copyandpaste"}}],[11,"get_lints","","",19,{"inputs":[{"name":"copyandpaste"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",19,{"inputs":[{"name":"copyandpaste"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"cyclomatic_complexity","clippy","calculate cyclomatic complexity and warn about overly complex functions",null,null],[3,"CyclomaticComplexity","clippy::cyclomatic_complexity","",null,null],[7,"CYCLOMATIC_COMPLEXITY","","",null,null],[11,"new","","",20,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"get_lints","","",20,{"inputs":[{"name":"cyclomaticcomplexity"}],"output":{"name":"lintarray"}}],[11,"check_item","","",20,{"inputs":[{"name":"cyclomaticcomplexity"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",20,{"inputs":[{"name":"cyclomaticcomplexity"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",20,{"inputs":[{"name":"cyclomaticcomplexity"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[11,"enter_lint_attrs","","",20,null],[11,"exit_lint_attrs","","",20,null],[0,"derive","clippy","",null,null],[3,"Derive","clippy::derive","",null,null],[7,"DERIVE_HASH_XOR_EQ","","",null,null],[7,"EXPL_IMPL_CLONE_ON_COPY","","",null,null],[11,"get_lints","","",21,{"inputs":[{"name":"derive"}],"output":{"name":"lintarray"}}],[11,"check_item","","",21,{"inputs":[{"name":"derive"},{"name":"latecontext"},{"name":"item"}],"output":null}],[0,"doc","clippy","",null,null],[3,"Doc","clippy::doc","",null,null],[5,"check_attrs","","",null,null],[7,"DOC_MARKDOWN","","",null,null],[11,"clone","","",22,{"inputs":[{"name":"doc"}],"output":{"name":"doc"}}],[11,"new","","",22,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"get_lints","","",22,{"inputs":[{"name":"doc"}],"output":{"name":"lintarray"}}],[11,"check_crate","","",22,{"inputs":[{"name":"doc"},{"name":"earlycontext"},{"name":"crate"}],"output":null}],[11,"check_item","","",22,{"inputs":[{"name":"doc"},{"name":"earlycontext"},{"name":"item"}],"output":null}],[0,"drop_ref","clippy","",null,null],[3,"DropRefPass","clippy::drop_ref","",null,null],[7,"DROP_REF","","",null,null],[11,"get_lints","","",23,{"inputs":[{"name":"droprefpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",23,{"inputs":[{"name":"droprefpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"entry","clippy","",null,null],[3,"HashMapLint","clippy::entry","",null,null],[7,"MAP_ENTRY","","",null,null],[11,"clone","","",24,{"inputs":[{"name":"hashmaplint"}],"output":{"name":"hashmaplint"}}],[11,"get_lints","","",24,{"inputs":[{"name":"hashmaplint"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",24,{"inputs":[{"name":"hashmaplint"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"enum_clike","clippy","lint on C-like enums that are `repr(isize/usize)` and have values that don&#39;t fit into an `i32`",null,null],[3,"EnumClikeUnportableVariant","clippy::enum_clike","",null,null],[7,"ENUM_CLIKE_UNPORTABLE_VARIANT","","",null,null],[11,"get_lints","","",25,{"inputs":[{"name":"enumclikeunportablevariant"}],"output":{"name":"lintarray"}}],[11,"check_item","","",25,{"inputs":[{"name":"enumclikeunportablevariant"},{"name":"latecontext"},{"name":"item"}],"output":null}],[0,"enum_glob_use","clippy","lint on `use`ing all variants of an enum",null,null],[3,"EnumGlobUse","clippy::enum_glob_use","",null,null],[7,"ENUM_GLOB_USE","","",null,null],[11,"get_lints","","",26,{"inputs":[{"name":"enumglobuse"}],"output":{"name":"lintarray"}}],[11,"check_mod","","",26,{"inputs":[{"name":"enumglobuse"},{"name":"latecontext"},{"name":"mod"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"enum_variants","clippy","lint on enum variants that are prefixed or suffixed by the same characters",null,null],[3,"EnumVariantNames","clippy::enum_variants","",null,null],[7,"ENUM_VARIANT_NAMES","","",null,null],[11,"get_lints","","",27,{"inputs":[{"name":"enumvariantnames"}],"output":{"name":"lintarray"}}],[11,"check_item","","",27,{"inputs":[{"name":"enumvariantnames"},{"name":"earlycontext"},{"name":"item"}],"output":null}],[0,"eq_op","clippy","",null,null],[3,"EqOp","clippy::eq_op","",null,null],[7,"EQ_OP","","",null,null],[11,"clone","","",28,{"inputs":[{"name":"eqop"}],"output":{"name":"eqop"}}],[11,"get_lints","","",28,{"inputs":[{"name":"eqop"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",28,{"inputs":[{"name":"eqop"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"escape","clippy","",null,null],[3,"EscapePass","clippy::escape","",null,null],[7,"BOXED_LOCAL","","",null,null],[11,"get_lints","","",29,{"inputs":[{"name":"escapepass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",29,{"inputs":[{"name":"escapepass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"eta_reduction","clippy","",null,null],[3,"EtaPass","clippy::eta_reduction","",null,null],[7,"REDUNDANT_CLOSURE","","",null,null],[11,"get_lints","","",30,{"inputs":[{"name":"etapass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",30,{"inputs":[{"name":"etapass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"format","clippy","",null,null],[3,"FormatMacLint","clippy::format","",null,null],[7,"USELESS_FORMAT","","",null,null],[11,"fmt","","",31,{"inputs":[{"name":"formatmaclint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"formatmaclint"}],"output":{"name":"formatmaclint"}}],[11,"get_lints","","",31,{"inputs":[{"name":"formatmaclint"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",31,{"inputs":[{"name":"formatmaclint"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"formatting","clippy","",null,null],[3,"Formatting","clippy::formatting","",null,null],[7,"SUSPICIOUS_ASSIGNMENT_FORMATTING","","",null,null],[7,"SUSPICIOUS_ELSE_FORMATTING","","",null,null],[11,"clone","","",32,{"inputs":[{"name":"formatting"}],"output":{"name":"formatting"}}],[11,"get_lints","","",32,{"inputs":[{"name":"formatting"}],"output":{"name":"lintarray"}}],[11,"check_block","","",32,{"inputs":[{"name":"formatting"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[11,"check_expr","","",32,{"inputs":[{"name":"formatting"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[0,"functions","clippy","",null,null],[3,"Functions","clippy::functions","",null,null],[7,"TOO_MANY_ARGUMENTS","","",null,null],[11,"clone","","",33,{"inputs":[{"name":"functions"}],"output":{"name":"functions"}}],[11,"new","","",33,{"inputs":[{"name":"u64"}],"output":{"name":"functions"}}],[11,"get_lints","","",33,{"inputs":[{"name":"functions"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",33,{"inputs":[{"name":"functions"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_trait_item","","",33,{"inputs":[{"name":"functions"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"identity_op","clippy","",null,null],[3,"IdentityOp","clippy::identity_op","",null,null],[7,"IDENTITY_OP","","",null,null],[11,"clone","","",34,{"inputs":[{"name":"identityop"}],"output":{"name":"identityop"}}],[11,"get_lints","","",34,{"inputs":[{"name":"identityop"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",34,{"inputs":[{"name":"identityop"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"if_not_else","clippy","lint on if branches that could be swapped so no `!` operation is necessary on the condition",null,null],[3,"IfNotElse","clippy::if_not_else","",null,null],[7,"IF_NOT_ELSE","","",null,null],[11,"get_lints","","",35,{"inputs":[{"name":"ifnotelse"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",35,{"inputs":[{"name":"ifnotelse"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[0,"items_after_statements","clippy","lint when items are used after statements",null,null],[3,"ItemsAfterStatements","clippy::items_after_statements","",null,null],[7,"ITEMS_AFTER_STATEMENTS","","",null,null],[11,"get_lints","","",36,{"inputs":[{"name":"itemsafterstatements"}],"output":{"name":"lintarray"}}],[11,"check_block","","",36,{"inputs":[{"name":"itemsafterstatements"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[0,"len_zero","clippy","",null,null],[3,"LenZero","clippy::len_zero","",null,null],[7,"LEN_ZERO","","",null,null],[7,"LEN_WITHOUT_IS_EMPTY","","",null,null],[11,"clone","","",37,{"inputs":[{"name":"lenzero"}],"output":{"name":"lenzero"}}],[11,"get_lints","","",37,{"inputs":[{"name":"lenzero"}],"output":{"name":"lintarray"}}],[11,"check_item","","",37,{"inputs":[{"name":"lenzero"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_expr","","",37,{"inputs":[{"name":"lenzero"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"lifetimes","clippy","",null,null],[3,"LifetimePass","clippy::lifetimes","",null,null],[7,"NEEDLESS_LIFETIMES","","",null,null],[7,"UNUSED_LIFETIMES","","",null,null],[11,"clone","","",38,{"inputs":[{"name":"lifetimepass"}],"output":{"name":"lifetimepass"}}],[11,"get_lints","","",38,{"inputs":[{"name":"lifetimepass"}],"output":{"name":"lintarray"}}],[11,"check_item","","",38,{"inputs":[{"name":"lifetimepass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",38,{"inputs":[{"name":"lifetimepass"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",38,{"inputs":[{"name":"lifetimepass"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"loops","clippy","",null,null],[3,"LoopsPass","clippy::loops","",null,null],[7,"NEEDLESS_RANGE_LOOP","","",null,null],[7,"EXPLICIT_ITER_LOOP","","",null,null],[7,"ITER_NEXT_LOOP","","",null,null],[7,"FOR_LOOP_OVER_OPTION","","",null,null],[7,"FOR_LOOP_OVER_RESULT","","",null,null],[7,"WHILE_LET_LOOP","","",null,null],[7,"UNUSED_COLLECT","","",null,null],[7,"REVERSE_RANGE_LOOP","","",null,null],[7,"EXPLICIT_COUNTER_LOOP","","",null,null],[7,"EMPTY_LOOP","","",null,null],[7,"WHILE_LET_ON_ITERATOR","","",null,null],[7,"FOR_KV_MAP","","",null,null],[11,"clone","","",39,{"inputs":[{"name":"loopspass"}],"output":{"name":"loopspass"}}],[11,"get_lints","","",39,{"inputs":[{"name":"loopspass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",39,{"inputs":[{"name":"loopspass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_stmt","","",39,{"inputs":[{"name":"loopspass"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[0,"map_clone","clippy","",null,null],[3,"MapClonePass","clippy::map_clone","",null,null],[7,"MAP_CLONE","","",null,null],[11,"clone","","",40,{"inputs":[{"name":"mapclonepass"}],"output":{"name":"mapclonepass"}}],[11,"check_expr","","",40,{"inputs":[{"name":"mapclonepass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",40,{"inputs":[{"name":"mapclonepass"}],"output":{"name":"lintarray"}}],[0,"matches","clippy","",null,null],[3,"MatchPass","clippy::matches","",null,null],[3,"SpannedRange","","",null,null],[12,"span","","",41,null],[12,"node","","",41,null],[5,"overlapping","","",null,null],[7,"SINGLE_MATCH","","",null,null],[7,"SINGLE_MATCH_ELSE","","",null,null],[7,"MATCH_REF_PATS","","",null,null],[7,"MATCH_BOOL","","",null,null],[7,"MATCH_OVERLAPPING_ARM","","",null,null],[11,"get_lints","","",42,{"inputs":[{"name":"matchpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",42,{"inputs":[{"name":"matchpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"eq","","",41,{"inputs":[{"name":"spannedrange"},{"name":"spannedrange"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"spannedrange"},{"name":"spannedrange"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"spannedrange"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"methods","clippy","",null,null],[3,"MethodsPass","clippy::methods","",null,null],[7,"OPTION_UNWRAP_USED","","",null,null],[7,"RESULT_UNWRAP_USED","","",null,null],[7,"SHOULD_IMPLEMENT_TRAIT","","",null,null],[7,"WRONG_SELF_CONVENTION","","",null,null],[7,"WRONG_PUB_SELF_CONVENTION","","",null,null],[7,"OK_EXPECT","","",null,null],[7,"OPTION_MAP_UNWRAP_OR","","",null,null],[7,"OPTION_MAP_UNWRAP_OR_ELSE","","",null,null],[7,"FILTER_NEXT","","",null,null],[7,"SEARCH_IS_SOME","","",null,null],[7,"CHARS_NEXT_CMP","","",null,null],[7,"OR_FUN_CALL","","",null,null],[7,"EXTEND_FROM_SLICE","","",null,null],[7,"CLONE_ON_COPY","","",null,null],[7,"CLONE_DOUBLE_REF","","",null,null],[7,"NEW_RET_NO_SELF","","",null,null],[7,"SINGLE_CHAR_PATTERN","","",null,null],[11,"clone","","",43,{"inputs":[{"name":"methodspass"}],"output":{"name":"methodspass"}}],[11,"get_lints","","",43,{"inputs":[{"name":"methodspass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",43,{"inputs":[{"name":"methodspass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_item","","",43,{"inputs":[{"name":"methodspass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[0,"minmax","clippy","",null,null],[3,"MinMaxPass","clippy::minmax","",null,null],[7,"MIN_MAX","","",null,null],[11,"get_lints","","",44,{"inputs":[{"name":"minmaxpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",44,{"inputs":[{"name":"minmaxpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"misc","clippy","",null,null],[3,"TopLevelRefPass","clippy::misc","",null,null],[3,"CmpNan","","",null,null],[3,"FloatCmp","","",null,null],[3,"CmpOwned","","",null,null],[3,"ModuloOne","","",null,null],[3,"PatternPass","","",null,null],[3,"UsedUnderscoreBinding","","",null,null],[7,"TOPLEVEL_REF_ARG","","",null,null],[7,"CMP_NAN","","",null,null],[7,"FLOAT_CMP","","",null,null],[7,"CMP_OWNED","","",null,null],[7,"MODULO_ONE","","",null,null],[7,"REDUNDANT_PATTERN","","",null,null],[7,"USED_UNDERSCORE_BINDING","","",null,null],[11,"get_lints","","",45,{"inputs":[{"name":"toplevelrefpass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",45,{"inputs":[{"name":"toplevelrefpass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_stmt","","",45,{"inputs":[{"name":"toplevelrefpass"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[11,"clone","","",46,{"inputs":[{"name":"cmpnan"}],"output":{"name":"cmpnan"}}],[11,"get_lints","","",46,{"inputs":[{"name":"cmpnan"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",46,{"inputs":[{"name":"cmpnan"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",47,{"inputs":[{"name":"floatcmp"}],"output":{"name":"floatcmp"}}],[11,"get_lints","","",47,{"inputs":[{"name":"floatcmp"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",47,{"inputs":[{"name":"floatcmp"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",48,{"inputs":[{"name":"cmpowned"}],"output":{"name":"cmpowned"}}],[11,"get_lints","","",48,{"inputs":[{"name":"cmpowned"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",48,{"inputs":[{"name":"cmpowned"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",49,{"inputs":[{"name":"moduloone"}],"output":{"name":"moduloone"}}],[11,"get_lints","","",49,{"inputs":[{"name":"moduloone"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",49,{"inputs":[{"name":"moduloone"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",50,{"inputs":[{"name":"patternpass"}],"output":{"name":"patternpass"}}],[11,"get_lints","","",50,{"inputs":[{"name":"patternpass"}],"output":{"name":"lintarray"}}],[11,"check_pat","","",50,{"inputs":[{"name":"patternpass"},{"name":"latecontext"},{"name":"pat"}],"output":null}],[11,"clone","","",51,{"inputs":[{"name":"usedunderscorebinding"}],"output":{"name":"usedunderscorebinding"}}],[11,"get_lints","","",51,{"inputs":[{"name":"usedunderscorebinding"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",51,{"inputs":[{"name":"usedunderscorebinding"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"misc_early","clippy","",null,null],[3,"MiscEarly","clippy::misc_early","",null,null],[7,"UNNEEDED_FIELD_PATTERN","","",null,null],[7,"DUPLICATE_UNDERSCORE_ARGUMENT","","",null,null],[7,"REDUNDANT_CLOSURE_CALL","","",null,null],[11,"clone","","",52,{"inputs":[{"name":"miscearly"}],"output":{"name":"miscearly"}}],[11,"get_lints","","",52,{"inputs":[{"name":"miscearly"}],"output":{"name":"lintarray"}}],[11,"check_pat","","",52,{"inputs":[{"name":"miscearly"},{"name":"earlycontext"},{"name":"pat"}],"output":null}],[11,"check_fn","","",52,{"inputs":[{"name":"miscearly"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_expr","","",52,{"inputs":[{"name":"miscearly"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[11,"check_block","","",52,{"inputs":[{"name":"miscearly"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[0,"mut_mut","clippy","",null,null],[3,"MutMut","clippy::mut_mut","",null,null],[7,"MUT_MUT","","",null,null],[11,"clone","","",53,{"inputs":[{"name":"mutmut"}],"output":{"name":"mutmut"}}],[11,"get_lints","","",53,{"inputs":[{"name":"mutmut"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",53,{"inputs":[{"name":"mutmut"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"check_ty","","",53,{"inputs":[{"name":"mutmut"},{"name":"latecontext"},{"name":"ty"}],"output":null}],[0,"mut_reference","clippy","",null,null],[3,"UnnecessaryMutPassed","clippy::mut_reference","",null,null],[7,"UNNECESSARY_MUT_PASSED","","",null,null],[11,"clone","","",54,{"inputs":[{"name":"unnecessarymutpassed"}],"output":{"name":"unnecessarymutpassed"}}],[11,"get_lints","","",54,{"inputs":[{"name":"unnecessarymutpassed"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",54,{"inputs":[{"name":"unnecessarymutpassed"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"mutex_atomic","clippy","Checks for uses of Mutex where an atomic value could be used",null,null],[3,"MutexAtomic","clippy::mutex_atomic","",null,null],[7,"MUTEX_ATOMIC","","",null,null],[7,"MUTEX_INTEGER","","",null,null],[11,"get_lints","","",55,{"inputs":[{"name":"mutexatomic"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",55,{"inputs":[{"name":"mutexatomic"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"needless_bool","clippy","Checks for needless boolean results of if-else expressions",null,null],[3,"NeedlessBool","clippy::needless_bool","",null,null],[3,"BoolComparison","","",null,null],[7,"NEEDLESS_BOOL","","",null,null],[7,"BOOL_COMPARISON","","",null,null],[11,"clone","","",56,{"inputs":[{"name":"needlessbool"}],"output":{"name":"needlessbool"}}],[11,"get_lints","","",56,{"inputs":[{"name":"needlessbool"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",56,{"inputs":[{"name":"needlessbool"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",57,{"inputs":[{"name":"boolcomparison"}],"output":{"name":"boolcomparison"}}],[11,"get_lints","","",57,{"inputs":[{"name":"boolcomparison"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",57,{"inputs":[{"name":"boolcomparison"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"needless_update","clippy","",null,null],[3,"NeedlessUpdatePass","clippy::needless_update","",null,null],[7,"NEEDLESS_UPDATE","","",null,null],[11,"clone","","",58,{"inputs":[{"name":"needlessupdatepass"}],"output":{"name":"needlessupdatepass"}}],[11,"get_lints","","",58,{"inputs":[{"name":"needlessupdatepass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",58,{"inputs":[{"name":"needlessupdatepass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"new_without_default","clippy","",null,null],[3,"NewWithoutDefault","clippy::new_without_default","",null,null],[7,"NEW_WITHOUT_DEFAULT","","",null,null],[11,"clone","","",59,{"inputs":[{"name":"newwithoutdefault"}],"output":{"name":"newwithoutdefault"}}],[11,"get_lints","","",59,{"inputs":[{"name":"newwithoutdefault"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",59,{"inputs":[{"name":"newwithoutdefault"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"no_effect","clippy","",null,null],[3,"NoEffectPass","clippy::no_effect","",null,null],[7,"NO_EFFECT","","",null,null],[11,"clone","","",60,{"inputs":[{"name":"noeffectpass"}],"output":{"name":"noeffectpass"}}],[11,"get_lints","","",60,{"inputs":[{"name":"noeffectpass"}],"output":{"name":"lintarray"}}],[11,"check_stmt","","",60,{"inputs":[{"name":"noeffectpass"},{"name":"latecontext"},{"name":"stmt"}],"output":null}],[0,"non_expressive_names","clippy","",null,null],[3,"NonExpressiveNames","clippy::non_expressive_names","",null,null],[12,"max_single_char_names","","",61,null],[7,"SIMILAR_NAMES","","",null,null],[7,"MANY_SINGLE_CHAR_NAMES","","",null,null],[11,"get_lints","","",61,{"inputs":[{"name":"nonexpressivenames"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",61,{"inputs":[{"name":"nonexpressivenames"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"open_options","clippy","",null,null],[3,"NonSensicalOpenOptions","clippy::open_options","",null,null],[7,"NONSENSICAL_OPEN_OPTIONS","","",null,null],[11,"clone","","",62,{"inputs":[{"name":"nonsensicalopenoptions"}],"output":{"name":"nonsensicalopenoptions"}}],[11,"get_lints","","",62,{"inputs":[{"name":"nonsensicalopenoptions"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",62,{"inputs":[{"name":"nonsensicalopenoptions"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"overflow_check_conditional","clippy","",null,null],[3,"OverflowCheckConditional","clippy::overflow_check_conditional","",null,null],[7,"OVERFLOW_CHECK_CONDITIONAL","","",null,null],[11,"clone","","",63,{"inputs":[{"name":"overflowcheckconditional"}],"output":{"name":"overflowcheckconditional"}}],[11,"get_lints","","",63,{"inputs":[{"name":"overflowcheckconditional"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",63,{"inputs":[{"name":"overflowcheckconditional"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"panic","clippy","",null,null],[3,"PanicPass","clippy::panic","",null,null],[7,"PANIC_PARAMS","","",null,null],[11,"get_lints","","",64,{"inputs":[{"name":"panicpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",64,{"inputs":[{"name":"panicpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"precedence","clippy","",null,null],[3,"Precedence","clippy::precedence","",null,null],[7,"PRECEDENCE","","",null,null],[11,"clone","","",65,{"inputs":[{"name":"precedence"}],"output":{"name":"precedence"}}],[11,"get_lints","","",65,{"inputs":[{"name":"precedence"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",65,{"inputs":[{"name":"precedence"},{"name":"earlycontext"},{"name":"expr"}],"output":null}],[0,"print","clippy","",null,null],[3,"PrintLint","clippy::print","",null,null],[7,"PRINT_STDOUT","","",null,null],[7,"USE_DEBUG","","",null,null],[11,"fmt","","",66,{"inputs":[{"name":"printlint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"printlint"}],"output":{"name":"printlint"}}],[11,"get_lints","","",66,{"inputs":[{"name":"printlint"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",66,{"inputs":[{"name":"printlint"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"ptr_arg","clippy","Checks for usage of  `&amp;Vec[_]` and `&amp;String`.",null,null],[3,"PtrArg","clippy::ptr_arg","",null,null],[7,"PTR_ARG","","",null,null],[11,"clone","","",67,{"inputs":[{"name":"ptrarg"}],"output":{"name":"ptrarg"}}],[11,"get_lints","","",67,{"inputs":[{"name":"ptrarg"}],"output":{"name":"lintarray"}}],[11,"check_item","","",67,{"inputs":[{"name":"ptrarg"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_impl_item","","",67,{"inputs":[{"name":"ptrarg"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_trait_item","","",67,{"inputs":[{"name":"ptrarg"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[0,"ranges","clippy","",null,null],[3,"StepByZero","clippy::ranges","",null,null],[7,"RANGE_STEP_BY_ZERO","","",null,null],[7,"RANGE_ZIP_WITH_LEN","","",null,null],[11,"clone","","",68,{"inputs":[{"name":"stepbyzero"}],"output":{"name":"stepbyzero"}}],[11,"get_lints","","",68,{"inputs":[{"name":"stepbyzero"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",68,{"inputs":[{"name":"stepbyzero"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"regex","clippy","",null,null],[3,"RegexPass","clippy::regex","",null,null],[7,"INVALID_REGEX","","",null,null],[7,"TRIVIAL_REGEX","","",null,null],[7,"REGEX_MACRO","","",null,null],[11,"default","","",69,{"inputs":[],"output":{"name":"regexpass"}}],[11,"clone","","",69,{"inputs":[{"name":"regexpass"}],"output":{"name":"regexpass"}}],[11,"get_lints","","",69,{"inputs":[{"name":"regexpass"}],"output":{"name":"lintarray"}}],[11,"check_crate","","",69,{"inputs":[{"name":"regexpass"},{"name":"latecontext"},{"name":"crate"}],"output":null}],[11,"check_block","","",69,{"inputs":[{"name":"regexpass"},{"name":"latecontext"},{"name":"block"}],"output":null}],[11,"check_block_post","","",69,{"inputs":[{"name":"regexpass"},{"name":"latecontext"},{"name":"block"}],"output":null}],[11,"check_expr","","",69,{"inputs":[{"name":"regexpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"returns","clippy","",null,null],[3,"ReturnPass","clippy::returns","",null,null],[7,"NEEDLESS_RETURN","","",null,null],[7,"LET_AND_RETURN","","",null,null],[11,"clone","","",70,{"inputs":[{"name":"returnpass"}],"output":{"name":"returnpass"}}],[11,"get_lints","","",70,{"inputs":[{"name":"returnpass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",70,{"inputs":[{"name":"returnpass"},{"name":"earlycontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_block","","",70,{"inputs":[{"name":"returnpass"},{"name":"earlycontext"},{"name":"block"}],"output":null}],[0,"shadow","clippy","",null,null],[3,"ShadowPass","clippy::shadow","",null,null],[7,"SHADOW_SAME","","",null,null],[7,"SHADOW_REUSE","","",null,null],[7,"SHADOW_UNRELATED","","",null,null],[11,"clone","","",71,{"inputs":[{"name":"shadowpass"}],"output":{"name":"shadowpass"}}],[11,"get_lints","","",71,{"inputs":[{"name":"shadowpass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",71,{"inputs":[{"name":"shadowpass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"strings","clippy","This lint catches both string addition and string addition + assignment",null,null],[3,"StringAdd","clippy::strings","",null,null],[3,"StringLitAsBytes","","",null,null],[7,"STRING_ADD_ASSIGN","","",null,null],[7,"STRING_ADD","","",null,null],[7,"STRING_LIT_AS_BYTES","","",null,null],[11,"clone","","",72,{"inputs":[{"name":"stringadd"}],"output":{"name":"stringadd"}}],[11,"get_lints","","",72,{"inputs":[{"name":"stringadd"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",72,{"inputs":[{"name":"stringadd"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"clone","","",73,{"inputs":[{"name":"stringlitasbytes"}],"output":{"name":"stringlitasbytes"}}],[11,"get_lints","","",73,{"inputs":[{"name":"stringlitasbytes"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",73,{"inputs":[{"name":"stringlitasbytes"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"swap","clippy","",null,null],[3,"Swap","clippy::swap","",null,null],[7,"MANUAL_SWAP","","",null,null],[7,"ALMOST_SWAPPED","","",null,null],[11,"clone","","",74,{"inputs":[{"name":"swap"}],"output":{"name":"swap"}}],[11,"get_lints","","",74,{"inputs":[{"name":"swap"}],"output":{"name":"lintarray"}}],[11,"check_block","","",74,{"inputs":[{"name":"swap"},{"name":"latecontext"},{"name":"block"}],"output":null}],[0,"temporary_assignment","clippy","",null,null],[3,"TemporaryAssignmentPass","clippy::temporary_assignment","",null,null],[7,"TEMPORARY_ASSIGNMENT","","",null,null],[11,"clone","","",75,{"inputs":[{"name":"temporaryassignmentpass"}],"output":{"name":"temporaryassignmentpass"}}],[11,"get_lints","","",75,{"inputs":[{"name":"temporaryassignmentpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",75,{"inputs":[{"name":"temporaryassignmentpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"transmute","clippy","",null,null],[3,"Transmute","clippy::transmute","",null,null],[7,"USELESS_TRANSMUTE","","",null,null],[7,"CROSSPOINTER_TRANSMUTE","","",null,null],[7,"TRANSMUTE_PTR_TO_REF","","",null,null],[11,"get_lints","","",76,{"inputs":[{"name":"transmute"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",76,{"inputs":[{"name":"transmute"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"types","clippy","",null,null],[3,"TypePass","clippy::types","Handles all the linting of funky types",null,null],[3,"LetPass","","",null,null],[3,"UnitCmp","","",null,null],[3,"CastPass","","",null,null],[3,"TypeComplexityPass","","",null,null],[3,"CharLitAsU8","","",null,null],[3,"AbsurdExtremeComparisons","","",null,null],[3,"InvalidUpcastComparisons","","",null,null],[7,"BOX_VEC","","",null,null],[7,"LINKEDLIST","","",null,null],[7,"LET_UNIT_VALUE","","",null,null],[7,"UNIT_CMP","","",null,null],[7,"CAST_PRECISION_LOSS","","",null,null],[7,"CAST_SIGN_LOSS","","",null,null],[7,"CAST_POSSIBLE_TRUNCATION","","",null,null],[7,"CAST_POSSIBLE_WRAP","","",null,null],[7,"TYPE_COMPLEXITY","","",null,null],[7,"CHAR_LIT_AS_U8","","",null,null],[7,"ABSURD_EXTREME_COMPARISONS","","",null,null],[7,"INVALID_UPCAST_COMPARISONS","","",null,null],[11,"get_lints","","",77,{"inputs":[{"name":"typepass"}],"output":{"name":"lintarray"}}],[11,"check_ty","","",77,{"inputs":[{"name":"typepass"},{"name":"latecontext"},{"name":"ty"}],"output":null}],[11,"get_lints","","",78,{"inputs":[{"name":"letpass"}],"output":{"name":"lintarray"}}],[11,"check_decl","","",78,{"inputs":[{"name":"letpass"},{"name":"latecontext"},{"name":"decl"}],"output":null}],[11,"get_lints","","",79,{"inputs":[{"name":"unitcmp"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",79,{"inputs":[{"name":"unitcmp"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",80,{"inputs":[{"name":"castpass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",80,{"inputs":[{"name":"castpass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"new","","",81,{"inputs":[{"name":"u64"}],"output":{"name":"self"}}],[11,"get_lints","","",81,{"inputs":[{"name":"typecomplexitypass"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",81,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[11,"check_struct_field","","",81,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"structfield"}],"output":null}],[11,"check_item","","",81,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"item"}],"output":null}],[11,"check_trait_item","","",81,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"traititem"}],"output":null}],[11,"check_impl_item","","",81,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"implitem"}],"output":null}],[11,"check_local","","",81,{"inputs":[{"name":"typecomplexitypass"},{"name":"latecontext"},{"name":"local"}],"output":null}],[11,"get_lints","","",82,{"inputs":[{"name":"charlitasu8"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",82,{"inputs":[{"name":"charlitasu8"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",83,{"inputs":[{"name":"absurdextremecomparisons"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",83,{"inputs":[{"name":"absurdextremecomparisons"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"get_lints","","",84,{"inputs":[{"name":"invalidupcastcomparisons"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",84,{"inputs":[{"name":"invalidupcastcomparisons"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"unicode","clippy","",null,null],[3,"Unicode","clippy::unicode","",null,null],[7,"ZERO_WIDTH_SPACE","","",null,null],[7,"NON_ASCII_LITERAL","","",null,null],[7,"UNICODE_NOT_NFC","","",null,null],[11,"clone","","",85,{"inputs":[{"name":"unicode"}],"output":{"name":"unicode"}}],[11,"get_lints","","",85,{"inputs":[{"name":"unicode"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",85,{"inputs":[{"name":"unicode"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"unused_label","clippy","",null,null],[3,"UnusedLabel","clippy::unused_label","",null,null],[7,"UNUSED_LABEL","","",null,null],[11,"get_lints","","",86,{"inputs":[{"name":"unusedlabel"}],"output":{"name":"lintarray"}}],[11,"check_fn","","",86,{"inputs":[{"name":"unusedlabel"},{"name":"latecontext"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"},{"name":"nodeid"}],"output":null}],[0,"vec","clippy","",null,null],[3,"UselessVec","clippy::vec","",null,null],[4,"VecArgs","","Represent the pre-expansion arguments of a `vec!` invocation.",null,null],[13,"Repeat","","`vec![elem; len]`",87,null],[13,"Vec","","`vec![a, b, c]`",87,null],[5,"unexpand_vec","","Returns the arguments of the `vec!` macro if this expression was expanded from `vec!`.",null,{"inputs":[{"name":"latecontext"},{"name":"expr"}],"output":{"name":"option"}}],[7,"USELESS_VEC","","",null,null],[11,"fmt","","",88,{"inputs":[{"name":"uselessvec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",88,{"inputs":[{"name":"uselessvec"}],"output":{"name":"uselessvec"}}],[11,"get_lints","","",88,{"inputs":[{"name":"uselessvec"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",88,{"inputs":[{"name":"uselessvec"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[0,"zero_div_zero","clippy","",null,null],[3,"ZeroDivZeroPass","clippy::zero_div_zero","`ZeroDivZeroPass` is a pass that checks for a binary expression that consists\n`of 0.0/0.0`, which is always `NaN`. It is more clear to replace instances of\n`0.0/0.0` with `std::f32::NaN` or `std::f64::NaN`, depending on the precision.",null,null],[7,"ZERO_DIVIDED_BY_ZERO","","",null,null],[11,"get_lints","","",89,{"inputs":[{"name":"zerodivzeropass"}],"output":{"name":"lintarray"}}],[11,"check_expr","","",89,{"inputs":[{"name":"zerodivzeropass"},{"name":"latecontext"},{"name":"expr"}],"output":null}],[11,"decode","syntax::ast","",90,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",90,{"inputs":[{"name":"name"},{"name":"s"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",90,{"inputs":[{"name":"name"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_str","","",90,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"clone","","",90,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[11,"eq","","",90,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",90,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",90,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"option"}}],[11,"lt","","",90,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"le","","",90,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"gt","","",90,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ge","","",90,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"bool"}}],[11,"cmp","","",90,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"ordering"}}],[11,"hash","","",90,null],[14,"if_let_chain!","clippy","Produce a nested chain of if-lets and ifs from the patterns:",null,null]],"paths":[[4,"FloatWidth"],[4,"Constant"],[3,"DiagnosticWrapper"],[3,"UnsugaredRange"],[4,"Rel"],[3,"Conf"],[4,"ConfError"],[3,"SpanlessEq"],[3,"SpanlessHash"],[3,"DiagnosticBuilder"],[3,"LimitStack"],[3,"ApproxConstant"],[3,"ArrayIndexing"],[3,"AttrPass"],[3,"BitMask"],[3,"BlackListedName"],[3,"BlockInIfCondition"],[3,"NonminimalBool"],[3,"CollapsibleIf"],[3,"CopyAndPaste"],[3,"CyclomaticComplexity"],[3,"Derive"],[3,"Doc"],[3,"DropRefPass"],[3,"HashMapLint"],[3,"EnumClikeUnportableVariant"],[3,"EnumGlobUse"],[3,"EnumVariantNames"],[3,"EqOp"],[3,"EscapePass"],[3,"EtaPass"],[3,"FormatMacLint"],[3,"Formatting"],[3,"Functions"],[3,"IdentityOp"],[3,"IfNotElse"],[3,"ItemsAfterStatements"],[3,"LenZero"],[3,"LifetimePass"],[3,"LoopsPass"],[3,"MapClonePass"],[3,"SpannedRange"],[3,"MatchPass"],[3,"MethodsPass"],[3,"MinMaxPass"],[3,"TopLevelRefPass"],[3,"CmpNan"],[3,"FloatCmp"],[3,"CmpOwned"],[3,"ModuloOne"],[3,"PatternPass"],[3,"UsedUnderscoreBinding"],[3,"MiscEarly"],[3,"MutMut"],[3,"UnnecessaryMutPassed"],[3,"MutexAtomic"],[3,"NeedlessBool"],[3,"BoolComparison"],[3,"NeedlessUpdatePass"],[3,"NewWithoutDefault"],[3,"NoEffectPass"],[3,"NonExpressiveNames"],[3,"NonSensicalOpenOptions"],[3,"OverflowCheckConditional"],[3,"PanicPass"],[3,"Precedence"],[3,"PrintLint"],[3,"PtrArg"],[3,"StepByZero"],[3,"RegexPass"],[3,"ReturnPass"],[3,"ShadowPass"],[3,"StringAdd"],[3,"StringLitAsBytes"],[3,"Swap"],[3,"TemporaryAssignmentPass"],[3,"Transmute"],[3,"TypePass"],[3,"LetPass"],[3,"UnitCmp"],[3,"CastPass"],[3,"TypeComplexityPass"],[3,"CharLitAsU8"],[3,"AbsurdExtremeComparisons"],[3,"InvalidUpcastComparisons"],[3,"Unicode"],[3,"UnusedLabel"],[4,"VecArgs"],[3,"UselessVec"],[3,"ZeroDivZeroPass"],[3,"Name"]]};
searchIndex["string_cache"] = {"doc":"","items":[[0,"atom","string_cache","",null,null],[3,"Atom","string_cache::atom","",null,null],[12,"data","","This field is public so that the `atom!()` macro can use it.\nYou should not otherwise access this field.",0,null],[7,"STATIC_ATOM_SET","","",null,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",1,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"try_lock","","Attempts to acquire this lock.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"is_poisoned","","Determines whether the lock is poisoned.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"bool"}}],[11,"into_inner","","Consumes this mutex, returning the underlying data.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"get_mut","","Returns a mutable reference to the underlying data.",1,{"inputs":[{"name":"mutex"}],"output":{"name":"result"}}],[11,"eq","string_cache::atom","",0,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"get_hash","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"u32"}}],[11,"from","","",0,{"inputs":[{"name":"cow"}],"output":{"name":"atom"}}],[11,"from","","",0,{"inputs":[{"name":"str"}],"output":{"name":"atom"}}],[11,"from","","",0,{"inputs":[{"name":"string"}],"output":{"name":"atom"}}],[11,"clone","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"atom"}}],[11,"drop","","",0,{"inputs":[{"name":"atom"}],"output":null}],[11,"deref","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"atom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"atom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"atom"},{"name":"atom"}],"output":{"name":"ordering"}}],[11,"as_ref","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"str"}}],[11,"serialize","","",0,{"inputs":[{"name":"atom"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"to_ascii_uppercase","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"atom"}}],[11,"to_ascii_lowercase","","",0,{"inputs":[{"name":"atom"}],"output":{"name":"atom"}}],[11,"eq_ignore_ascii_case","","",0,{"inputs":[{"name":"atom"},{"name":"self"}],"output":{"name":"bool"}}],[0,"namespace","string_cache","**Note:** This may move as string-cache becomes less Web-specific.",null,null],[3,"Namespace","string_cache::namespace","An atom that is meant to represent a namespace in the HTML / XML sense.\nWhether a given string represents a namespace is contextual, so this is\na transparent wrapper that will not catch all mistakes.",null,null],[12,"0","","",2,null],[3,"QualName","","A name with a namespace.",null,null],[12,"ns","","",3,null],[12,"local","","",3,null],[11,"clone","","",2,{"inputs":[{"name":"namespace"}],"output":{"name":"namespace"}}],[11,"fmt","","",2,{"inputs":[{"name":"namespace"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",2,null],[11,"cmp","","",2,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"namespace"},{"name":"namespace"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"qualname"}],"output":{"name":"qualname"}}],[11,"fmt","","",3,{"inputs":[{"name":"qualname"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"cmp","","",3,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"option"}}],[11,"lt","","",3,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"le","","",3,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"gt","","",3,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"ge","","",3,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"qualname"},{"name":"qualname"}],"output":{"name":"bool"}}],[11,"new","","",3,{"inputs":[{"name":"namespace"},{"name":"atom"}],"output":{"name":"qualname"}}],[0,"shared","string_cache","",null,null],[3,"StaticAtomSet","string_cache::shared","",null,null],[12,"key","","",4,null],[12,"disps","","",4,null],[12,"atoms","","",4,null],[5,"pack_static","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[17,"DYNAMIC_TAG","","",null,null],[17,"INLINE_TAG","","",null,null],[17,"STATIC_TAG","","",null,null],[17,"TAG_MASK","","",null,null],[17,"ENTRY_ALIGNMENT","","",null,null],[17,"MAX_INLINE_LEN","","",null,null],[17,"STATIC_SHIFT_BITS","","",null,null],[11,"get_index_or_hash","","",4,{"inputs":[{"name":"staticatomset"},{"name":"str"}],"output":{"name":"result"}}],[11,"index","","",4,{"inputs":[{"name":"staticatomset"},{"name":"u32"}],"output":{"name":"option"}}],[11,"iter","","",4,{"inputs":[{"name":"staticatomset"}],"output":{"name":"iter"}}],[14,"qualname!","string_cache","",null,null],[14,"ns!","","",null,null],[14,"atom!","","",null,null]],"paths":[[3,"Atom"],[3,"Mutex"],[3,"Namespace"],[3,"QualName"],[3,"StaticAtomSet"]]};
searchIndex["chrono"] = {"doc":"# Chrono 0.2.21","items":[[11,"weeks","time::duration","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",0,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",0,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",0,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",0,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",0,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",0,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",0,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"div","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"mul","","",0,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"sub","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"neg","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"clone","","",0,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"eq","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[3,"Duration","chrono","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[4,"Weekday","","The day of week (DOW).",null,null],[13,"Mon","","Monday.",1,null],[13,"Tue","","Tuesday.",1,null],[13,"Wed","","Wednesday.",1,null],[13,"Thu","","Thursday.",1,null],[13,"Fri","","Friday.",1,null],[13,"Sat","","Saturday.",1,null],[13,"Sun","","Sunday.",1,null],[0,"duration","","ISO 8601 duration.",null,null],[3,"Duration","chrono::duration","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[0,"offset","chrono","The time zone, which calculates offsets from the local time to UTC.",null,null],[4,"LocalResult","chrono::offset","The conversion result from the local time to the timezone-aware datetime types.",null,null],[13,"None","","Given local time representation is invalid.\nThis can occur when, for example, the positive timezone transition.",2,null],[13,"Single","","Given local time representation has a single unique result.",2,null],[13,"Ambiguous","","Given local time representation has multiple results and thus ambiguous.\nThis can occur when, for example, the negative timezone transition.",2,null],[0,"utc","","The UTC (Coordinated Universal Time) time zone.",null,null],[3,"UTC","chrono::offset::utc","The UTC time zone. This is the most efficient time zone when you don&#39;t need the local time.\nIt is also used as an offset (which is also a dummy type).",null,null],[11,"eq","","",3,{"inputs":[{"name":"utc"},{"name":"utc"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",3,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",3,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",3,{"inputs":[{"name":"utc"}],"output":{"name":"utc"}}],[11,"offset_from_local_date","","",3,{"inputs":[{"name":"utc"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",3,{"inputs":[{"name":"utc"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",3,{"inputs":[{"name":"utc"},{"name":"naivedate"}],"output":{"name":"utc"}}],[11,"offset_from_utc_datetime","","",3,{"inputs":[{"name":"utc"},{"name":"naivedatetime"}],"output":{"name":"utc"}}],[11,"local_minus_utc","","",3,{"inputs":[{"name":"utc"}],"output":{"name":"duration"}}],[11,"fmt","","",3,{"inputs":[{"name":"utc"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"utc"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"fixed","chrono::offset","The time zone which has a fixed offset from UTC.",null,null],[3,"FixedOffset","chrono::offset::fixed","The time zone with fixed offset, from UTC-23:59:59 to UTC+23:59:59.",null,null],[11,"eq","","",4,{"inputs":[{"name":"fixedoffset"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"fixedoffset"},{"name":"fixedoffset"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"east","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"east_opt","","Makes a new `FixedOffset` for the Eastern Hemisphere with given timezone difference.\nThe negative `secs` means the Western Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"west","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"name":"fixedoffset"}}],[11,"west_opt","","Makes a new `FixedOffset` for the Western Hemisphere with given timezone difference.\nThe negative `secs` means the Eastern Hemisphere.",4,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"from_offset","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_local_date","","",4,{"inputs":[{"name":"fixedoffset"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",4,{"inputs":[{"name":"fixedoffset"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",4,{"inputs":[{"name":"fixedoffset"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",4,{"inputs":[{"name":"fixedoffset"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"local_minus_utc","","",4,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"fixedoffset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"fixedoffset"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"local","chrono::offset","The local (system) time zone.",null,null],[3,"Local","chrono::offset::local","The local timescale. This is implemented via the standard `time` crate.",null,null],[11,"clone","","",5,{"inputs":[{"name":"local"}],"output":{"name":"local"}}],[11,"today","","Returns a `Date` which corresponds to the current date.",5,{"inputs":[],"output":{"name":"date"}}],[11,"now","","Returns a `DateTime` which corresponds to the current date.",5,{"inputs":[],"output":{"name":"datetime"}}],[11,"from_offset","","",5,{"inputs":[{"name":"fixedoffset"}],"output":{"name":"local"}}],[11,"offset_from_local_date","","",5,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"offset_from_local_datetime","","",5,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"offset_from_utc_date","","",5,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"fixedoffset"}}],[11,"offset_from_utc_datetime","","",5,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"fixedoffset"}}],[11,"from_local_date","","",5,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","",5,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_utc_date","","",5,{"inputs":[{"name":"local"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","",5,{"inputs":[{"name":"local"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[8,"Offset","chrono::offset","The offset from the local time to UTC.",null,null],[10,"local_minus_utc","","Returns the offset from UTC to the local time stored.",6,{"inputs":[{"name":"offset"}],"output":{"name":"duration"}}],[8,"TimeZone","","The time zone.",null,null],[16,"Offset","","An associated offset type.\nThis type is used to store the actual offset in date and time types.\nThe original `TimeZone` value can be recovered via `TimeZone::from_offset`.",7,null],[11,"ymd","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"ymd_opt","","Makes a new `Date` from year, month, day and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"yo","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"}],"output":{"name":"date"}}],[11,"yo_opt","","Makes a new `Date` from year, day of year (DOY or &quot;ordinal&quot;) and the current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",7,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"isoywd","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",7,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"date"}}],[11,"isoywd_opt","","Makes a new `Date` from ISO week date (year and week number), day of the week (DOW) and\nthe current time zone.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `Date` may have a different year from the input year.",7,{"inputs":[{"name":"timezone"},{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"localresult"}}],[11,"timestamp","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",7,{"inputs":[{"name":"timezone"},{"name":"i64"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"timestamp_opt","","Makes a new `DateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",7,{"inputs":[{"name":"timezone"},{"name":"i64"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"datetime_from_str","","Parses a string with the specified format string and\nreturns a `DateTime` with the current offset.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",7,{"inputs":[{"name":"timezone"},{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[10,"from_offset","","Reconstructs the time zone from the offset.",7,{"inputs":[{"name":"offset"}],"output":{"name":"self"}}],[10,"offset_from_local_date","","Creates the offset(s) for given local `NaiveDate` if possible.",7,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[10,"offset_from_local_datetime","","Creates the offset(s) for given local `NaiveDateTime` if possible.",7,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[11,"from_local_date","","Converts the local `NaiveDate` to the timezone-aware `Date` if possible.",7,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"localresult"}}],[11,"from_local_datetime","","Converts the local `NaiveDateTime` to the timezone-aware `DateTime` if possible.",7,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"localresult"}}],[10,"offset_from_utc_date","","Creates the offset for given UTC `NaiveDate`. This cannot fail.",7,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"offset"}}],[10,"offset_from_utc_datetime","","Creates the offset for given UTC `NaiveDateTime`. This cannot fail.",7,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"offset"}}],[11,"from_utc_date","","Converts the UTC `NaiveDate` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",7,{"inputs":[{"name":"timezone"},{"name":"naivedate"}],"output":{"name":"date"}}],[11,"from_utc_datetime","","Converts the UTC `NaiveDateTime` to the local time.\nThe UTC is continuous and thus this cannot fail (but can give the duplicate local time).",7,{"inputs":[{"name":"timezone"},{"name":"naivedatetime"}],"output":{"name":"datetime"}}],[11,"fmt","","",2,{"inputs":[{"name":"localresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"localresult"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"localresult"},{"name":"localresult"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"localresult"}],"output":{"name":"localresult"}}],[11,"single","","Returns `Some` only when the conversion result is unique, or `None` otherwise.",2,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"earliest","","Returns `Some` for the earliest possible conversion result, or `None` if none.",2,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"latest","","Returns `Some` for the latest possible conversion result, or `None` if none.",2,{"inputs":[{"name":"localresult"}],"output":{"name":"option"}}],[11,"map","","Maps a `LocalResult&lt;T&gt;` into `LocalResult&lt;U&gt;` with given function.",2,{"inputs":[{"name":"localresult"},{"name":"f"}],"output":{"name":"localresult"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",2,{"inputs":[{"name":"localresult"},{"name":"naivetime"}],"output":{"name":"localresult"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",2,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",2,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",2,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",2,{"inputs":[{"name":"localresult"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"localresult"}}],[11,"unwrap","","Returns the single unique conversion result, or panics accordingly.",2,{"inputs":[{"name":"localresult"}],"output":{"name":"t"}}],[0,"naive","chrono","Date and time types which do not concern about the timezones.",null,null],[0,"date","chrono::naive","ISO 8601 calendar date without timezone.",null,null],[3,"NaiveDate","chrono::naive::date","ISO 8601 calendar date without timezone.\nAllows for every proleptic Gregorian date from Jan 1, 262145 BCE to Dec 31, 262143 CE.\nAlso supports the conversion from ISO 8601 ordinal and week date.",null,null],[17,"MIN","","The minimum possible `NaiveDate`.",null,null],[17,"MAX","","The maximum possible `NaiveDate`.",null,null],[11,"clone","","",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"cmp","","",8,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",8,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"option"}}],[11,"lt","","",8,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"le","","",8,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"gt","","",8,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ge","","",8,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"eq","","",8,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"bool"}}],[11,"from_ymd","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_ymd_opt","","Makes a new `NaiveDate` from year, month and day.\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_yo","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"naivedate"}}],[11,"from_yo_opt","","Makes a new `NaiveDate` from year and day of year (DOY or &quot;ordinal&quot;).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.",8,{"inputs":[{"name":"i32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_isoywd","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",8,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"naivedate"}}],[11,"from_isoywd_opt","","Makes a new `NaiveDate` from ISO week date (year and week number) and day of the week (DOW).\nThis assumes the proleptic Gregorian calendar, with the year 0 being 1 BCE.\nThe resulting `NaiveDate` may have a different year from the input year.",8,{"inputs":[{"name":"i32"},{"name":"u32"},{"name":"weekday"}],"output":{"name":"option"}}],[11,"from_num_days_from_ce","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",8,{"inputs":[{"name":"i32"}],"output":{"name":"naivedate"}}],[11,"from_num_days_from_ce_opt","","Makes a new `NaiveDate` from the number of days since January 1, 1 (Day 1)\nin the proleptic Gregorian calendar.",8,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDate`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",8,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"and_time","","Makes a new `NaiveDateTime` from the current date and given `NaiveTime`.",8,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"and_hms","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",8,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute and second.",8,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",8,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_milli_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and millisecond.",8,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",8,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_micro_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and microsecond.",8,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",8,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"and_hms_nano_opt","","Makes a new `NaiveDateTime` from the current date, hour, minute, second and nanosecond.",8,{"inputs":[{"name":"naivedate"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `NaiveDate` for the next date.",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"succ_opt","","Makes a new `NaiveDate` for the next date.",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `NaiveDate` for the prior date.",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"naivedate"}}],[11,"pred_opt","","Makes a new `NaiveDate` for the prior date.",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"option"}}],[11,"checked_add","","Adds the `days` part of given `Duration` to the current date.",8,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts the `days` part of given `Duration` from the current date.",8,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the date with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",8,{"inputs":[{"name":"naivedate"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",8,{"inputs":[{"name":"naivedate"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"i32"}}],[11,"month","","",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"month0","","",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"day","","",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"day0","","",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"ordinal","","",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"ordinal0","","",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"u32"}}],[11,"weekday","","",8,{"inputs":[{"name":"naivedate"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",8,null],[11,"with_year","","",8,{"inputs":[{"name":"naivedate"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",8,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",8,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",8,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",8,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",8,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",8,{"inputs":[{"name":"naivedate"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",8,{"inputs":[{"name":"naivedate"},{"name":"h"}],"output":null}],[11,"add","","",8,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"sub","","",8,{"inputs":[{"name":"naivedate"},{"name":"naivedate"}],"output":{"name":"duration"}}],[11,"sub","","",8,{"inputs":[{"name":"naivedate"},{"name":"duration"}],"output":{"name":"naivedate"}}],[11,"fmt","","",8,{"inputs":[{"name":"naivedate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"naivedate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"time","chrono::naive","ISO 8601 time without timezone.",null,null],[3,"NaiveTime","chrono::naive::time","ISO 8601 time without timezone.\nAllows for the nanosecond precision and optional leap second representation.",null,null],[11,"clone","","",9,{"inputs":[{"name":"naivetime"}],"output":{"name":"naivetime"}}],[11,"cmp","","",9,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",9,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"bool"}}],[11,"from_hms","","Makes a new `NaiveTime` from hour, minute and second.",9,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_opt","","Makes a new `NaiveTime` from hour, minute and second.",9,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_milli","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",9,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_milli_opt","","Makes a new `NaiveTime` from hour, minute, second and millisecond.",9,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_micro","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",9,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_micro_opt","","Makes a new `NaiveTime` from hour, minute, second and microsecond.",9,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_hms_nano","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",9,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_hms_nano_opt","","Makes a new `NaiveTime` from hour, minute, second and nanosecond.",9,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_midnight","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"naivetime"}}],[11,"from_num_seconds_from_midnight_opt","","Makes a new `NaiveTime` from the number of seconds since midnight and nanosecond.",9,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",9,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"format_with_items","","Formats the time with the specified formatting items.\nOtherwise it is same to the ordinary `format` method.",9,{"inputs":[{"name":"naivetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",9,{"inputs":[{"name":"naivetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"hour","","",9,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"minute","","",9,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"second","","",9,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",9,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",9,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",9,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",9,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",9,{"inputs":[{"name":"naivetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","",9,{"inputs":[{"name":"naivetime"}],"output":{"name":"u32"}}],[11,"hash","","",9,{"inputs":[{"name":"naivetime"},{"name":"h"}],"output":null}],[11,"add","","",9,{"inputs":[{"name":"naivetime"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"sub","","",9,{"inputs":[{"name":"naivetime"},{"name":"naivetime"}],"output":{"name":"duration"}}],[11,"sub","","",9,{"inputs":[{"name":"naivetime"},{"name":"duration"}],"output":{"name":"naivetime"}}],[11,"fmt","","",9,{"inputs":[{"name":"naivetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"naivetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"datetime","chrono::naive","ISO 8601 date and time without timezone.",null,null],[3,"NaiveDateTime","chrono::naive::datetime","ISO 8601 combined date and time without timezone.",null,null],[11,"clone","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivedatetime"}}],[11,"cmp","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"bool"}}],[11,"new","","Makes a new `NaiveDateTime` from date and time components.\nEquivalent to `date.and_time(time)` and many other helper constructors on `NaiveDate`.",10,{"inputs":[{"name":"naivedate"},{"name":"naivetime"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",10,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_timestamp_opt","","Makes a new `NaiveDateTime` from the number of non-leap seconds\nsince January 1, 1970 0:00:00 UTC (aka &quot;UNIX timestamp&quot;)\nand the number of nanoseconds since the last whole non-leap second.",10,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::from_timestamp`.",10,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"naivedatetime"}}],[11,"from_num_seconds_from_unix_epoch_opt","","*Deprecated:* Same to `NaiveDateTime::from_timestamp_opt`.",10,{"inputs":[{"name":"i64"},{"name":"u32"}],"output":{"name":"option"}}],[11,"parse_from_str","","Parses a string with the specified format string and returns a new `NaiveDateTime`.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",10,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"date","","Retrieves a date component.",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivedate"}}],[11,"time","","Retrieves a time component.",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).\nNote that this does *not* account for the timezone!",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i64"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated:* Same to `NaiveDateTime::timestamp`.",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i64"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",10,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",10,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",10,{"inputs":[{"name":"naivedatetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../../format/strftime/index.html)\non the supported escape sequences.",10,{"inputs":[{"name":"naivedatetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"i32"}}],[11,"month","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"month0","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"day","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"day0","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"ordinal","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"ordinal0","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"weekday","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",10,null],[11,"with_year","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"minute","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"second","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",10,{"inputs":[{"name":"naivedatetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hash","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"h"}],"output":null}],[11,"add","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"sub","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"naivedatetime"}],"output":{"name":"duration"}}],[11,"sub","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"duration"}],"output":{"name":"naivedatetime"}}],[11,"fmt","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"naivedatetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"date","chrono","ISO 8601 calendar date with time zone.",null,null],[3,"Date","chrono::date","ISO 8601 calendar date with time zone.",null,null],[17,"MIN","","The minimum possible `Date`.",null,null],[17,"MAX","","The maximum possible `Date`.",null,null],[11,"clone","","",11,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"from_utc","","Makes a new `Date` with given *UTC* date and offset.\nThe local date should be constructed via the `TimeZone` trait.",11,{"inputs":[{"name":"naivedate"},{"name":"offset"}],"output":{"name":"date"}}],[11,"and_time","","Makes a new `DateTime` from the current date and given `NaiveTime`.\nThe offset in the current date is preserved.",11,{"inputs":[{"name":"date"},{"name":"naivetime"}],"output":{"name":"option"}}],[11,"and_hms","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",11,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_opt","","Makes a new `DateTime` from the current date, hour, minute and second.\nThe offset in the current date is preserved.",11,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_milli","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",11,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_milli_opt","","Makes a new `DateTime` from the current date, hour, minute, second and millisecond.\nThe millisecond part can exceed 1,000 in order to represent the leap second.\nThe offset in the current date is preserved.",11,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_micro","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",11,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_micro_opt","","Makes a new `DateTime` from the current date, hour, minute, second and microsecond.\nThe microsecond part can exceed 1,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",11,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"and_hms_nano","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",11,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"datetime"}}],[11,"and_hms_nano_opt","","Makes a new `DateTime` from the current date, hour, minute, second and nanosecond.\nThe nanosecond part can exceed 1,000,000,000 in order to represent the leap second.\nThe offset in the current date is preserved.",11,{"inputs":[{"name":"date"},{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[11,"succ","","Makes a new `Date` for the next date.",11,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"succ_opt","","Makes a new `Date` for the next date.",11,{"inputs":[{"name":"date"}],"output":{"name":"option"}}],[11,"pred","","Makes a new `Date` for the prior date.",11,{"inputs":[{"name":"date"}],"output":{"name":"date"}}],[11,"pred_opt","","Makes a new `Date` for the prior date.",11,{"inputs":[{"name":"date"}],"output":{"name":"option"}}],[11,"offset","","Retrieves an associated offset from UTC.",11,{"inputs":[{"name":"date"}],"output":{"name":"offset"}}],[11,"timezone","","Retrieves an associated time zone.",11,{"inputs":[{"name":"date"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `Date` (but will change the string representation).",11,{"inputs":[{"name":"date"},{"name":"tz2"}],"output":{"name":"date"}}],[11,"checked_add","","Adds given `Duration` to the current date.",11,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date.",11,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC date.",11,{"inputs":[{"name":"date"}],"output":{"name":"naivedate"}}],[11,"naive_local","","Returns a view to the naive local date.",11,{"inputs":[{"name":"date"}],"output":{"name":"naivedate"}}],[11,"format_with_items","","Formats the date with the specified formatting items.",11,{"inputs":[{"name":"date"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the date with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",11,{"inputs":[{"name":"date"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",11,{"inputs":[{"name":"date"}],"output":{"name":"i32"}}],[11,"month","","",11,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"month0","","",11,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"day","","",11,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"day0","","",11,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"ordinal","","",11,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"ordinal0","","",11,{"inputs":[{"name":"date"}],"output":{"name":"u32"}}],[11,"weekday","","",11,{"inputs":[{"name":"date"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",11,null],[11,"with_year","","",11,{"inputs":[{"name":"date"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",11,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",11,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",11,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",11,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",11,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",11,{"inputs":[{"name":"date"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",11,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"option"}}],[11,"cmp","","",11,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"ordering"}}],[11,"hash","","",11,{"inputs":[{"name":"date"},{"name":"h"}],"output":null}],[11,"add","","",11,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"date"}}],[11,"sub","","",11,{"inputs":[{"name":"date"},{"name":"date"}],"output":{"name":"duration"}}],[11,"sub","","",11,{"inputs":[{"name":"date"},{"name":"duration"}],"output":{"name":"date"}}],[11,"fmt","","",11,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",11,{"inputs":[{"name":"date"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"datetime","chrono","ISO 8601 date and time with time zone.",null,null],[3,"DateTime","chrono::datetime","ISO 8601 combined date and time with time zone.",null,null],[11,"clone","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"datetime"}}],[11,"from_utc","","Makes a new `DateTime` with given *UTC* datetime and offset.\nThe local datetime should be constructed via the `TimeZone` trait.",12,{"inputs":[{"name":"naivedatetime"},{"name":"offset"}],"output":{"name":"datetime"}}],[11,"date","","Retrieves a date component.",12,{"inputs":[{"name":"datetime"}],"output":{"name":"date"}}],[11,"time","","Retrieves a time component.\nUnlike `date`, this is not associated to the time zone.",12,{"inputs":[{"name":"datetime"}],"output":{"name":"naivetime"}}],[11,"timestamp","","Returns the number of non-leap seconds since January 1, 1970 0:00:00 UTC\n(aka &quot;UNIX timestamp&quot;).",12,{"inputs":[{"name":"datetime"}],"output":{"name":"i64"}}],[11,"num_seconds_from_unix_epoch","","*Deprecated*: Same to `DateTime::timestamp`.",12,{"inputs":[{"name":"datetime"}],"output":{"name":"i64"}}],[11,"offset","","Retrieves an associated offset from UTC.",12,{"inputs":[{"name":"datetime"}],"output":{"name":"offset"}}],[11,"timezone","","Retrieves an associated time zone.",12,{"inputs":[{"name":"datetime"}],"output":{"name":"tz"}}],[11,"with_timezone","","Changes the associated time zone.\nThis does not change the actual `DateTime` (but will change the string representation).",12,{"inputs":[{"name":"datetime"},{"name":"tz2"}],"output":{"name":"datetime"}}],[11,"checked_add","","Adds given `Duration` to the current date and time.",12,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtracts given `Duration` from the current date and time.",12,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"option"}}],[11,"naive_utc","","Returns a view to the naive UTC datetime.",12,{"inputs":[{"name":"datetime"}],"output":{"name":"naivedatetime"}}],[11,"naive_local","","Returns a view to the naive local datetime.",12,{"inputs":[{"name":"datetime"}],"output":{"name":"naivedatetime"}}],[11,"parse_from_rfc2822","","Parses an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",12,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_rfc3339","","Parses an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`,\nthen returns a new `DateTime` with a parsed `FixedOffset`.",12,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"parse_from_str","","Parses a string with the specified format string and\nreturns a new `DateTime` with a parsed `FixedOffset`.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",12,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"parseresult"}}],[11,"to_rfc2822","","Returns an RFC 2822 date and time string such as `Tue, 1 Jul 2003 10:52:37 +0200`.",12,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"to_rfc3339","","Returns an RFC 3339 and ISO 8601 date and time string such as `1996-12-19T16:39:57-08:00`.",12,{"inputs":[{"name":"datetime"}],"output":{"name":"string"}}],[11,"format_with_items","","Formats the combined date and time with the specified formatting items.",12,{"inputs":[{"name":"datetime"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"format","","Formats the combined date and time with the specified format string.\nSee the [`format::strftime` module](../format/strftime/index.html)\non the supported escape sequences.",12,{"inputs":[{"name":"datetime"},{"name":"str"}],"output":{"name":"delayedformat"}}],[11,"year","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"i32"}}],[11,"month","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"month0","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"day","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"day0","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"ordinal","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"ordinal0","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"weekday","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"weekday"}}],[11,"isoweekdate","","",12,null],[11,"with_year","","",12,{"inputs":[{"name":"datetime"},{"name":"i32"}],"output":{"name":"option"}}],[11,"with_month","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_month0","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_day0","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_ordinal0","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"hour","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"minute","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"second","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"nanosecond","","",12,{"inputs":[{"name":"datetime"}],"output":{"name":"u32"}}],[11,"with_hour","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_minute","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_second","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"with_nanosecond","","",12,{"inputs":[{"name":"datetime"},{"name":"u32"}],"output":{"name":"option"}}],[11,"eq","","",12,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"ordering"}}],[11,"hash","","",12,{"inputs":[{"name":"datetime"},{"name":"h"}],"output":null}],[11,"add","","",12,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"sub","","",12,{"inputs":[{"name":"datetime"},{"name":"datetime"}],"output":{"name":"duration"}}],[11,"sub","","",12,{"inputs":[{"name":"datetime"},{"name":"duration"}],"output":{"name":"datetime"}}],[11,"fmt","","",12,{"inputs":[{"name":"datetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",12,{"inputs":[{"name":"datetime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"parseresult"}}],[0,"format","chrono","Formatting utilities for date and time.",null,null],[3,"ParseError","chrono::format","An error from the `parse` function.",null,null],[3,"DelayedFormat","","A *temporary* object which can be used as an argument to `format!` or others.\nThis is normally constructed via `format` methods of each date and time type.",null,null],[4,"Pad","","Padding characters for numeric items.",null,null],[13,"None","","No padding.",13,null],[13,"Zero","","Zero (`0`) padding.",13,null],[13,"Space","","Space padding.",13,null],[4,"Numeric","","Numeric item types.\nThey have associated formatting width (FW) and parsing width (PW).",null,null],[13,"Year","","Full Gregorian year (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",14,null],[13,"YearDiv100","","Gregorian year divided by 100 (century number; FW=PW=2). Implies the non-negative year.",14,null],[13,"YearMod100","","Gregorian year modulo 100 (FW=PW=2). Cannot be negative.",14,null],[13,"IsoYear","","Year in the ISO week date (FW=4, PW=infinity).\nMay accept years before 1 BCE or after 9999 CE, given an initial sign.",14,null],[13,"IsoYearDiv100","","Year in the ISO week date, divided by 100 (FW=PW=2). Implies the non-negative year.",14,null],[13,"IsoYearMod100","","Year in the ISO week date, modulo 100 (FW=PW=2). Cannot be negative.",14,null],[13,"Month","","Month (FW=PW=2).",14,null],[13,"Day","","Day of the month (FW=PW=2).",14,null],[13,"WeekFromSun","","Week number, where the week 1 starts at the first Sunday of January (FW=PW=2).",14,null],[13,"WeekFromMon","","Week number, where the week 1 starts at the first Monday of January (FW=PW=2).",14,null],[13,"IsoWeek","","Week number in the ISO week date (FW=PW=2).",14,null],[13,"NumDaysFromSun","","Day of the week, where Sunday = 0 and Saturday = 6 (FW=PW=1).",14,null],[13,"WeekdayFromMon","","Day of the week, where Monday = 1 and Sunday = 7 (FW=PW=1).",14,null],[13,"Ordinal","","Day of the year (FW=PW=3).",14,null],[13,"Hour","","Hour number in the 24-hour clocks (FW=PW=2).",14,null],[13,"Hour12","","Hour number in the 12-hour clocks (FW=PW=2).",14,null],[13,"Minute","","The number of minutes since the last whole hour (FW=PW=2).",14,null],[13,"Second","","The number of seconds since the last whole minute (FW=PW=2).",14,null],[13,"Nanosecond","","The number of nanoseconds since the last whole second (FW=PW=9).\nNote that this is *not* left-aligned; see also `Fixed::Nanosecond`.",14,null],[13,"Timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC (FW=1, PW=infinity).\nFor formatting, it assumes UTC upon the absence of time zone offset.",14,null],[4,"Fixed","","Fixed-format item types.",null,null],[13,"ShortMonthName","","Abbreviated month names.",15,null],[13,"LongMonthName","","Full month names.",15,null],[13,"ShortWeekdayName","","Abbreviated day of the week names.",15,null],[13,"LongWeekdayName","","Full day of the week names.",15,null],[13,"LowerAmPm","","AM/PM.",15,null],[13,"UpperAmPm","","AM/PM.",15,null],[13,"Nanosecond","","An optional dot plus one or more digits for left-aligned nanoseconds.\nMay print nothing, 3, 6 or 9 digits according to the available accuracy.\nSee also `Numeric::Nanosecond`.",15,null],[13,"Nanosecond3","","Fixed prescision at Nanosecond3 where 3 is the left aligned accuracy.",15,null],[13,"Nanosecond6","","Fixed prescision at Nanosecond6 where 6 is the left aligned accuracy.",15,null],[13,"Nanosecond9","","Fixed prescision at Nanosecond9 where 9 is the left aligned accuracy.",15,null],[13,"TimezoneName","","Timezone name.",15,null],[13,"TimezoneOffsetColon","","Offset from the local time to UTC (`+09:00` or `-04:00` or `+00:00`).",15,null],[13,"TimezoneOffsetColonZ","","Offset from the local time to UTC (`+09:00` or `-04:00` or `Z`).",15,null],[13,"TimezoneOffset","","Same to `TimezoneOffsetColon` but prints no colon. Parsing allows an optional colon.",15,null],[13,"TimezoneOffsetZ","","Same to `TimezoneOffsetColonZ` but prints no colon. Parsing allows an optional colon.",15,null],[13,"RFC2822","","RFC 2822 date and time syntax. Commonly used for email and MIME date and time.",15,null],[13,"RFC3339","","RFC 3339 &amp; ISO 8601 date and time syntax.",15,null],[4,"Item","","A single formatting item. This is used for both formatting and parsing.",null,null],[13,"Literal","","A literally printed and parsed text.",16,null],[13,"Space","","Whitespace. Prints literally but reads zero or more whitespace.",16,null],[13,"Numeric","","Numeric item. Can be optionally padded to the maximal length (if any) when formatting;\nthe parser simply ignores any padded whitespace and zeroes.",16,null],[13,"Fixed","","Fixed-format item.",16,null],[13,"Error","","Issues a formatting error. Used to signal an invalid format string.",16,null],[5,"parse","","Tries to parse given string into `parsed` with given formatting items.\nReturns `Ok` when the entire string has been parsed (otherwise `parsed` should not be used).\nThere should be no trailing string after parsing; use a stray `Item::Space` to trim whitespaces.",null,{"inputs":[{"name":"parsed"},{"name":"str"},{"name":"i"}],"output":{"name":"parseresult"}}],[5,"format","","Tries to format given arguments with given formatting items.\nInternally used by `DelayedFormat`.",null,{"inputs":[{"name":"formatter"},{"name":"option"},{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"result"}}],[0,"parsed","","A collection of parsed date and time items.\nThey can be constructed incrementally while being checked for consistency.",null,null],[3,"Parsed","chrono::format::parsed","Parsed parts of date and time. There are two classes of methods:",null,null],[12,"year","","Year. This can be negative unlike `year_{div,mod}_100` fields.",17,null],[12,"year_div_100","","Year divided by 100. Implies that the year is &gt;= 1 BCE when set.",17,null],[12,"year_mod_100","","Year modulo 100. Implies that the year is &gt;= 1 BCE when set.",17,null],[12,"isoyear","","Year in the ISO week date. This can be negative unlike `isoyear_{div,mod}_100` fields.",17,null],[12,"isoyear_div_100","","Year in the ISO week date, divided by 100. Implies that the year is &gt;= 1 BCE when set.",17,null],[12,"isoyear_mod_100","","Year in the ISO week date, modulo 100. Implies that the year is &gt;= 1 BCE when set.",17,null],[12,"month","","Month (1--12).",17,null],[12,"week_from_sun","","Week number, where the week 1 starts at the first Sunday of January.\n(0--53, 1--53 or 1--52 depending on the year).",17,null],[12,"week_from_mon","","Week number, where the week 1 starts at the first Monday of January.\n(0--53, 1--53 or 1--52 depending on the year).",17,null],[12,"isoweek","","ISO week number (1--52 or 1--53 depending on the year).",17,null],[12,"weekday","","Day of the week.",17,null],[12,"ordinal","","Day of the year (1--365 or 1--366 depending on the year).",17,null],[12,"day","","Day of the month (1--28, 1--29, 1--30 or 1--31 depending on the month).",17,null],[12,"hour_div_12","","Hour number divided by 12 (0--1). 0 indicates AM and 1 indicates PM.",17,null],[12,"hour_mod_12","","Hour number modulo 12 (0--11).",17,null],[12,"minute","","Minute number (0--59).",17,null],[12,"second","","Second number (0--60, accounting for leap seconds).",17,null],[12,"nanosecond","","The number of nanoseconds since the whole second (0--999,999,999).",17,null],[12,"timestamp","","The number of non-leap seconds since January 1, 1970 0:00:00 UTC.",17,null],[12,"offset","","Offset from the local time to UTC, in seconds.",17,null],[11,"fmt","","",17,{"inputs":[{"name":"parsed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"parsed"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"parsed"},{"name":"parsed"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"parsed"}],"output":{"name":"parsed"}}],[11,"new","","Returns the initial value of parsed parts.",17,{"inputs":[],"output":{"name":"parsed"}}],[11,"set_year","","Tries to set the `year` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_div_100","","Tries to set the `year_div_100` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_year_mod_100","","Tries to set the `year_mod_100` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear","","Tries to set the `isoyear` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_div_100","","Tries to set the `isoyear_div_100` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoyear_mod_100","","Tries to set the `isoyear_mod_100` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_month","","Tries to set the `month` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_sun","","Tries to set the `week_from_sun` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_week_from_mon","","Tries to set the `week_from_mon` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_isoweek","","Tries to set the `isoweek` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_weekday","","Tries to set the `weekday` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"weekday"}],"output":{"name":"parseresult"}}],[11,"set_ordinal","","Tries to set the `ordinal` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_day","","Tries to set the `day` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_ampm","","Tries to set the `hour_div_12` field from given value. (`false` for AM, `true` for PM)",17,{"inputs":[{"name":"parsed"},{"name":"bool"}],"output":{"name":"parseresult"}}],[11,"set_hour12","","Tries to set the `hour_mod_12` field from given hour number in 12-hour clocks.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_hour","","Tries to set both `hour_div_12` and `hour_mod_12` fields from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_minute","","Tries to set the `minute` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_second","","Tries to set the `second` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_nanosecond","","Tries to set the `nanosecond` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_timestamp","","Tries to set the `timestamp` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"set_offset","","Tries to set the `offset` field from given value.",17,{"inputs":[{"name":"parsed"},{"name":"i64"}],"output":{"name":"parseresult"}}],[11,"to_naive_date","","Returns a parsed naive date out of given fields.",17,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_naive_time","","Returns a parsed naive time out of given fields.",17,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_naive_datetime_with_offset","","Returns a parsed naive date and time out of given fields,\nexcept for the `offset` field (assumed to have a given value).\nThis is required for parsing a local time or other known-timezone inputs.",17,{"inputs":[{"name":"parsed"},{"name":"i32"}],"output":{"name":"parseresult"}}],[11,"to_fixed_offset","","Returns a parsed fixed time zone offset out of given fields.",17,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_datetime","","Returns a parsed timezone-aware date and time out of given fields.",17,{"inputs":[{"name":"parsed"}],"output":{"name":"parseresult"}}],[11,"to_datetime_with_timezone","","Returns a parsed timezone-aware date and time out of given fields,\nwith an additional `TimeZone` used to interpret and validate the local date.",17,{"inputs":[{"name":"parsed"},{"name":"tz"}],"output":{"name":"parseresult"}}],[0,"strftime","chrono::format","`strftime`/`strptime`-inspired date and time formatting syntax.",null,null],[3,"StrftimeItems","chrono::format::strftime","Parsing iterator for `strftime`-like format strings.",null,null],[11,"clone","","",18,{"inputs":[{"name":"strftimeitems"}],"output":{"name":"strftimeitems"}}],[11,"new","","Creates a new parsing iterator from the `strftime`-like format string.",18,{"inputs":[{"name":"str"}],"output":{"name":"strftimeitems"}}],[11,"next","","",18,{"inputs":[{"name":"strftimeitems"}],"output":{"name":"option"}}],[6,"ParseResult","chrono::format","Same to `Result&lt;T, ParseError&gt;`.",null,null],[11,"fmt","","",13,{"inputs":[{"name":"pad"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",13,{"inputs":[{"name":"pad"},{"name":"pad"}],"output":{"name":"bool"}}],[11,"clone","","",13,{"inputs":[{"name":"pad"}],"output":{"name":"pad"}}],[11,"fmt","","",14,{"inputs":[{"name":"numeric"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"numeric"},{"name":"numeric"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"numeric"}],"output":{"name":"numeric"}}],[11,"fmt","","",15,{"inputs":[{"name":"fixed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"fixed"},{"name":"fixed"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"fixed"}],"output":{"name":"fixed"}}],[11,"fmt","","",16,{"inputs":[{"name":"item"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",16,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"item"},{"name":"item"}],"output":{"name":"bool"}}],[11,"clone","","",16,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"eq","","",19,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",19,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",19,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",20,{"inputs":[{"name":"delayedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Makes a new `DelayedFormat` value out of local date and time.",20,{"inputs":[{"name":"option"},{"name":"option"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"new_with_offset","","Makes a new `DelayedFormat` value out of local date and time and UTC offset.",20,{"inputs":[{"name":"option"},{"name":"option"},{"name":"off"},{"name":"i"}],"output":{"name":"delayedformat"}}],[11,"fmt","","",20,{"inputs":[{"name":"delayedformat"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"Datelike","chrono","The common set of methods for date component.",null,null],[10,"year","","Returns the year number.",21,{"inputs":[{"name":"datelike"}],"output":{"name":"i32"}}],[11,"year_ce","","Returns the absolute year number starting from 1 with a boolean flag,\nwhich is false when the year predates the epoch (BCE/BC) and true otherwise (CE/AD).",21,null],[10,"month","","Returns the month number starting from 1.",21,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"month0","","Returns the month number starting from 0.",21,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"day","","Returns the day of month starting from 1.",21,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"day0","","Returns the day of month starting from 0.",21,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"ordinal","","Returns the day of year starting from 1.",21,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"ordinal0","","Returns the day of year starting from 0.",21,{"inputs":[{"name":"datelike"}],"output":{"name":"u32"}}],[10,"weekday","","Returns the day of week.",21,{"inputs":[{"name":"datelike"}],"output":{"name":"weekday"}}],[10,"isoweekdate","","Returns the ISO week date: an adjusted year, week number and day of week.\nThe adjusted year may differ from that of the calendar date.",21,null],[10,"with_year","","Makes a new value with the year number changed.",21,{"inputs":[{"name":"datelike"},{"name":"i32"}],"output":{"name":"option"}}],[10,"with_month","","Makes a new value with the month number (starting from 1) changed.",21,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_month0","","Makes a new value with the month number (starting from 0) changed.",21,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day","","Makes a new value with the day of month (starting from 1) changed.",21,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_day0","","Makes a new value with the day of month (starting from 0) changed.",21,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal","","Makes a new value with the day of year (starting from 1) changed.",21,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_ordinal0","","Makes a new value with the day of year (starting from 0) changed.",21,{"inputs":[{"name":"datelike"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_days_from_ce","","Returns the number of days since January 1, 1 (Day 1) in the proleptic Gregorian calendar.",21,{"inputs":[{"name":"datelike"}],"output":{"name":"i32"}}],[8,"Timelike","","The common set of methods for time component.",null,null],[10,"hour","","Returns the hour number from 0 to 23.",22,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[11,"hour12","","Returns the hour number from 1 to 12 with a boolean flag,\nwhich is false for AM and true for PM.",22,null],[10,"minute","","Returns the minute number from 0 to 59.",22,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"second","","Returns the second number from 0 to 59.",22,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"nanosecond","","Returns the number of nanoseconds since the whole non-leap second.\nThe range from 1,000,000,000 to 1,999,999,999 represents the leap second.",22,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[10,"with_hour","","Makes a new value with the hour number changed.",22,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_minute","","Makes a new value with the minute number changed.",22,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_second","","Makes a new value with the second number changed.",22,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[10,"with_nanosecond","","Makes a new value with nanoseconds since the whole non-leap second changed.",22,{"inputs":[{"name":"timelike"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_seconds_from_midnight","","Returns the number of non-leap seconds past the last midnight.",22,{"inputs":[{"name":"timelike"}],"output":{"name":"u32"}}],[11,"fmt","","",1,{"inputs":[{"name":"weekday"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"eq","","",1,{"inputs":[{"name":"weekday"},{"name":"weekday"}],"output":{"name":"bool"}}],[11,"succ","","The next day in the week.",1,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"pred","","The previous day in the week.",1,{"inputs":[{"name":"weekday"}],"output":{"name":"weekday"}}],[11,"number_from_monday","","Returns a DOW number starting from Monday = 1. (ISO 8601 weekday number)",1,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"number_from_sunday","","Returns a DOW number starting from Sunday = 1.",1,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"num_days_from_monday","","Returns a DOW number starting from Monday = 0.",1,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"num_days_from_sunday","","Returns a DOW number starting from Sunday = 0.",1,{"inputs":[{"name":"weekday"}],"output":{"name":"u32"}}],[11,"from_i64","","",1,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",1,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}]],"paths":[[3,"Duration"],[4,"Weekday"],[4,"LocalResult"],[3,"UTC"],[3,"FixedOffset"],[3,"Local"],[8,"Offset"],[8,"TimeZone"],[3,"NaiveDate"],[3,"NaiveTime"],[3,"NaiveDateTime"],[3,"Date"],[3,"DateTime"],[4,"Pad"],[4,"Numeric"],[4,"Fixed"],[4,"Item"],[3,"Parsed"],[3,"StrftimeItems"],[3,"ParseError"],[3,"DelayedFormat"],[8,"Datelike"],[8,"Timelike"]]};
searchIndex["serde_macros"] = {"doc":"","items":[],"paths":[]};
searchIndex["toml"] = {"doc":"A TOML-parsing library","items":[[3,"Parser","toml","Parser for converting a string to a TOML `Value` instance.",null,null],[12,"errors","","A list of all errors which have occurred during parsing.",0,null],[3,"ParserError","","A structure representing a parse error.",null,null],[12,"lo","","The low byte at which this error is pointing at.",1,null],[12,"hi","","One byte beyond the last character at which this error is pointing at.",1,null],[12,"desc","","A human-readable description explaining what the error is.",1,null],[3,"Encoder","","A structure to transform Rust values into TOML values.",null,null],[12,"toml","","Output TOML that is emitted. The current version of this encoder forces\nthe top-level representation of a structure to be a table.",2,null],[3,"Decoder","","A structure to transform TOML values into Rust values.",null,null],[12,"toml","","The TOML value left over after decoding. This can be used to inspect\nwhether fields were decoded or not.",3,null],[3,"DecodeError","","Description for errors which can occur while decoding a type.",null,null],[12,"field","","Field that this error applies to.",4,null],[12,"kind","","The type of error which occurred while decoding,",4,null],[4,"Error","","Enumeration of errors which can occur while encoding a rust value into a\nTOML value.",null,null],[13,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key\nwas previously emitted.",5,null],[13,"NoValue","","Indication that a key was emitted, but not value was emitted.",5,null],[13,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid\nlocation.",5,null],[13,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a\nmap key type.",5,null],[13,"Custom","","A custom error type was generated",5,null],[4,"DecodeErrorKind","","Enumeration of possible errors which can occur while decoding a structure.",null,null],[13,"ApplicationError","","An error flagged by the application, e.g. value out of range",6,null],[13,"ExpectedField","","A field was expected, but none was found.",6,null],[13,"UnknownField","","A field was found, but it was not an expected one.",6,null],[13,"ExpectedType","","A field was found, but it had the wrong type.",6,null],[13,"ExpectedMapKey","","The nth map key was expected, but none was found.",6,null],[13,"ExpectedMapElement","","The nth map element was expected, but none was found.",6,null],[13,"NoEnumVariants","","An enum decoding was requested, but no variants were supplied",6,null],[13,"NilTooLong","","The unit type was being decoded, but a non-zero length string was found",6,null],[13,"SyntaxError","","There was an error with the syntactical structure of the TOML.",6,null],[13,"CustomError","","A custom error was generated when decoding.",6,null],[13,"EndOfStream","","The end of the TOML input was reached too soon",6,null],[13,"InvalidType","","Produced by serde ...",6,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","",7,null],[13,"Integer","","",7,null],[13,"Float","","",7,null],[13,"Boolean","","",7,null],[13,"Datetime","","",7,null],[13,"Array","","",7,null],[13,"Table","","",7,null],[5,"encode","","Encodes an encodable value into a TOML value.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"encode_str","","Encodes an encodable value into a TOML string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decodes a TOML value into a decodable type.",null,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[5,"decode_str","","Decodes a string into a toml-encoded value.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"parsererror"}],"output":{"name":"parsererror"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new parser for a string.",0,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}],[11,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0,null],[11,"parse","","Executes the parser, parsing the string contained within.",0,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"emit_nil","","",2,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_usize","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"emit_u8","","",2,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"emit_u16","","",2,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"emit_u32","","",2,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_u64","","",2,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"emit_isize","","",2,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"emit_i8","","",2,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"emit_i16","","",2,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"emit_i32","","",2,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"emit_i64","","",2,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"emit_bool","","",2,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"emit_f32","","",2,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[11,"emit_f64","","",2,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[11,"emit_char","","",2,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[11,"emit_str","","",2,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[11,"emit_enum","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_variant_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_enum_struct_variant_field","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_struct_field","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct","","",2,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_tuple_struct_arg","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option","","",2,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_option_none","","",2,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[11,"emit_option_some","","",2,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_seq_elt","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_key","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"emit_map_elt_val","","",2,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"value"},{"name":"e"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Constructs a new encoder which will emit to the given output stream.",2,{"inputs":[],"output":{"name":"encoder"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"read_nil","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_usize","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u16","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_u8","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_isize","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i16","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_i8","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_bool","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f64","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_f32","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_char","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_str","","",3,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[11,"read_enum","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_variant","","",3,null],[11,"read_enum_variant_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_enum_struct_variant","","",3,null],[11,"read_enum_struct_variant_field","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_struct_field","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct","","",3,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_tuple_struct_arg","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_option","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_seq_elt","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map","","",3,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_key","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"read_map_elt_val","","",3,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[11,"error","","",3,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodeerror"}}],[11,"fmt","","",4,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"decodeerror"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"decodeerror"},{"name":"decodeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"decodeerrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"decodeerrorkind"},{"name":"decodeerrorkind"}],"output":{"name":"bool"}}],[11,"new","","Creates a new decoder, consuming the TOML value to decode.",3,{"inputs":[{"name":"value"}],"output":{"name":"decoder"}}],[11,"fmt","","",4,{"inputs":[{"name":"decodeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",4,{"inputs":[{"name":"decodeerror"}],"output":{"name":"str"}}],[6,"Array","","Type representing a TOML array, payload of the Value::Array variant",null,null],[6,"Table","","Type representing a TOML table, payload of the Value::Table variant",null,null],[11,"fmt","","",7,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"eq","","",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"same_type","","Tests whether this and another value have the same type.",7,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"type_str","","Returns a human-readable representation of the type of this value.",7,{"inputs":[{"name":"value"}],"output":{"name":"str"}}],[11,"as_str","","Extracts the string of this value if it is a string.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_integer","","Extracts the integer value if it is an integer.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_float","","Extracts the float value if it is a float.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_bool","","Extracts the boolean value if it is a boolean.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_slice","","Extracts the array value if it is an array.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_table","","Extracts the table value if it is a table.",7,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"lookup","","Lookups for value at specified path.",7,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Parser"],[3,"ParserError"],[3,"Encoder"],[3,"Decoder"],[3,"DecodeError"],[4,"Error"],[4,"DecodeErrorKind"],[4,"Value"]]};
searchIndex["serde_codegen"] = {"doc":"","items":[[5,"register","serde_codegen","",null,{"inputs":[{"name":"registry"}],"output":null}]],"paths":[]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,{"inputs":[{"name":"log"},{"name":"logmetadata"}],"output":{"name":"bool"}}],[10,"log","","Logs the `LogRecord`.",2,{"inputs":[{"name":"log"},{"name":"logrecord"}],"output":null}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevel"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"loglevel"},{"name":"loglevel"}],"output":{"name":"ordering"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"loglevel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,{"inputs":[{"name":"loglevel"}],"output":{"name":"loglevelfilter"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevel"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"loglevelfilter"}],"output":{"name":"ordering"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"loglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,{"inputs":[{"name":"loglevelfilter"}],"output":{"name":"option"}}],[11,"args","","The message body.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"arguments"}}],[11,"metadata","","Metadata about the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"logmetadata"}}],[11,"location","","The location of the log directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglocation"}}],[11,"level","","The verbosity level of the message.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",3,{"inputs":[{"name":"logrecord"}],"output":{"name":"str"}}],[11,"level","","The verbosity level of the message.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"loglevel"}}],[11,"target","","The name of the target of the directive.",4,{"inputs":[{"name":"logmetadata"}],"output":{"name":"str"}}],[11,"fmt","","",5,{"inputs":[{"name":"loglocation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"loglocation"}}],[11,"module_path","","The module path of the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"file","","The source file containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"str"}}],[11,"line","","The line containing the message.",5,{"inputs":[{"name":"loglocation"}],"output":{"name":"u32"}}],[11,"fmt","","",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"get","","Gets the current maximum log level filter.",6,{"inputs":[{"name":"maxloglevelfilter"}],"output":{"name":"loglevelfilter"}}],[11,"set","","Sets the maximum log level.",6,{"inputs":[{"name":"maxloglevelfilter"},{"name":"loglevelfilter"}],"output":null}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"setloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",7,{"inputs":[{"name":"setloggererror"}],"output":{"name":"str"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"shutdownloggererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",8,{"inputs":[{"name":"shutdownloggererror"}],"output":{"name":"str"}}],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["serde_json"] = {"doc":"JSON and serialization","items":[[0,"builder","serde_json","JSON Builders",null,null],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"unwrap","","Return the constructed `Value`.",0,{"inputs":[{"name":"arraybuilder"}],"output":{"name":"value"}}],[11,"push","","Insert a value into the array.",0,{"inputs":[{"name":"arraybuilder"},{"name":"t"}],"output":{"name":"arraybuilder"}}],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\nthis array.",0,{"inputs":[{"name":"arraybuilder"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\nthis array.",0,{"inputs":[{"name":"arraybuilder"},{"name":"f"}],"output":{"name":"arraybuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"unwrap","","Return the constructed `Value`.",1,{"inputs":[{"name":"objectbuilder"}],"output":{"name":"value"}}],[11,"insert","","Insert a key-value pair into the object.",1,{"inputs":[{"name":"objectbuilder"},{"name":"s"},{"name":"v"}],"output":{"name":"objectbuilder"}}],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\nthis object.",1,{"inputs":[{"name":"objectbuilder"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\nthis object.",1,{"inputs":[{"name":"objectbuilder"},{"name":"s"},{"name":"f"}],"output":{"name":"objectbuilder"}}],[0,"de","serde_json","JSON Deserialization",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Decodes a json value from an iterator over an iterator\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a json value from a byte slice `&amp;[u8]`.",null,null],[5,"from_str","","Decodes a json value from a `&amp;str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"deserializer"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","Parses an enum as an object like `{&quot;$KEY&quot;:$VALUE}`, where $VALUE is either a straight\nvalue, a `[..]`, or a `{..}`.",2,null],[11,"visit_variant","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_newtype","","",2,{"inputs":[{"name":"deserializer"}],"output":{"name":"result"}}],[11,"visit_tuple","","",2,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","",2,null],[11,"new","","Returns an `Iterator` of decoded JSON values from an iterator over\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,{"inputs":[{"name":"streamdeserializer"}],"output":{"name":"option"}}],[0,"error","serde_json","JSON Errors",null,null],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `&#39;:&#39;`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a\nvalue into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[13,"FromUtf8","","Some UTF8 error occurred while serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"eq","","",4,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_json","JSON Serialization",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[5,"escape_bytes","","Serializes and escapes a `&amp;[u8]` into a JSON string.",null,null],[5,"escape_str","","Serializes and escapes a `&amp;str` into a JSON string.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[10,"open","","Called when serializing a &#39;{&#39; or &#39;[&#39;.",6,{"inputs":[{"name":"formatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[10,"comma","","Called when serializing a &#39;,&#39;.",6,{"inputs":[{"name":"formatter"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[10,"colon","","Called when serializing a &#39;:&#39;.",6,{"inputs":[{"name":"formatter"},{"name":"w"}],"output":{"name":"result"}}],[10,"close","","Called when serializing a &#39;}&#39; or &#39;]&#39;.",6,{"inputs":[{"name":"formatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new","","Creates a new JSON serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",7,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,{"inputs":[{"name":"serializer"}],"output":{"name":"w"}}],[11,"serialize_bool","","",7,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_isize","","",7,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"serialize_i8","","",7,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","",7,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","",7,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[11,"serialize_i64","","",7,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_usize","","",7,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_u8","","",7,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","",7,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","",7,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[11,"serialize_u64","","",7,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","",7,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[11,"serialize_f64","","",7,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",7,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",7,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_none","","",7,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize_some","","",7,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_unit","","",7,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Override `visit_newtype_struct` to serialize newtypes without an object wrapper.",7,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",7,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",7,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","",7,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",7,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_seq_elt","","",7,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_map","","",7,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",7,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_map_elt","","",7,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"open","","",8,{"inputs":[{"name":"compactformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"comma","","",8,{"inputs":[{"name":"compactformatter"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"colon","","",8,{"inputs":[{"name":"compactformatter"},{"name":"w"}],"output":{"name":"result"}}],[11,"close","","",8,{"inputs":[{"name":"compactformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",9,null],[11,"open","","",9,{"inputs":[{"name":"prettyformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[11,"comma","","",9,{"inputs":[{"name":"prettyformatter"},{"name":"w"},{"name":"bool"}],"output":{"name":"result"}}],[11,"colon","","",9,{"inputs":[{"name":"prettyformatter"},{"name":"w"}],"output":{"name":"result"}}],[11,"close","","",9,{"inputs":[{"name":"prettyformatter"},{"name":"w"},{"name":"u8"}],"output":{"name":"result"}}],[0,"value","serde_json","JSON Value",null,null],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",10,null],[13,"Bool","","Represents a JSON Boolean",10,null],[13,"I64","","Represents a JSON signed integer",10,null],[13,"U64","","Represents a JSON unsigned integer",10,null],[13,"F64","","Represents a JSON floating point number",10,null],[13,"String","","Represents a JSON string",10,null],[13,"Array","","Represents a JSON array",10,null],[13,"Object","","Represents a JSON object",10,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"value"},{"name":"value"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"value"}],"output":{"name":"value"}}],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",10,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",10,null],[11,"lookup","","Looks up a value by path.",10,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",10,{"inputs":[{"name":"value"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_object","","If the `Value` is an Object, returns the associated BTreeMap.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_string","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"bool"}}],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",10,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[11,"serialize","","",10,{"inputs":[{"name":"value"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",10,{"inputs":[{"name":"value"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",11,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",11,{"inputs":[{"name":"serializer"}],"output":{"name":"value"}}],[11,"serialize_bool","","",11,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_i64","","",11,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_u64","","",11,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f64","","",11,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","",11,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[11,"serialize_str","","",11,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_none","","",11,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize_some","","",11,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_unit","","",11,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","",11,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","",11,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_seq","","",11,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","",11,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_seq_elt","","",11,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_map","","",11,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","",11,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_map_elt","","",11,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",12,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",12,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",12,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",12,null],[11,"deserialize_newtype_struct","","",12,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[4,"Value"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"characterset"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"fmt","","",20,{"inputs":[{"name":"newline"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"fmt","","",18,{"inputs":[{"name":"config"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"duration"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"duration"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"duration"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"duration"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"duration"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"duration"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"duration"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"outofrangeerror"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"outofrangeerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"outofrangeerror"}],"output":{"name":"str"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"timespec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"timespec"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"precisetime"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,{"inputs":[{"name":"precisetime"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"steadytime"}],"output":{"name":"steadytime"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"steadytime"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"steadytime"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"hash","","",1,null],[11,"fmt","","",1,{"inputs":[{"name":"tm"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"tm"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"tm"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"tm"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"tm"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,{"inputs":[{"name":"tm"}],"output":{"name":"tmfmt"}}],[11,"clone","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"parseerror"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"parseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"parseerror"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"tmfmt"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["num"] = {"doc":"A collection of numeric types and traits for Rust.","items":[[5,"zero","num","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[0,"complex","","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",0,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sin","","Computes the sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cos","","Computes the cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tan","","Computes the tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_nan","","Checks if the given complex number is NaN",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_infinite","","Checks if the given complex number is infinite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_finite","","Checks if the given complex number is finite",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"is_normal","","Checks if the given complex number is normal",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"sub","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"mul","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"div","","",0,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",1,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",1,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",1,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",1,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",2,null],[11,"next_back","","",2,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next_back","","",3,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",4,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",4,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",5,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",5,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",6,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",7,null],[13,"Invalid","","",7,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",8,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",8,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",9,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",9,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",10,{"inputs":[],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",11,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",11,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",11,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",11,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",11,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",12,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",12,{"inputs":[],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",13,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",13,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",14,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",15,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",16,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",17,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",18,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",18,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",18,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",19,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",20,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",21,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",22,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",22,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",22,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",22,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",22,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",22,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",22,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",22,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",22,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",22,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",22,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",22,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",22,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",22,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",22,null],[11,"fmt","","",6,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"Bytes","serde::bytes","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[3,"ByteBuf","","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[11,"cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"bytes"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"hash","","",0,null],[11,"clone","","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"fmt","","",0,{"inputs":[{"name":"bytes"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",0,null],[11,"deref","","",0,null],[11,"serialize","","",0,{"inputs":[{"name":"bytes"},{"name":"s"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"bytebuf"},{"name":"bytebuf"}],"output":{"name":"bool"}}],[11,"hash","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"bytebuf"}}],[11,"new","","Construct a new, empty `ByteBuf`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"bytebuf"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"into","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"from","","",1,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_ref","","",1,null],[11,"as_mut","","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"vec"}}],[11,"as_mut","","",1,null],[11,"deref","","",1,null],[11,"deref_mut","","",1,null],[11,"serialize","","",1,{"inputs":[{"name":"bytebuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit_unit","","",2,{"inputs":[{"name":"bytebufvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","",2,null],[11,"visit_byte_buf","","",2,{"inputs":[{"name":"bytebufvisitor"},{"name":"vec"}],"output":{"name":"result"}}],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&amp;str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"FieldName","","Represents a struct field name.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"VariantName","","Represents an enum variant name.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",4,{"inputs":[{"name":"unitvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",4,{"inputs":[{"name":"unitvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bool","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_str","","",5,{"inputs":[{"name":"boolvisitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"deserialize","collections::string","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::option","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"visit_unit","serde::de::impls","",8,{"inputs":[{"name":"phantomdatavisitor"}],"output":{"name":"result"}}],[11,"deserialize","core::marker","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",10,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",10,{"inputs":[{"name":"binaryheapvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",10,{"inputs":[{"name":"binaryheapvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::binary_heap","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",12,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",12,{"inputs":[{"name":"btreesetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",12,{"inputs":[{"name":"btreesetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::set","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",14,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",14,{"inputs":[{"name":"linkedlistvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",14,{"inputs":[{"name":"linkedlistvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::linked_list","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",16,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",16,{"inputs":[{"name":"hashsetvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",16,{"inputs":[{"name":"hashsetvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::set","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",18,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",18,{"inputs":[{"name":"vecvisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",18,{"inputs":[{"name":"vecvisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a new sequence visitor.",20,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",20,{"inputs":[{"name":"vecdequevisitor"}],"output":{"name":"result"}}],[11,"visit_seq","","",20,{"inputs":[{"name":"vecdequevisitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","collections::vec_deque","",21,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `TupleVisitor*&lt;T&gt;`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",22,{"inputs":[{"name":"tuplevisitor1"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",23,{"inputs":[{"name":"tuplevisitor2"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",24,{"inputs":[{"name":"tuplevisitor3"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",25,{"inputs":[{"name":"tuplevisitor4"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",26,{"inputs":[{"name":"tuplevisitor5"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",27,{"inputs":[{"name":"tuplevisitor6"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",28,{"inputs":[{"name":"tuplevisitor7"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",29,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",29,{"inputs":[{"name":"tuplevisitor8"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",30,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",30,{"inputs":[{"name":"tuplevisitor9"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",31,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",31,{"inputs":[{"name":"tuplevisitor10"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",32,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",32,{"inputs":[{"name":"tuplevisitor11"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",33,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",33,{"inputs":[{"name":"tuplevisitor12"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",34,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",34,{"inputs":[{"name":"btreemapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",34,{"inputs":[{"name":"btreemapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","collections::btree::map","",35,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"new","serde::de::impls","Construct a `MapVisitor*&lt;T&gt;`.",36,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",36,{"inputs":[{"name":"hashmapvisitor"}],"output":{"name":"result"}}],[11,"visit_map","","",36,{"inputs":[{"name":"hashmapvisitor"},{"name":"visitor"}],"output":{"name":"result"}}],[11,"deserialize","std::collections::hash::map","",37,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::ip","",38,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",39,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::net::addr","",40,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",41,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","","",42,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","std::path","",43,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::boxed","",44,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::arc","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","alloc::rc","",46,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","collections::borrow","",47,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","core::result","",48,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"deserialize","serde::de::impls","",49,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",50,null],[13,"InvalidType","","The value had an incorrect type.",50,null],[13,"InvalidLength","","The value had an invalid length.",50,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",50,null],[13,"EndOfStream","","EOF while deserializing a value.",50,null],[13,"UnknownVariant","","Unknown variant in enum.",50,null],[13,"UnknownField","","Unknown field in struct.",50,null],[13,"MissingField","","Struct is missing a field.",50,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",51,null],[10,"into_deserializer","","Convert this value into a deserializer.",51,{"inputs":[{"name":"valuedeserializer"}],"output":{"name":"deserializer"}}],[11,"eq","","",50,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",50,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",50,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",50,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",50,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",50,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",50,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",50,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"cause","","",50,{"inputs":[{"name":"error"}],"output":{"name":"option"}}],[11,"deserialize","","",52,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","",52,{"inputs":[{"name":"unitdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",53,{"inputs":[{"name":"booldeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",54,{"inputs":[{"name":"i8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",55,{"inputs":[{"name":"i16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",56,{"inputs":[{"name":"i32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",57,{"inputs":[{"name":"i64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",58,{"inputs":[{"name":"isizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",59,{"inputs":[{"name":"u8deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",60,{"inputs":[{"name":"u16deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",61,{"inputs":[{"name":"u32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",62,{"inputs":[{"name":"u64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",63,{"inputs":[{"name":"usizedeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",64,{"inputs":[{"name":"f32deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",65,{"inputs":[{"name":"f64deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",66,{"inputs":[{"name":"chardeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize","","",67,{"inputs":[{"name":"strdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",67,null],[11,"visit_variant","","",67,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",67,{"inputs":[{"name":"strdeserializer"}],"output":{"name":"result"}}],[11,"into_deserializer","collections::string","",6,{"inputs":[{"name":"string"}],"output":{"name":"stringdeserializer"}}],[11,"deserialize","serde::de::value","",68,{"inputs":[{"name":"stringdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","",68,null],[11,"visit_variant","","",68,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"visit_unit","","",68,{"inputs":[{"name":"stringdeserializer"}],"output":{"name":"result"}}],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",69,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",69,{"inputs":[{"name":"seqdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit","","",69,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"end","","",69,{"inputs":[{"name":"seqdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",69,null],[11,"into_deserializer","collections::vec","",19,{"inputs":[{"name":"vec"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","collections::btree::set","",13,{"inputs":[{"name":"btreeset"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"}],"output":{"name":"deserializer"}}],[11,"new","serde::de::value","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",70,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",70,{"inputs":[{"name":"seqvisitordeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V&gt;`.",71,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",71,{"inputs":[{"name":"mapdeserializer"},{"name":"v_"}],"output":{"name":"result"}}],[11,"visit_key","","",71,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"visit_value","","",71,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"end","","",71,{"inputs":[{"name":"mapdeserializer"}],"output":{"name":"result"}}],[11,"size_hint","","",71,null],[11,"into_deserializer","collections::btree::map","",35,{"inputs":[{"name":"btreemap"}],"output":{"name":"deserializer"}}],[11,"into_deserializer","std::collections::hash::map","",37,{"inputs":[{"name":"hashmap"}],"output":{"name":"deserializer"}}],[11,"new","serde::de::value","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",72,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",72,{"inputs":[{"name":"mapvisitordeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",0,{"inputs":[{"name":"bytes"}],"output":{"name":"bytesdeserializer"}}],[11,"deserialize","serde::de::value","",73,{"inputs":[{"name":"bytesdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"into_deserializer","serde::bytes","",1,{"inputs":[{"name":"bytebuf"}],"output":{"name":"deserializer"}}],[11,"deserialize","serde::de::value","",74,{"inputs":[{"name":"bytebufdeserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",75,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",75,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",75,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",75,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",75,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",75,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",75,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",75,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",76,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",77,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_fixed_size_array","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",77,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",77,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.",77,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",77,{"inputs":[{"name":"deserializer"},{"name":"str"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",77,null],[11,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",77,{"inputs":[{"name":"deserializer"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",77,null],[11,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",77,{"inputs":[{"name":"deserializer"},{"name":"v"}],"output":{"name":"result"}}],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",78,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"bool"}],"output":{"name":"result"}}],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"isize"}],"output":{"name":"result"}}],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"i8"}],"output":{"name":"result"}}],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"i16"}],"output":{"name":"result"}}],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"i32"}],"output":{"name":"result"}}],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"i64"}],"output":{"name":"result"}}],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"usize"}],"output":{"name":"result"}}],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"u8"}],"output":{"name":"result"}}],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"u16"}],"output":{"name":"result"}}],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"u32"}],"output":{"name":"result"}}],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"u64"}],"output":{"name":"result"}}],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"f32"}],"output":{"name":"result"}}],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"f64"}],"output":{"name":"result"}}],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"char"}],"output":{"name":"result"}}],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",78,{"inputs":[{"name":"visitor"},{"name":"string"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",78,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"str"}],"output":{"name":"result"}}],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",78,{"inputs":[{"name":"visitor"}],"output":{"name":"result"}}],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"d"}],"output":{"name":"result"}}],[11,"visit_seq","","`visit_bool` deserializes a `SeqVisitor` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",78,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",78,{"inputs":[{"name":"visitor"},{"name":"vec"}],"output":{"name":"result"}}],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",79,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",79,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",79,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",79,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",80,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",80,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",80,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",80,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",80,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"result"}}],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",80,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",80,{"inputs":[{"name":"mapvisitor"},{"name":"str"}],"output":{"name":"result"}}],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",81,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",81,{"inputs":[{"name":"enumvisitor"},{"name":"v"}],"output":{"name":"result"}}],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",82,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",82,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",82,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value. By default this\nuses the `visit_tuple` method to deserialize the value.",82,{"inputs":[{"name":"variantvisitor"}],"output":{"name":"result"}}],[11,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.",82,{"inputs":[{"name":"variantvisitor"},{"name":"usize"},{"name":"v"}],"output":{"name":"result"}}],[11,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.",82,null],[11,"fmt","","",3,{"inputs":[{"name":"type"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"type"},{"name":"type"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"type"}],"output":{"name":"type"}}],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",83,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"col","","Report the current column inside the iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"usize"}}],[11,"get_ref","","Gets a reference to the underlying iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"iter"}}],[11,"peek","","peeks at the next value",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[11,"next","","",83,{"inputs":[{"name":"linecoliterator"}],"output":{"name":"option"}}],[0,"ser","serde","Generic serialization framework.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types.",null,null],[3,"SeqIteratorVisitor","serde::ser::impls","A `serde::Visitor` for sequence iterators.",null,null],[3,"TupleVisitor1","","A tuple visitor.",null,null],[3,"TupleVisitor2","","A tuple visitor.",null,null],[3,"TupleVisitor3","","A tuple visitor.",null,null],[3,"TupleVisitor4","","A tuple visitor.",null,null],[3,"TupleVisitor5","","A tuple visitor.",null,null],[3,"TupleVisitor6","","A tuple visitor.",null,null],[3,"TupleVisitor7","","A tuple visitor.",null,null],[3,"TupleVisitor8","","A tuple visitor.",null,null],[3,"TupleVisitor9","","A tuple visitor.",null,null],[3,"TupleVisitor10","","A tuple visitor.",null,null],[3,"TupleVisitor11","","A tuple visitor.",null,null],[3,"TupleVisitor12","","A tuple visitor.",null,null],[3,"MapIteratorVisitor","","A `serde::Visitor` for (key, value) map iterators.",null,null],[11,"serialize","collections::string","",6,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::option","",7,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"visit","","",7,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",7,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"serialize","core::marker","",9,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new `SeqIteratorVisitor&lt;Iter&gt;`.",84,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"seqiteratorvisitor"}}],[11,"visit","","",84,{"inputs":[{"name":"seqiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",84,{"inputs":[{"name":"seqiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::binary_heap","",11,{"inputs":[{"name":"binaryheap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::btree::set","",13,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::linked_list","",15,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec","",19,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::vec_deque","",21,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"new","serde::ser::impls","Construct a new, empty `TupleVisitor`.",85,null],[11,"visit","","",85,{"inputs":[{"name":"tuplevisitor1"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",85,{"inputs":[{"name":"tuplevisitor1"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",86,null],[11,"visit","","",86,{"inputs":[{"name":"tuplevisitor2"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",86,{"inputs":[{"name":"tuplevisitor2"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",87,null],[11,"visit","","",87,{"inputs":[{"name":"tuplevisitor3"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",87,{"inputs":[{"name":"tuplevisitor3"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",88,null],[11,"visit","","",88,{"inputs":[{"name":"tuplevisitor4"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",88,{"inputs":[{"name":"tuplevisitor4"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",89,null],[11,"visit","","",89,{"inputs":[{"name":"tuplevisitor5"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",89,{"inputs":[{"name":"tuplevisitor5"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",90,null],[11,"visit","","",90,{"inputs":[{"name":"tuplevisitor6"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",90,{"inputs":[{"name":"tuplevisitor6"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",91,null],[11,"visit","","",91,{"inputs":[{"name":"tuplevisitor7"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",91,{"inputs":[{"name":"tuplevisitor7"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",92,null],[11,"visit","","",92,{"inputs":[{"name":"tuplevisitor8"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",92,{"inputs":[{"name":"tuplevisitor8"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",93,null],[11,"visit","","",93,{"inputs":[{"name":"tuplevisitor9"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",93,{"inputs":[{"name":"tuplevisitor9"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",94,null],[11,"visit","","",94,{"inputs":[{"name":"tuplevisitor10"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",94,{"inputs":[{"name":"tuplevisitor10"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",95,null],[11,"visit","","",95,{"inputs":[{"name":"tuplevisitor11"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",95,{"inputs":[{"name":"tuplevisitor11"}],"output":{"name":"option"}}],[11,"new","","Construct a new, empty `TupleVisitor`.",96,null],[11,"visit","","",96,{"inputs":[{"name":"tuplevisitor12"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",96,{"inputs":[{"name":"tuplevisitor12"}],"output":{"name":"option"}}],[11,"new","","Construct a new `MapIteratorVisitor&lt;Iter&gt;`.",97,{"inputs":[{"name":"iter"},{"name":"option"}],"output":{"name":"mapiteratorvisitor"}}],[11,"visit","","",97,{"inputs":[{"name":"mapiteratorvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","",97,{"inputs":[{"name":"mapiteratorvisitor"}],"output":{"name":"option"}}],[11,"serialize","collections::btree::map","",35,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::collections::hash::map","",37,{"inputs":[{"name":"hashmap"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::boxed","",44,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::rc","",46,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","alloc::arc","",45,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","collections::borrow","",47,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","core::result","",48,{"inputs":[{"name":"result"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::net::ip","",38,{"inputs":[{"name":"ipv4addr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",39,{"inputs":[{"name":"ipv6addr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::net::addr","",40,{"inputs":[{"name":"socketaddr"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",41,{"inputs":[{"name":"socketaddrv4"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",42,{"inputs":[{"name":"socketaddrv6"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","std::path","",98,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"serialize","","",43,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[8,"Error","serde::ser","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",99,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",99,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",100,{"inputs":[{"name":"serialize"},{"name":"s"}],"output":{"name":"result"}}],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",101,null],[10,"serialize_bool","","Serializes a `bool` value.",101,{"inputs":[{"name":"serializer"},{"name":"bool"}],"output":{"name":"result"}}],[11,"serialize_isize","","Serializes a `isize` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",101,{"inputs":[{"name":"serializer"},{"name":"isize"}],"output":{"name":"result"}}],[11,"serialize_i8","","Serializes a `i8` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",101,{"inputs":[{"name":"serializer"},{"name":"i8"}],"output":{"name":"result"}}],[11,"serialize_i16","","Serializes a `i16` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",101,{"inputs":[{"name":"serializer"},{"name":"i16"}],"output":{"name":"result"}}],[11,"serialize_i32","","Serializes a `i32` value. By default it casts the value to a `i64` and\npasses it to the `serialize_i64` method.",101,{"inputs":[{"name":"serializer"},{"name":"i32"}],"output":{"name":"result"}}],[10,"serialize_i64","","Serializes a `i64` value.",101,{"inputs":[{"name":"serializer"},{"name":"i64"}],"output":{"name":"result"}}],[11,"serialize_usize","","Serializes a `usize` value. By default it casts the value to a `u64` and\npasses it to the `serialize_u64` method.",101,{"inputs":[{"name":"serializer"},{"name":"usize"}],"output":{"name":"result"}}],[11,"serialize_u8","","Serializes a `u8` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",101,{"inputs":[{"name":"serializer"},{"name":"u8"}],"output":{"name":"result"}}],[11,"serialize_u16","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",101,{"inputs":[{"name":"serializer"},{"name":"u16"}],"output":{"name":"result"}}],[11,"serialize_u32","","Serializes a `u32` value. By default it casts the value to a `u64` and passes\nit to the `serialize_u64` method.",101,{"inputs":[{"name":"serializer"},{"name":"u32"}],"output":{"name":"result"}}],[10,"serialize_u64","","`Serializes a `u64` value.",101,{"inputs":[{"name":"serializer"},{"name":"u64"}],"output":{"name":"result"}}],[11,"serialize_f32","","Serializes a `f32` value. By default it casts the value to a `f64` and passes\nit to the `serialize_f64` method.",101,{"inputs":[{"name":"serializer"},{"name":"f32"}],"output":{"name":"result"}}],[10,"serialize_f64","","Serializes a `f64` value.",101,{"inputs":[{"name":"serializer"},{"name":"f64"}],"output":{"name":"result"}}],[11,"serialize_char","","Serializes a character. By default it serializes it as a `&amp;str` containing a\nsingle character.",101,{"inputs":[{"name":"serializer"},{"name":"char"}],"output":{"name":"result"}}],[10,"serialize_str","","Serializes a `&amp;str`.",101,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_bytes","","Enables those serialization formats that support serializing\nbyte slices separately from generic arrays. By default it serializes as a regular array.",101,null],[10,"serialize_unit","","Serializes a `()` value.",101,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[11,"serialize_unit_struct","","Serializes a unit struct value.",101,{"inputs":[{"name":"serializer"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no arguments.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a\nnewtyped value, to be more efficiently serialized than a tuple struct with multiple items.\nBy default it just serializes the value as a tuple struct sequence.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently\nserialized than a variant with multiple items. By default it just serializes the value as a\ntuple variant sequence.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_none","","Serializes a `None` value..serialize",101,{"inputs":[{"name":"serializer"}],"output":{"name":"result"}}],[10,"serialize_some","","Serializes a `Some(...)` value.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq","","Serializes a sequence.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_seq_elt","","Serializes a sequence element.",101,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple","","Serializes a tuple.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_elt","","Serializes a tuple element.",101,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_fixed_size_array","","Serializes a fixed-size array.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct","","Serializes a tuple struct.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_struct_elt","","Serializes a tuple struct element.",101,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant","","Serializes a tuple variant.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_tuple_variant_elt","","Serializes a tuple element.",101,{"inputs":[{"name":"serializer"},{"name":"t"}],"output":{"name":"result"}}],[10,"serialize_map","","Serializes a map.",101,{"inputs":[{"name":"serializer"},{"name":"v"}],"output":{"name":"result"}}],[10,"serialize_map_elt","","Serializes a map element (key-value pair).",101,{"inputs":[{"name":"serializer"},{"name":"k"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct","","Serializes a struct.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_elt","","Serializes an element of a struct.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant","","Serializes a struct variant.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"usize"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[11,"serialize_struct_variant_elt","","Serializes an element of a struct variant.",101,{"inputs":[{"name":"serializer"},{"name":"str"},{"name":"v"}],"output":{"name":"result"}}],[8,"SeqVisitor","","A trait that is used by a `Serialize` to iterate through a sequence.",null,null],[10,"visit","","Serializes a sequence item in the serializer.",102,{"inputs":[{"name":"seqvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the sequence if known.",102,{"inputs":[{"name":"seqvisitor"}],"output":{"name":"option"}}],[8,"MapVisitor","","A trait that is used by a `Serialize` to iterate through a map.",null,null],[10,"visit","","Serializes a map item in the serializer.",103,{"inputs":[{"name":"mapvisitor"},{"name":"s"}],"output":{"name":"result"}}],[11,"len","","Return the length of the map if known.",103,{"inputs":[{"name":"mapvisitor"}],"output":{"name":"option"}}]],"paths":[[3,"Bytes"],[3,"ByteBuf"],[3,"ByteBufVisitor"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"String"],[4,"Option"],[3,"PhantomDataVisitor"],[3,"PhantomData"],[3,"BinaryHeapVisitor"],[3,"BinaryHeap"],[3,"BTreeSetVisitor"],[3,"BTreeSet"],[3,"LinkedListVisitor"],[3,"LinkedList"],[3,"HashSetVisitor"],[3,"HashSet"],[3,"VecVisitor"],[3,"Vec"],[3,"VecDequeVisitor"],[3,"VecDeque"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"BTreeMapVisitor"],[3,"BTreeMap"],[3,"HashMapVisitor"],[3,"HashMap"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"PathBuf"],[3,"Box"],[3,"Arc"],[3,"Rc"],[4,"Cow"],[4,"Result"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[3,"SeqIteratorVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"MapIteratorVisitor"],[3,"Path"],[8,"Error"],[8,"Serialize"],[8,"Serializer"],[8,"SeqVisitor"],[8,"MapVisitor"]]};
searchIndex["debug_unreachable"] = {"doc":"`panic!()` in debug builds, optimization hint in release.","items":[[5,"__unreachable","debug_unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,null],[14,"debug_unreachable!","","`panic!()` in debug builds, optimization hint in release.",null,null]],"paths":[]};
searchIndex["unreachable"] = {"doc":"# unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,{"inputs":[],"output":null}],[8,"UncheckedOptionExt","","An extension trait for `Option&lt;T&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,{"inputs":[{"name":"uncheckedoptionext"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,{"inputs":[{"name":"uncheckedoptionext"}],"output":null}],[8,"UncheckedResultExt","","An extension trait for `Result&lt;T, E&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,{"inputs":[{"name":"uncheckedresultext"}],"output":{"name":"t"}}],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,{"inputs":[{"name":"uncheckedresultext"}],"output":{"name":"e"}}],[11,"unchecked_unwrap","core::option","",2,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unchecked_unwrap_none","","",2,{"inputs":[{"name":"option"}],"output":null}],[11,"unchecked_unwrap_ok","core::result","",3,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"unchecked_unwrap_err","","",3,{"inputs":[{"name":"result"}],"output":{"name":"e"}}]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"],[4,"Option"],[4,"Result"]]};
searchIndex["quasi_macros"] = {"doc":"","items":[],"paths":[]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[14,"lazy_static!","lazy_static","",null,null]],"paths":[]};
searchIndex["semver"] = {"doc":"Semantic version parsing and comparison.","items":[[3,"Version","semver","Represents a version number conforming to the semantic versioning scheme.",null,null],[12,"major","","The major version, to be incremented on incompatible changes.",0,null],[12,"minor","","The minor version, to be incremented when functionality is added in a\nbackwards-compatible manner.",0,null],[12,"patch","","The patch version, to be incremented when backwards-compatible bug\nfixes are made.",0,null],[12,"pre","","The pre-release version identifier, if one exists.",0,null],[12,"build","","The build metadata, ignored when determining version precedence.",0,null],[3,"VersionReq","","A `VersionReq` is a struct containing a list of predicates that can apply to ranges of version\nnumbers. Matching operations can then be done with the `VersionReq` against a particular\nversion to see if it satisfies some or all of the constraints.",null,null],[4,"Identifier","","An identifier in the pre-release or build metadata.",null,null],[13,"Numeric","","An identifier that&#39;s solely numbers.",1,null],[13,"AlphaNumeric","","An identifier with letters and numbers.",1,null],[4,"SemVerError","","An error type for this crate",null,null],[13,"ParseError","","An error ocurred while parsing.",2,null],[4,"ReqParseError","","A `ReqParseError` is returned from methods which parse a string into a `VersionReq`. Each\nenumeration is one of the possible errors that can occur.",null,null],[13,"InvalidVersionRequirement","","The given version requirement is invalid.",3,null],[13,"OpAlreadySet","","You have already provided an operation, such as `=`, `~`, or `^`. Only use one.",3,null],[13,"InvalidSigil","","The sigil you have written is not correct.",3,null],[13,"VersionComponentsMustBeNumeric","","All components of a version must be numeric.",3,null],[13,"InvalidIdentifier","","There was an error parsing an identifier.",3,null],[13,"MajorVersionRequired","","At least a major version is required.",3,null],[13,"UnimplementedVersionRequirement","","An unimplemented version requirement.",3,null],[11,"fmt","","",1,{"inputs":[{"name":"identifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"cmp","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"identifier"},{"name":"identifier"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"identifier"}],"output":{"name":"identifier"}}],[11,"fmt","","",1,{"inputs":[{"name":"identifier"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"version"}],"output":{"name":"version"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"semvererror"},{"name":"semvererror"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"semvererror"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"semvererror"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"semvererror"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"semvererror"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"semvererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"semvererror"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"semvererror"},{"name":"semvererror"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"semvererror"}],"output":{"name":"semvererror"}}],[11,"fmt","","",2,{"inputs":[{"name":"semvererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"semvererror"}],"output":{"name":"str"}}],[11,"parse","","Parse a string into a semver object.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"increment_patch","","Increments the patch number for this Version (Must be mutable)",0,{"inputs":[{"name":"version"}],"output":null}],[11,"increment_minor","","Increments the minor version number for this Version (Must be mutable)",0,{"inputs":[{"name":"version"}],"output":null}],[11,"increment_major","","Increments the major version number for this Version (Must be mutable)",0,{"inputs":[{"name":"version"}],"output":null}],[11,"is_prerelease","","Checks to see if the current Version is in pre-release status",0,{"inputs":[{"name":"version"}],"output":{"name":"bool"}}],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"version"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"option"}}],[11,"cmp","","",0,{"inputs":[{"name":"version"},{"name":"version"}],"output":{"name":"ordering"}}],[11,"hash","","",0,{"inputs":[{"name":"version"},{"name":"h"}],"output":null}],[11,"fmt","","",4,{"inputs":[{"name":"versionreq"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"versionreq"}],"output":{"name":"versionreq"}}],[11,"eq","","",4,{"inputs":[{"name":"versionreq"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"versionreq"},{"name":"versionreq"}],"output":{"name":"bool"}}],[11,"eq","","",3,{"inputs":[{"name":"reqparseerror"},{"name":"reqparseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"reqparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"reqparseerror"}],"output":{"name":"reqparseerror"}}],[11,"fmt","","",3,{"inputs":[{"name":"reqparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",3,{"inputs":[{"name":"reqparseerror"}],"output":{"name":"str"}}],[11,"any","","`any()` is a factory method which creates a `VersionReq` with no constraints. In other\nwords, any version will match against it.",4,{"inputs":[],"output":{"name":"versionreq"}}],[11,"parse","","`parse()` is the main constructor of a `VersionReq`. It turns a string like `&quot;^1.2.3&quot;`\nand turns it into a `VersionReq` that matches that particular constraint.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"exact","","`exact()` is a factory method which creates a `VersionReq` with one exact constraint.",4,{"inputs":[{"name":"version"}],"output":{"name":"versionreq"}}],[11,"matches","","`matches()` matches a given `Version` against this `VersionReq`.",4,{"inputs":[{"name":"versionreq"},{"name":"version"}],"output":{"name":"bool"}}],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"versionreq"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Version"],[4,"Identifier"],[4,"SemVerError"],[4,"ReqParseError"],[3,"VersionReq"]]};
searchIndex["quasi_codegen"] = {"doc":"","items":[[5,"register","quasi_codegen","",null,{"inputs":[{"name":"registry"}],"output":null}]],"paths":[]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["unicode_normalization"] = {"doc":"Unicode character composition and decomposition utilities\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).","items":[[3,"Decompositions","unicode_normalization","External iterator for a string decomposition&#39;s characters.",null,null],[3,"Recompositions","","External iterator for a string recomposition&#39;s characters.",null,null],[11,"clone","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"decompositions"}}],[11,"next","","",0,{"inputs":[{"name":"decompositions"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"recompositions"}}],[11,"next","","",1,{"inputs":[{"name":"recompositions"}],"output":{"name":"option"}}],[0,"char","","Methods for composing and decomposing characters.",null,null],[5,"decompose_canonical","unicode_normalization::char","Compute canonical Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"decompose_compatible","","Compute canonical or compatible Unicode decomposition for character.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"f"}],"output":null}],[5,"compose","","Compose two characters into a single character, if possible.\nSee [Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/)\nfor more information.",null,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"option"}}],[5,"canonical_combining_class","","",null,{"inputs":[{"name":"char"}],"output":{"name":"u8"}}],[5,"is_combining_mark","","Return whether the given character is a combining mark (`General_Category=Mark`)",null,{"inputs":[{"name":"char"}],"output":{"name":"bool"}}],[17,"UNICODE_VERSION","unicode_normalization","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-normalization is based on.",null,null],[8,"UnicodeNormalization","","Methods for iterating over strings while applying Unicode normalizations\nas described in\n[Unicode Standard Annex #15](http://www.unicode.org/reports/tr15/).",null,null],[10,"nfd","","Returns an iterator over the string in Unicode Normalization Form D\n(canonical decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfkd","","Returns an iterator over the string in Unicode Normalization Form KD\n(compatibility decomposition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"decompositions"}}],[10,"nfc","","An Iterator over the string in Unicode Normalization Form C\n(canonical decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}],[10,"nfkc","","An Iterator over the string in Unicode Normalization Form KC\n(compatibility decomposition followed by canonical composition).",2,{"inputs":[{"name":"unicodenormalization"}],"output":{"name":"recompositions"}}]],"paths":[[3,"Decompositions"],[3,"Recompositions"],[8,"UnicodeNormalization"]]};
searchIndex["aster"] = {"doc":"","items":[[3,"AstBuilder","aster","",null,null],[0,"arm","","",null,null],[3,"ArmBuilder","aster::arm","",null,null],[3,"ArmPatBuilder","","",null,null],[3,"ArmBodyBuilder","","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",0,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",0,{"inputs":[{"name":"armbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_attrs","","",0,{"inputs":[{"name":"armbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_attr","","",0,{"inputs":[{"name":"armbuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"attr","","",0,{"inputs":[{"name":"armbuilder"}],"output":{"name":"attrbuilder"}}],[11,"with_pats","","",0,{"inputs":[{"name":"armbuilder"},{"name":"i"}],"output":{"name":"armpatbuilder"}}],[11,"with_pat","","",0,{"inputs":[{"name":"armbuilder"},{"name":"p"}],"output":{"name":"armpatbuilder"}}],[11,"pat","","",0,{"inputs":[{"name":"armbuilder"}],"output":{"name":"patbuilder"}}],[11,"invoke","","",0,{"inputs":[{"name":"armbuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"invoke","","",0,{"inputs":[{"name":"armbuilder"},{"name":"p"}],"output":{"name":"armpatbuilder"}}],[11,"with_pats","","",1,{"inputs":[{"name":"armpatbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_pat","","",1,{"inputs":[{"name":"armpatbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"pat","","",1,{"inputs":[{"name":"armpatbuilder"}],"output":{"name":"patbuilder"}}],[11,"with_guard","","",1,{"inputs":[{"name":"armpatbuilder"},{"name":"option"}],"output":{"name":"armbodybuilder"}}],[11,"guard","","",1,{"inputs":[{"name":"armpatbuilder"}],"output":{"name":"exprbuilder"}}],[11,"body","","",1,{"inputs":[{"name":"armpatbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build_arm_","","",1,{"inputs":[{"name":"armpatbuilder"},{"name":"option"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",1,{"inputs":[{"name":"armpatbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",1,{"inputs":[{"name":"armpatbuilder"},{"name":"p"}],"output":{"name":"armbodybuilder"}}],[11,"body","","",2,{"inputs":[{"name":"armbodybuilder"}],"output":{"name":"exprbuilder"}}],[11,"build","","",2,{"inputs":[{"name":"armbodybuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",2,{"inputs":[{"name":"armbodybuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"attr","aster","",null,null],[3,"AttrBuilder","aster::attr","",null,null],[3,"AttrListBuilder","","",null,null],[3,"AttrNameValueBuilder","","",null,null],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",3,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"inner","","",3,{"inputs":[{"name":"attrbuilder"}],"output":{"name":"self"}}],[11,"build_meta_item","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_meta_item_","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"metaitemkind"}],"output":{"name":"result"}}],[11,"word","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"list","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"t"}],"output":{"name":"attrlistbuilder"}}],[11,"name_value","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"t"}],"output":{"name":"litbuilder"}}],[11,"automatically_derived","","",3,{"inputs":[{"name":"attrbuilder"}],"output":{"name":"result"}}],[11,"inline","","",3,{"inputs":[{"name":"attrbuilder"}],"output":{"name":"result"}}],[11,"test","","",3,{"inputs":[{"name":"attrbuilder"}],"output":{"name":"result"}}],[11,"allow","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"warn","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"deny","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"features","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"plugins","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"doc","","Create a #[doc = &quot;...&quot;] node. Note that callers of this must make sure to prefix their\ncomments with either &quot;///&quot; or &quot;/\\*\\*&quot; if an outer comment, or &quot;//!&quot; or &quot;/\\*!&quot; if an inner\ncomment.",3,{"inputs":[{"name":"attrbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"invoke","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",3,{"inputs":[{"name":"attrbuilder"},{"name":"metaitemkind"}],"output":{"name":"result"}}],[11,"with_callback","","",4,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_meta_items","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_meta_items_","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_meta_item","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"with_meta_item_kind","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"metaitemkind"}],"output":{"name":"self"}}],[11,"words","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"word","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"t"}],"output":{"name":"self"}}],[11,"list","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"t"}],"output":{"name":"attrlistbuilder"}}],[11,"name_value","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"t"}],"output":{"name":"litbuilder"}}],[11,"build","","",4,{"inputs":[{"name":"attrlistbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",4,{"inputs":[{"name":"attrlistbuilder"},{"name":"metaitemkind"}],"output":{"name":"self"}}],[11,"invoke","","",5,{"inputs":[{"name":"attrnamevaluebuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"block","aster","",null,null],[3,"BlockBuilder","aster::block","",null,null],[11,"new","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",6,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",6,{"inputs":[{"name":"blockbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"unsafe_","","",6,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"self"}}],[11,"with_stmts","","",6,{"inputs":[{"name":"blockbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_stmt","","",6,{"inputs":[{"name":"blockbuilder"},{"name":"stmt"}],"output":{"name":"self"}}],[11,"stmt","","",6,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"stmtbuilder"}}],[11,"build_expr","","",6,{"inputs":[{"name":"blockbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"expr","","",6,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build","","",6,{"inputs":[{"name":"blockbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",6,{"inputs":[{"name":"blockbuilder"},{"name":"stmt"}],"output":{"name":"self"}}],[11,"invoke","","",6,{"inputs":[{"name":"blockbuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"constant","aster","",null,null],[3,"Const","aster::constant","",null,null],[12,"ty","","",7,null],[12,"expr","","",7,null],[3,"ConstBuilder","","",null,null],[11,"new","","",8,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",8,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",8,{"inputs":[{"name":"constbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_expr","","",8,{"inputs":[{"name":"constbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"expr","","",8,{"inputs":[{"name":"constbuilder"}],"output":{"name":"exprbuilder"}}],[11,"ty","","",8,{"inputs":[{"name":"constbuilder"}],"output":{"name":"tybuilder"}}],[11,"build","","",8,{"inputs":[{"name":"constbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",8,{"inputs":[{"name":"constbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",8,{"inputs":[{"name":"constbuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"expr","aster","",null,null],[3,"ExprBuilder","aster::expr","",null,null],[3,"ExprUnaryBuilder","","",null,null],[3,"ExprBinaryLhsBuilder","","",null,null],[3,"ExprBinaryRhsBuilder","","",null,null],[3,"ExprReturnBuilder","","",null,null],[3,"ExprTupleBuilder","","",null,null],[3,"ExprStructBuilder","","",null,null],[3,"ExprStructPathBuilder","","",null,null],[3,"ExprStructFieldBuilder","","",null,null],[3,"ExprCallBuilder","","",null,null],[3,"ExprCallArgsBuilder","","",null,null],[3,"ExprMethodCallBuilder","","",null,null],[3,"ExprMethodCallArgsBuilder","","",null,null],[3,"ExprRefBuilder","","",null,null],[3,"ExprPathBuilder","","",null,null],[3,"ExprAssignBuilder","","",null,null],[3,"ExprAssignLhsBuilder","","",null,null],[3,"ExprAssignOpBuilder","","",null,null],[3,"ExprAssignOpLhsBuilder","","",null,null],[3,"ExprIndexBuilder","","",null,null],[3,"ExprIndexLhsBuilder","","",null,null],[3,"ExprRepeatBuilder","","",null,null],[3,"ExprRepeatLhsBuilder","","",null,null],[3,"ExprLoopBuilder","","",null,null],[3,"ExprIfBuilder","","",null,null],[3,"ExprIfThenBuilder","","",null,null],[3,"ExprIfThenElseBuilder","","",null,null],[3,"ExprElseIfBuilder","","",null,null],[3,"ExprElseIfThenBuilder","","",null,null],[3,"ExprMatchBuilder","","",null,null],[3,"ExprMatchArmBuilder","","",null,null],[3,"ExprParenBuilder","","",null,null],[3,"ExprFieldBuilder","","",null,null],[3,"ExprTupFieldBuilder","","",null,null],[3,"ExprSliceBuilder","","",null,null],[3,"ExprVecBuilder","","",null,null],[3,"ExprTryBuilder","","",null,null],[11,"new","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",9,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"span","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_attr","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"attr","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"attrbuilder"}}],[11,"build_expr_kind","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"exprkind"}],"output":{"name":"result"}}],[11,"build_path","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"build_qpath","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"qself"},{"name":"path"}],"output":{"name":"result"}}],[11,"path","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"pathbuilder"}}],[11,"qpath","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"qpathbuilder"}}],[11,"id","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"build_lit","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"lit","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"litbuilder"}}],[11,"bool","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"true_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"false_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"int","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"uint","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"isize","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"i8","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"i16","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"i32","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"i64","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"usize","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"u8","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"u16","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"u32","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"u64","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"f32","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"s"}],"output":{"name":"result"}}],[11,"f64","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"s"}],"output":{"name":"result"}}],[11,"str","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"s"}],"output":{"name":"result"}}],[11,"build_unary","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"unop"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_deref","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_not","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_neg","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"unary","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"unop"}],"output":{"name":"exprbuilder"}}],[11,"deref","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"not","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"neg","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build_binary","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_add","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_sub","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_mul","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_div","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_rem","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_and","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_or","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_bit_xor","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_bit_and","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_bit_or","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_shl","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_shr","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_eq","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_lt","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_le","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_ne","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_ge","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_gt","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"binary","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"binopkind"}],"output":{"name":"exprbuilder"}}],[11,"add","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"sub","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"mul","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"div","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"rem","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"and","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"or","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"bit_xor","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"bit_and","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"bit_or","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"shl","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"shr","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"eq","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"lt","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"le","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"ne","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"ge","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"gt","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"ref_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"mut_ref","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"break_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"break_to","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"continue_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"continue_to","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"return_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"return_expr","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"unit","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"tuple","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprtuplebuilder"}}],[11,"struct_path","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"}],"output":{"name":"exprstructpathbuilder"}}],[11,"struct_id","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"t"}],"output":{"name":"exprstructpathbuilder"}}],[11,"struct_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"pathbuilder"}}],[11,"self_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"none","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"some","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"ok","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"err","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"phantom_data","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"call","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"method_call","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i"}],"output":{"name":"exprbuilder"}}],[11,"build_block","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"block","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"blockbuilder"}}],[11,"build_assign","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build_assign_op","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"binopkind"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"assign_op","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"binopkind"}],"output":{"name":"exprbuilder"}}],[11,"add_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"sub_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"mul_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"rem_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"and_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"or_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"bit_xor_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"bit_and_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"bit_or_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"bit_shl_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"bit_shr_assign","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build_index","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"index","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build_repeat","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"repeat","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"loop_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprloopbuilder"}}],[11,"if_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"match_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"paren","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"field","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"i"}],"output":{"name":"exprbuilder"}}],[11,"tup_field","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"box_","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"rc","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"arc","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"default","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"result"}}],[11,"slice","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprslicebuilder"}}],[11,"vec","","",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprslicebuilder"}}],[11,"try","","Represents an equivalent to `try!(...)`.",9,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"invoke","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"invoke","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"invoke","","",9,null],[11,"invoke","","",9,{"inputs":[{"name":"exprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",10,{"inputs":[{"name":"exprunarybuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",11,{"inputs":[{"name":"exprbinarylhsbuilder"},{"name":"p"}],"output":{"name":"exprbuilder"}}],[11,"invoke","","",12,{"inputs":[{"name":"exprbinaryrhsbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",13,{"inputs":[{"name":"exprreturnbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"with_exprs","","",14,{"inputs":[{"name":"exprtuplebuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"expr","","",14,{"inputs":[{"name":"exprtuplebuilder"}],"output":{"name":"exprbuilder"}}],[11,"build","","",14,{"inputs":[{"name":"exprtuplebuilder"}],"output":{"name":"result"}}],[11,"invoke","","",14,{"inputs":[{"name":"exprtuplebuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",15,{"inputs":[{"name":"exprstructbuilder"},{"name":"path"}],"output":{"name":"exprstructpathbuilder"}}],[11,"span","","",16,{"inputs":[{"name":"exprstructpathbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_fields","","",16,{"inputs":[{"name":"exprstructpathbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_id_exprs","","",16,{"inputs":[{"name":"exprstructpathbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"field","","",16,{"inputs":[{"name":"exprstructpathbuilder"},{"name":"i"}],"output":{"name":"exprbuilder"}}],[11,"build_with","","",16,{"inputs":[{"name":"exprstructpathbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build","","",16,{"inputs":[{"name":"exprstructpathbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",16,{"inputs":[{"name":"exprstructpathbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",17,{"inputs":[{"name":"exprstructfieldbuilder"},{"name":"p"}],"output":{"name":"exprstructpathbuilder"}}],[11,"invoke","","",18,{"inputs":[{"name":"exprcallbuilder"},{"name":"p"}],"output":{"name":"exprcallargsbuilder"}}],[11,"with_args","","",19,{"inputs":[{"name":"exprcallargsbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_arg","","",19,{"inputs":[{"name":"exprcallargsbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"arg","","",19,{"inputs":[{"name":"exprcallargsbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build","","",19,{"inputs":[{"name":"exprcallargsbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",19,{"inputs":[{"name":"exprcallargsbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",20,{"inputs":[{"name":"exprmethodcallbuilder"},{"name":"p"}],"output":{"name":"exprmethodcallargsbuilder"}}],[11,"with_tys","","",21,{"inputs":[{"name":"exprmethodcallargsbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",21,{"inputs":[{"name":"exprmethodcallargsbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"ty","","",21,{"inputs":[{"name":"exprmethodcallargsbuilder"}],"output":{"name":"tybuilder"}}],[11,"with_args","","",21,{"inputs":[{"name":"exprmethodcallargsbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_arg","","",21,{"inputs":[{"name":"exprmethodcallargsbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"arg","","",21,{"inputs":[{"name":"exprmethodcallargsbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build","","",21,{"inputs":[{"name":"exprmethodcallargsbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",21,{"inputs":[{"name":"exprmethodcallargsbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",21,{"inputs":[{"name":"exprmethodcallargsbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",22,{"inputs":[{"name":"exprrefbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",23,{"inputs":[{"name":"exprpathbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",24,{"inputs":[{"name":"exprassignbuilder"},{"name":"p"}],"output":{"name":"exprbuilder"}}],[11,"invoke","","",25,{"inputs":[{"name":"exprassignlhsbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",26,{"inputs":[{"name":"exprassignopbuilder"},{"name":"p"}],"output":{"name":"exprbuilder"}}],[11,"invoke","","",27,{"inputs":[{"name":"exprassignoplhsbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",28,{"inputs":[{"name":"exprindexbuilder"},{"name":"p"}],"output":{"name":"exprbuilder"}}],[11,"invoke","","",29,{"inputs":[{"name":"exprindexlhsbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",30,{"inputs":[{"name":"exprrepeatbuilder"},{"name":"p"}],"output":{"name":"exprbuilder"}}],[11,"invoke","","",31,{"inputs":[{"name":"exprrepeatlhsbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"label","","",32,{"inputs":[{"name":"exprloopbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"block","","",32,{"inputs":[{"name":"exprloopbuilder"}],"output":{"name":"blockbuilder"}}],[11,"invoke","","",32,{"inputs":[{"name":"exprloopbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",33,{"inputs":[{"name":"exprifbuilder"},{"name":"p"}],"output":{"name":"exprifthenbuilder"}}],[11,"build_then","","",34,{"inputs":[{"name":"exprifthenbuilder"},{"name":"p"}],"output":{"name":"exprifthenelsebuilder"}}],[11,"then","","",34,{"inputs":[{"name":"exprifthenbuilder"}],"output":{"name":"blockbuilder"}}],[11,"invoke","","",34,{"inputs":[{"name":"exprifthenbuilder"},{"name":"p"}],"output":{"name":"exprifthenelsebuilder"}}],[11,"else_if","","",35,{"inputs":[{"name":"exprifthenelsebuilder"}],"output":{"name":"exprbuilder"}}],[11,"build_else","","",35,{"inputs":[{"name":"exprifthenelsebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"else_","","",35,{"inputs":[{"name":"exprifthenelsebuilder"}],"output":{"name":"blockbuilder"}}],[11,"build","","",35,{"inputs":[{"name":"exprifthenelsebuilder"}],"output":{"name":"result"}}],[11,"invoke","","",35,{"inputs":[{"name":"exprifthenelsebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",36,{"inputs":[{"name":"exprelseifbuilder"},{"name":"p"}],"output":{"name":"exprelseifthenbuilder"}}],[11,"build_then","","",37,{"inputs":[{"name":"exprelseifthenbuilder"},{"name":"p"}],"output":{"name":"exprifthenelsebuilder"}}],[11,"then","","",37,{"inputs":[{"name":"exprelseifthenbuilder"}],"output":{"name":"blockbuilder"}}],[11,"invoke","","",37,{"inputs":[{"name":"exprelseifthenbuilder"},{"name":"p"}],"output":{"name":"exprifthenelsebuilder"}}],[11,"invoke","","",38,{"inputs":[{"name":"exprmatchbuilder"},{"name":"p"}],"output":{"name":"exprmatcharmbuilder"}}],[11,"with_arms","","",39,{"inputs":[{"name":"exprmatcharmbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_arm","","",39,{"inputs":[{"name":"exprmatcharmbuilder"},{"name":"arm"}],"output":{"name":"self"}}],[11,"arm","","",39,{"inputs":[{"name":"exprmatcharmbuilder"}],"output":{"name":"armbuilder"}}],[11,"build","","",39,{"inputs":[{"name":"exprmatcharmbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",39,{"inputs":[{"name":"exprmatcharmbuilder"},{"name":"arm"}],"output":{"name":"self"}}],[11,"invoke","","",40,{"inputs":[{"name":"exprparenbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",41,{"inputs":[{"name":"exprfieldbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",42,{"inputs":[{"name":"exprtupfieldbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"with_exprs","","",43,{"inputs":[{"name":"exprslicebuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"expr","","",43,{"inputs":[{"name":"exprslicebuilder"}],"output":{"name":"exprbuilder"}}],[11,"build","","",43,{"inputs":[{"name":"exprslicebuilder"}],"output":{"name":"result"}}],[11,"invoke","","",43,{"inputs":[{"name":"exprslicebuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",44,{"inputs":[{"name":"exprvecbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",45,{"inputs":[{"name":"exprtrybuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"fn_decl","aster","",null,null],[3,"FnDeclBuilder","aster::fn_decl","",null,null],[3,"ArgBuilder","","",null,null],[3,"ArgPatBuilder","","",null,null],[11,"new","","",46,{"inputs":[],"output":{"name":"fndeclbuilder"}}],[11,"with_callback","","",46,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"variadic","","",46,{"inputs":[{"name":"fndeclbuilder"}],"output":{"name":"self"}}],[11,"with_arg","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"arg"}],"output":{"name":"self"}}],[11,"with_args","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"arg","","",46,{"inputs":[{"name":"fndeclbuilder"}],"output":{"name":"argbuilder"}}],[11,"arg_id","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"t"}],"output":{"name":"argpatbuilder"}}],[11,"arg_ref_id","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"t"}],"output":{"name":"argpatbuilder"}}],[11,"arg_mut_id","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"t"}],"output":{"name":"argpatbuilder"}}],[11,"arg_ref_mut_id","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"t"}],"output":{"name":"argpatbuilder"}}],[11,"no_return","","",46,{"inputs":[{"name":"fndeclbuilder"}],"output":{"name":"result"}}],[11,"default_return","","",46,{"inputs":[{"name":"fndeclbuilder"}],"output":{"name":"result"}}],[11,"build_return","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"return_","","",46,{"inputs":[{"name":"fndeclbuilder"}],"output":{"name":"tybuilder"}}],[11,"build","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"functionretty"}],"output":{"name":"result"}}],[11,"invoke","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"arg"}],"output":{"name":"self"}}],[11,"invoke","","",46,{"inputs":[{"name":"fndeclbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","","",47,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",47,{"inputs":[{"name":"f"}],"output":{"name":"argbuilder"}}],[11,"span","","",47,{"inputs":[{"name":"argbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_pat","","",47,{"inputs":[{"name":"argbuilder"},{"name":"p"}],"output":{"name":"argpatbuilder"}}],[11,"pat","","",47,{"inputs":[{"name":"argbuilder"}],"output":{"name":"patbuilder"}}],[11,"id","","",47,{"inputs":[{"name":"argbuilder"},{"name":"t"}],"output":{"name":"argpatbuilder"}}],[11,"ref_id","","",47,{"inputs":[{"name":"argbuilder"},{"name":"t"}],"output":{"name":"argpatbuilder"}}],[11,"mut_id","","",47,{"inputs":[{"name":"argbuilder"},{"name":"t"}],"output":{"name":"argpatbuilder"}}],[11,"ref_mut_id","","",47,{"inputs":[{"name":"argbuilder"},{"name":"t"}],"output":{"name":"argpatbuilder"}}],[11,"invoke","","",47,{"inputs":[{"name":"argbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"with_ty","","",48,{"inputs":[{"name":"argpatbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"ty","","",48,{"inputs":[{"name":"argpatbuilder"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",48,{"inputs":[{"name":"argpatbuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"generics","aster","",null,null],[3,"GenericsBuilder","aster::generics","",null,null],[11,"new","","",49,{"inputs":[],"output":{"name":"self"}}],[11,"from_generics","","",49,{"inputs":[{"name":"generics"}],"output":{"name":"self"}}],[11,"with_callback","","",49,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"from_generics_with_callback","","",49,{"inputs":[{"name":"generics"},{"name":"f"}],"output":{"name":"self"}}],[11,"with","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"span","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime_names","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"lifetime_name","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"n"}],"output":{"name":"self"}}],[11,"lifetime","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_ty_params","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param_ids","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty_param","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"ty_param_id","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"ty_param","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"i"}],"output":{"name":"typarambuilder"}}],[11,"with_predicates","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_predicate","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[11,"predicate","","",49,{"inputs":[{"name":"genericsbuilder"}],"output":{"name":"wherepredicatebuilder"}}],[11,"add_lifetime_bound","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"l"}],"output":{"name":"self"}}],[11,"add_ty_param_bound","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"strip_bounds","","",49,{"inputs":[{"name":"genericsbuilder"}],"output":{"name":"self"}}],[11,"strip_lifetimes","","",49,{"inputs":[{"name":"genericsbuilder"}],"output":{"name":"self"}}],[11,"strip_ty_params","","",49,{"inputs":[{"name":"genericsbuilder"}],"output":{"name":"self"}}],[11,"strip_predicates","","",49,{"inputs":[{"name":"genericsbuilder"}],"output":{"name":"self"}}],[11,"build","","",49,{"inputs":[{"name":"genericsbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"invoke","","",49,{"inputs":[{"name":"genericsbuilder"},{"name":"wherepredicate"}],"output":{"name":"self"}}],[0,"ident","aster","",null,null],[8,"ToIdent","aster::ident","",null,null],[10,"to_ident","","",50,{"inputs":[{"name":"toident"}],"output":{"name":"ident"}}],[11,"to_ident","syntax::ast","",51,{"inputs":[{"name":"ident"}],"output":{"name":"ident"}}],[11,"to_ident","","",52,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"to_ident","collections::string","",53,{"inputs":[{"name":"string"}],"output":{"name":"ident"}}],[0,"invoke","aster","",null,null],[3,"Identity","aster::invoke","",null,null],[8,"Invoke","","",null,null],[16,"Result","","",54,null],[10,"invoke","","",54,{"inputs":[{"name":"invoke"},{"name":"a"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"identity"}],"output":{"name":"identity"}}],[11,"invoke","","",55,{"inputs":[{"name":"identity"},{"name":"a"}],"output":{"name":"a"}}],[0,"item","aster","",null,null],[3,"ItemBuilder","aster::item","",null,null],[3,"ItemFnDeclBuilder","","",null,null],[3,"ItemFnBuilder","","",null,null],[3,"ItemUseBuilder","","",null,null],[3,"ItemUsePathBuilder","","",null,null],[3,"ItemUsePathListBuilder","","",null,null],[3,"ItemStructBuilder","","",null,null],[3,"ItemTupleStructBuilder","","",null,null],[3,"ItemEnumBuilder","","",null,null],[3,"ItemExternCrateBuilder","","A builder for extern crate items",null,null],[3,"ItemMacBuilder","","A builder for macro invocation items.",null,null],[3,"ItemTyBuilder","","",null,null],[3,"ItemTraitBuilder","","",null,null],[3,"ItemTraitItemBuilder","","",null,null],[3,"ItemTraitMethodBuilder","","",null,null],[3,"ItemTraitTypeBuilder","","",null,null],[3,"ItemImplBuilder","","",null,null],[3,"ItemImplItemBuilder","","",null,null],[3,"ItemImplMethodBuilder","","",null,null],[3,"ItemConstBuilder","","",null,null],[11,"new","","",56,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",56,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",56,{"inputs":[{"name":"itembuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"span","","",56,{"inputs":[{"name":"itembuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_attrs","","",56,{"inputs":[{"name":"itembuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_attr","","",56,{"inputs":[{"name":"itembuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"attr","","",56,{"inputs":[{"name":"itembuilder"}],"output":{"name":"attrbuilder"}}],[11,"pub_","","",56,{"inputs":[{"name":"itembuilder"}],"output":{"name":"self"}}],[11,"build_item_kind","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"},{"name":"itemkind"}],"output":{"name":"result"}}],[11,"fn_","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"}],"output":{"name":"fndeclbuilder"}}],[11,"build_use","","",56,{"inputs":[{"name":"itembuilder"},{"name":"viewpath_"}],"output":{"name":"result"}}],[11,"use_","","",56,{"inputs":[{"name":"itembuilder"}],"output":{"name":"pathbuilder"}}],[11,"struct_","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"}],"output":{"name":"itemstructbuilder"}}],[11,"unit_struct","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"tuple_struct","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"}],"output":{"name":"itemtuplestructbuilder"}}],[11,"enum_","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"}],"output":{"name":"itemenumbuilder"}}],[11,"extern_crate","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"}],"output":{"name":"itemexterncratebuilder"}}],[11,"mac","","",56,{"inputs":[{"name":"itembuilder"}],"output":{"name":"itemmacbuilder"}}],[11,"type_","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"}],"output":{"name":"itemtybuilder"}}],[11,"trait_","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"}],"output":{"name":"itemtraitbuilder"}}],[11,"impl_","","",56,{"inputs":[{"name":"itembuilder"}],"output":{"name":"itemimplbuilder"}}],[11,"const_","","",56,{"inputs":[{"name":"itembuilder"},{"name":"t"}],"output":{"name":"constbuilder"}}],[11,"invoke","","",56,{"inputs":[{"name":"itembuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"invoke","","",57,{"inputs":[{"name":"itemfndeclbuilder"},{"name":"p"}],"output":{"name":"itemfnbuilder"}}],[11,"unsafe_","","",58,{"inputs":[{"name":"itemfnbuilder"}],"output":{"name":"self"}}],[11,"const_","","",58,{"inputs":[{"name":"itemfnbuilder"}],"output":{"name":"self"}}],[11,"abi","","",58,{"inputs":[{"name":"itemfnbuilder"},{"name":"abi"}],"output":{"name":"self"}}],[11,"generics","","",58,{"inputs":[{"name":"itemfnbuilder"}],"output":{"name":"genericsbuilder"}}],[11,"build","","",58,{"inputs":[{"name":"itemfnbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"block","","",58,{"inputs":[{"name":"itemfnbuilder"}],"output":{"name":"blockbuilder"}}],[11,"invoke","","",58,{"inputs":[{"name":"itemfnbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"invoke","","",58,{"inputs":[{"name":"itemfnbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",59,{"inputs":[{"name":"itemusebuilder"},{"name":"path"}],"output":{"name":"itemusepathbuilder"}}],[11,"as_","","",60,{"inputs":[{"name":"itemusepathbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"build","","",60,{"inputs":[{"name":"itemusepathbuilder"}],"output":{"name":"result"}}],[11,"glob","","",60,{"inputs":[{"name":"itemusepathbuilder"}],"output":{"name":"result"}}],[11,"list","","",60,{"inputs":[{"name":"itemusepathbuilder"}],"output":{"name":"itemusepathlistbuilder"}}],[11,"span","","",61,{"inputs":[{"name":"itemusepathlistbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"self_","","",61,{"inputs":[{"name":"itemusepathlistbuilder"}],"output":{"name":"self"}}],[11,"id","","",61,{"inputs":[{"name":"itemusepathlistbuilder"},{"name":"t"}],"output":{"name":"self"}}],[11,"build","","",61,{"inputs":[{"name":"itemusepathlistbuilder"}],"output":{"name":"result"}}],[11,"with_generics","","",62,{"inputs":[{"name":"itemstructbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"generics","","",62,{"inputs":[{"name":"itemstructbuilder"}],"output":{"name":"genericsbuilder"}}],[11,"with_fields","","",62,{"inputs":[{"name":"itemstructbuilder"},{"name":"i"}],"output":{"name":"variantdatastructbuilder"}}],[11,"with_field","","",62,{"inputs":[{"name":"itemstructbuilder"},{"name":"structfield"}],"output":{"name":"variantdatastructbuilder"}}],[11,"field","","",62,{"inputs":[{"name":"itemstructbuilder"},{"name":"t"}],"output":{"name":"structfieldbuilder"}}],[11,"build","","",62,{"inputs":[{"name":"itemstructbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",62,{"inputs":[{"name":"itemstructbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"invoke","","",62,{"inputs":[{"name":"itemstructbuilder"},{"name":"variantdata"}],"output":{"name":"result"}}],[11,"generics","","",63,{"inputs":[{"name":"itemtuplestructbuilder"}],"output":{"name":"genericsbuilder"}}],[11,"with_tys","","",63,{"inputs":[{"name":"itemtuplestructbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"ty","","",63,{"inputs":[{"name":"itemtuplestructbuilder"}],"output":{"name":"tybuilder"}}],[11,"field","","",63,{"inputs":[{"name":"itemtuplestructbuilder"}],"output":{"name":"structfieldbuilder"}}],[11,"build","","",63,{"inputs":[{"name":"itemtuplestructbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",63,{"inputs":[{"name":"itemtuplestructbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"invoke","","",63,{"inputs":[{"name":"itemtuplestructbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",63,{"inputs":[{"name":"itemtuplestructbuilder"},{"name":"structfield"}],"output":{"name":"self"}}],[11,"generics","","",64,{"inputs":[{"name":"itemenumbuilder"}],"output":{"name":"genericsbuilder"}}],[11,"with_variants","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_variant","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"variant"}],"output":{"name":"self"}}],[11,"with_variant_","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"variant_"}],"output":{"name":"self"}}],[11,"ids","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"id","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"t"}],"output":{"name":"self"}}],[11,"tuple","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"t"}],"output":{"name":"structfieldbuilder"}}],[11,"struct_","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"t"}],"output":{"name":"variantdatastructbuilder"}}],[11,"variant","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"t"}],"output":{"name":"variantbuilder"}}],[11,"build","","",64,{"inputs":[{"name":"itemenumbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"invoke","","",64,{"inputs":[{"name":"itemenumbuilder"},{"name":"variant"}],"output":{"name":"self"}}],[11,"with_name","","",65,{"inputs":[{"name":"itemexterncratebuilder"},{"name":"name"}],"output":{"name":"result"}}],[11,"build","","",65,{"inputs":[{"name":"itemexterncratebuilder"}],"output":{"name":"result"}}],[11,"path","","",66,{"inputs":[{"name":"itemmacbuilder"}],"output":{"name":"pathbuilder"}}],[11,"build","","",66,{"inputs":[{"name":"itemmacbuilder"},{"name":"mac"}],"output":{"name":"result"}}],[11,"invoke","","",66,{"inputs":[{"name":"itemmacbuilder"},{"name":"path"}],"output":{"name":"macbuilder"}}],[11,"invoke","","",66,{"inputs":[{"name":"itemmacbuilder"},{"name":"mac"}],"output":{"name":"result"}}],[11,"generics","","",67,{"inputs":[{"name":"itemtybuilder"}],"output":{"name":"genericsbuilder"}}],[11,"ty","","",67,{"inputs":[{"name":"itemtybuilder"}],"output":{"name":"tybuilder"}}],[11,"build_ty","","",67,{"inputs":[{"name":"itemtybuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",67,{"inputs":[{"name":"itemtybuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"invoke","","",67,{"inputs":[{"name":"itemtybuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"unsafe_","","",68,{"inputs":[{"name":"itemtraitbuilder"}],"output":{"name":"self"}}],[11,"with_generics","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"generics","","",68,{"inputs":[{"name":"itemtraitbuilder"}],"output":{"name":"genericsbuilder"}}],[11,"with_bounds","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",68,{"inputs":[{"name":"itemtraitbuilder"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_items","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_item","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"traititem"}],"output":{"name":"self"}}],[11,"item","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"t"}],"output":{"name":"itemtraititembuilder"}}],[11,"const_","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"t"}],"output":{"name":"constbuilder"}}],[11,"method","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"t"}],"output":{"name":"methodsigbuilder"}}],[11,"type_","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"t"}],"output":{"name":"itemtraittypebuilder"}}],[11,"build","","",68,{"inputs":[{"name":"itemtraitbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"invoke","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"invoke","","",68,{"inputs":[{"name":"itemtraitbuilder"},{"name":"traititem"}],"output":{"name":"self"}}],[11,"new","","",69,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_callback","","",69,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",69,{"inputs":[{"name":"itemtraititembuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_attrs","","",69,{"inputs":[{"name":"itemtraititembuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_attr","","",69,{"inputs":[{"name":"itemtraititembuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"attr","","",69,{"inputs":[{"name":"itemtraititembuilder"}],"output":{"name":"attrbuilder"}}],[11,"const_","","",69,{"inputs":[{"name":"itemtraititembuilder"}],"output":{"name":"constbuilder"}}],[11,"method","","",69,{"inputs":[{"name":"itemtraititembuilder"}],"output":{"name":"methodsigbuilder"}}],[11,"type_","","",69,{"inputs":[{"name":"itemtraititembuilder"}],"output":{"name":"itemtraittypebuilder"}}],[11,"build_item","","",69,{"inputs":[{"name":"itemtraititembuilder"},{"name":"traititemkind"}],"output":{"name":"result"}}],[11,"invoke","","",69,{"inputs":[{"name":"itemtraititembuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"invoke","","",69,{"inputs":[{"name":"itemtraititembuilder"},{"name":"const"}],"output":{"name":"result"}}],[11,"invoke","","",69,{"inputs":[{"name":"itemtraititembuilder"},{"name":"methodsig"}],"output":{"name":"result"}}],[11,"build_option_block","","",70,{"inputs":[{"name":"itemtraitmethodbuilder"},{"name":"option"}],"output":{"name":"result"}}],[11,"build_block","","",70,{"inputs":[{"name":"itemtraitmethodbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"build","","",70,{"inputs":[{"name":"itemtraitmethodbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",70,{"inputs":[{"name":"itemtraitmethodbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"with_bounds","","",71,{"inputs":[{"name":"itemtraittypebuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",71,{"inputs":[{"name":"itemtraittypebuilder"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",71,{"inputs":[{"name":"itemtraittypebuilder"}],"output":{"name":"typaramboundbuilder"}}],[11,"build_option_ty","","",71,{"inputs":[{"name":"itemtraittypebuilder"},{"name":"option"}],"output":{"name":"result"}}],[11,"build_ty","","",71,{"inputs":[{"name":"itemtraittypebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"ty","","",71,{"inputs":[{"name":"itemtraittypebuilder"}],"output":{"name":"tybuilder"}}],[11,"build","","",71,{"inputs":[{"name":"itemtraittypebuilder"}],"output":{"name":"result"}}],[11,"invoke","","",71,{"inputs":[{"name":"itemtraittypebuilder"},{"name":"typarambound"}],"output":{"name":"result"}}],[11,"invoke","","",71,{"inputs":[{"name":"itemtraittypebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"unsafe_","","",72,{"inputs":[{"name":"itemimplbuilder"}],"output":{"name":"self"}}],[11,"negative","","",72,{"inputs":[{"name":"itemimplbuilder"}],"output":{"name":"self"}}],[11,"with_generics","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"generics","","",72,{"inputs":[{"name":"itemimplbuilder"}],"output":{"name":"genericsbuilder"}}],[11,"with_trait","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"traitref"}],"output":{"name":"self"}}],[11,"trait_","","",72,{"inputs":[{"name":"itemimplbuilder"}],"output":{"name":"pathbuilder"}}],[11,"ty","","",72,{"inputs":[{"name":"itemimplbuilder"}],"output":{"name":"tybuilder"}}],[11,"build_ty","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"with_items","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_item","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"implitem"}],"output":{"name":"self"}}],[11,"item","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"t"}],"output":{"name":"itemimplitembuilder"}}],[11,"const_","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"t"}],"output":{"name":"constbuilder"}}],[11,"method","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"t"}],"output":{"name":"methodsigbuilder"}}],[11,"type_","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"t"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"invoke","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"path"}],"output":{"name":"self"}}],[11,"invoke","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"implitem"}],"output":{"name":"self"}}],[11,"invoke","","",72,{"inputs":[{"name":"itemimplbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","","",73,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_callback","","",73,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_attrs","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_attr","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"attr","","",73,{"inputs":[{"name":"itemimplitembuilder"}],"output":{"name":"attrbuilder"}}],[11,"pub_","","",73,{"inputs":[{"name":"itemimplitembuilder"}],"output":{"name":"self"}}],[11,"default","","",73,{"inputs":[{"name":"itemimplitembuilder"}],"output":{"name":"self"}}],[11,"const_","","",73,{"inputs":[{"name":"itemimplitembuilder"}],"output":{"name":"constbuilder"}}],[11,"build_method","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"methodsig"}],"output":{"name":"itemimplmethodbuilder"}}],[11,"method","","",73,{"inputs":[{"name":"itemimplitembuilder"}],"output":{"name":"methodsigbuilder"}}],[11,"type_","","",73,{"inputs":[{"name":"itemimplitembuilder"}],"output":{"name":"tybuilder"}}],[11,"mac","","",73,{"inputs":[{"name":"itemimplitembuilder"}],"output":{"name":"macbuilder"}}],[11,"build_item","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"implitemkind"}],"output":{"name":"result"}}],[11,"invoke","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"invoke","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"const"}],"output":{"name":"result"}}],[11,"invoke","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"methodsig"}],"output":{"name":"result"}}],[11,"invoke","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",73,{"inputs":[{"name":"itemimplitembuilder"},{"name":"mac"}],"output":{"name":"result"}}],[11,"build_block","","",74,{"inputs":[{"name":"itemimplmethodbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"block","","",74,{"inputs":[{"name":"itemimplmethodbuilder"}],"output":{"name":"blockbuilder"}}],[11,"invoke","","",74,{"inputs":[{"name":"itemimplmethodbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",75,{"inputs":[{"name":"itemconstbuilder"},{"name":"const"}],"output":{"name":"result"}}],[0,"lifetime","aster","",null,null],[3,"LifetimeDefBuilder","aster::lifetime","",null,null],[8,"IntoLifetime","","",null,null],[10,"into_lifetime","","",76,{"inputs":[{"name":"intolifetime"}],"output":{"name":"lifetime"}}],[8,"IntoLifetimeDef","","",null,null],[10,"into_lifetime_def","","",77,{"inputs":[{"name":"intolifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime","syntax::ast","",78,{"inputs":[{"name":"lifetime"}],"output":{"name":"lifetime"}}],[11,"into_lifetime_def","","",79,{"inputs":[{"name":"lifetimedef"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime_def","","",78,{"inputs":[{"name":"lifetime"}],"output":{"name":"lifetimedef"}}],[11,"into_lifetime_def","collections::string","",53,{"inputs":[{"name":"string"}],"output":{"name":"lifetimedef"}}],[11,"new","aster::lifetime","",80,{"inputs":[{"name":"n"}],"output":{"name":"self"}}],[11,"with_callback","","",80,{"inputs":[{"name":"n"},{"name":"f"}],"output":{"name":"self"}}],[11,"bound","","",80,{"inputs":[{"name":"lifetimedefbuilder"},{"name":"n"}],"output":{"name":"self"}}],[11,"build","","",80,{"inputs":[{"name":"lifetimedefbuilder"}],"output":{"name":"result"}}],[0,"lit","aster","",null,null],[3,"LitBuilder","aster::lit","",null,null],[11,"new","","",81,{"inputs":[],"output":{"name":"litbuilder"}}],[11,"with_callback","","",81,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",81,{"inputs":[{"name":"litbuilder"},{"name":"span"}],"output":{"name":"litbuilder"}}],[11,"build_lit","","",81,{"inputs":[{"name":"litbuilder"},{"name":"litkind"}],"output":{"name":"result"}}],[11,"bool","","",81,{"inputs":[{"name":"litbuilder"},{"name":"bool"}],"output":{"name":"result"}}],[11,"true_","","",81,{"inputs":[{"name":"litbuilder"}],"output":{"name":"result"}}],[11,"false_","","",81,{"inputs":[{"name":"litbuilder"}],"output":{"name":"result"}}],[11,"int","","",81,{"inputs":[{"name":"litbuilder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"isize","","",81,{"inputs":[{"name":"litbuilder"},{"name":"isize"}],"output":{"name":"result"}}],[11,"i8","","",81,{"inputs":[{"name":"litbuilder"},{"name":"i8"}],"output":{"name":"result"}}],[11,"i16","","",81,{"inputs":[{"name":"litbuilder"},{"name":"i16"}],"output":{"name":"result"}}],[11,"i32","","",81,{"inputs":[{"name":"litbuilder"},{"name":"i32"}],"output":{"name":"result"}}],[11,"i64","","",81,{"inputs":[{"name":"litbuilder"},{"name":"i64"}],"output":{"name":"result"}}],[11,"uint","","",81,{"inputs":[{"name":"litbuilder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"usize","","",81,{"inputs":[{"name":"litbuilder"},{"name":"usize"}],"output":{"name":"result"}}],[11,"u8","","",81,{"inputs":[{"name":"litbuilder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"u16","","",81,{"inputs":[{"name":"litbuilder"},{"name":"u16"}],"output":{"name":"result"}}],[11,"u32","","",81,{"inputs":[{"name":"litbuilder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"u64","","",81,{"inputs":[{"name":"litbuilder"},{"name":"u64"}],"output":{"name":"result"}}],[11,"f32","","",81,{"inputs":[{"name":"litbuilder"},{"name":"s"}],"output":{"name":"result"}}],[11,"f64","","",81,{"inputs":[{"name":"litbuilder"},{"name":"s"}],"output":{"name":"result"}}],[11,"char","","",81,{"inputs":[{"name":"litbuilder"},{"name":"char"}],"output":{"name":"result"}}],[11,"byte","","",81,{"inputs":[{"name":"litbuilder"},{"name":"u8"}],"output":{"name":"result"}}],[11,"str","","",81,{"inputs":[{"name":"litbuilder"},{"name":"s"}],"output":{"name":"result"}}],[11,"byte_str","","",81,{"inputs":[{"name":"litbuilder"},{"name":"t"}],"output":{"name":"result"}}],[0,"mac","aster","",null,null],[3,"MacBuilder","aster::mac","A Builder for macro invocations.",null,null],[11,"new","","",82,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",82,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",82,{"inputs":[{"name":"macbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"path","","",82,{"inputs":[{"name":"macbuilder"},{"name":"path"}],"output":{"name":"self"}}],[11,"build","","",82,{"inputs":[{"name":"macbuilder"}],"output":{"name":"result"}}],[11,"with_args","","",82,{"inputs":[{"name":"macbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_arg","","",82,{"inputs":[{"name":"macbuilder"},{"name":"t"}],"output":{"name":"self"}}],[11,"expr","","",82,{"inputs":[{"name":"macbuilder"}],"output":{"name":"exprbuilder"}}],[11,"invoke","","",82,{"inputs":[{"name":"macbuilder"},{"name":"p"}],"output":{"name":"self"}}],[0,"method","aster","",null,null],[3,"MethodSigBuilder","aster::method","",null,null],[3,"SelfBuilder","","",null,null],[11,"new","","",83,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",83,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",83,{"inputs":[{"name":"methodsigbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"unsafe_","","",83,{"inputs":[{"name":"methodsigbuilder"}],"output":{"name":"self"}}],[11,"const_","","",83,{"inputs":[{"name":"methodsigbuilder"}],"output":{"name":"self"}}],[11,"abi","","",83,{"inputs":[{"name":"methodsigbuilder"},{"name":"abi"}],"output":{"name":"self"}}],[11,"with_generics","","",83,{"inputs":[{"name":"methodsigbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"generics","","",83,{"inputs":[{"name":"methodsigbuilder"}],"output":{"name":"genericsbuilder"}}],[11,"with_self","","",83,{"inputs":[{"name":"methodsigbuilder"},{"name":"mutability"},{"name":"explicitself"}],"output":{"name":"self"}}],[11,"self_","","",83,{"inputs":[{"name":"methodsigbuilder"}],"output":{"name":"selfbuilder"}}],[11,"build_fn_decl","","",83,{"inputs":[{"name":"methodsigbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"fn_decl","","",83,{"inputs":[{"name":"methodsigbuilder"}],"output":{"name":"fndeclbuilder"}}],[11,"invoke","","",83,{"inputs":[{"name":"methodsigbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"invoke","","",83,null],[11,"invoke","","",83,{"inputs":[{"name":"methodsigbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"new","","",84,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",84,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",84,{"inputs":[{"name":"selfbuilder"},{"name":"explicitself"}],"output":{"name":"result"}}],[11,"span","","",84,{"inputs":[{"name":"selfbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"build_self_kind","","",84,{"inputs":[{"name":"selfbuilder"},{"name":"selfkind"}],"output":{"name":"result"}}],[11,"mut_","","",84,{"inputs":[{"name":"selfbuilder"}],"output":{"name":"self"}}],[11,"static_","","",84,{"inputs":[{"name":"selfbuilder"}],"output":{"name":"result"}}],[11,"mut_static","","",84,{"inputs":[{"name":"selfbuilder"}],"output":{"name":"result"}}],[11,"value","","",84,{"inputs":[{"name":"selfbuilder"}],"output":{"name":"result"}}],[11,"ref_","","",84,{"inputs":[{"name":"selfbuilder"}],"output":{"name":"result"}}],[11,"ref_lifetime","","",84,{"inputs":[{"name":"selfbuilder"},{"name":"l"}],"output":{"name":"result"}}],[11,"ref_mut","","",84,{"inputs":[{"name":"selfbuilder"}],"output":{"name":"result"}}],[11,"ref_mut_lifetime","","",84,{"inputs":[{"name":"selfbuilder"},{"name":"l"}],"output":{"name":"result"}}],[11,"ty","","",84,{"inputs":[{"name":"selfbuilder"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",84,{"inputs":[{"name":"selfbuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"name","aster","",null,null],[8,"ToName","aster::name","",null,null],[10,"to_name","","",85,{"inputs":[{"name":"toname"}],"output":{"name":"name"}}],[11,"to_name","syntax::ast","",52,{"inputs":[{"name":"name"}],"output":{"name":"name"}}],[0,"pat","aster","",null,null],[3,"PatBuilder","aster::pat","",null,null],[3,"PatRangeBuilder","","",null,null],[3,"PatRangeExprBuilder","","",null,null],[3,"PatEnumBuilder","","",null,null],[3,"PatEnumPathBuilder","","",null,null],[3,"PatStructBuilder","","",null,null],[3,"PatStructPathBuilder","","",null,null],[3,"PatStructFieldBuilder","","",null,null],[3,"PatExprBuilder","","",null,null],[3,"PatTupleBuilder","","",null,null],[11,"new","","",86,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",86,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",86,{"inputs":[{"name":"patbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"build","","",86,{"inputs":[{"name":"patbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"build_pat_kind","","",86,{"inputs":[{"name":"patbuilder"},{"name":"patkind"}],"output":{"name":"result"}}],[11,"wild","","",86,{"inputs":[{"name":"patbuilder"}],"output":{"name":"result"}}],[11,"build_id","","",86,{"inputs":[{"name":"patbuilder"},{"name":"bindingmode"},{"name":"i"},{"name":"option"}],"output":{"name":"result"}}],[11,"id","","",86,{"inputs":[{"name":"patbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"mut_id","","",86,{"inputs":[{"name":"patbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"ref_id","","",86,{"inputs":[{"name":"patbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"ref_mut_id","","",86,{"inputs":[{"name":"patbuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"enum_","","",86,{"inputs":[{"name":"patbuilder"}],"output":{"name":"pathbuilder"}}],[11,"struct_","","",86,{"inputs":[{"name":"patbuilder"}],"output":{"name":"pathbuilder"}}],[11,"expr","","",86,{"inputs":[{"name":"patbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build_path","","",86,{"inputs":[{"name":"patbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"build_qpath","","",86,{"inputs":[{"name":"patbuilder"},{"name":"qself"},{"name":"path"}],"output":{"name":"result"}}],[11,"path","","",86,{"inputs":[{"name":"patbuilder"}],"output":{"name":"pathbuilder"}}],[11,"qpath","","",86,{"inputs":[{"name":"patbuilder"}],"output":{"name":"qpathbuilder"}}],[11,"build_range","","",86,{"inputs":[{"name":"patbuilder"},{"name":"p"},{"name":"p"}],"output":{"name":"result"}}],[11,"range","","",86,{"inputs":[{"name":"patbuilder"}],"output":{"name":"exprbuilder"}}],[11,"tuple","","",86,{"inputs":[{"name":"patbuilder"}],"output":{"name":"pattuplebuilder"}}],[11,"invoke","","",86,{"inputs":[{"name":"patbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"invoke","","",86,null],[11,"invoke","","",87,{"inputs":[{"name":"patrangebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",88,{"inputs":[{"name":"patrangeexprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",89,{"inputs":[{"name":"patenumbuilder"},{"name":"path"}],"output":{"name":"patenumpathbuilder"}}],[11,"with_pats","","",90,{"inputs":[{"name":"patenumpathbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"pat","","",90,{"inputs":[{"name":"patenumpathbuilder"}],"output":{"name":"patbuilder"}}],[11,"with_ids","","",90,{"inputs":[{"name":"patenumpathbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"id","","",90,{"inputs":[{"name":"patenumpathbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"build","","",90,{"inputs":[{"name":"patenumpathbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",90,{"inputs":[{"name":"patenumpathbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",91,{"inputs":[{"name":"patstructbuilder"},{"name":"path"}],"output":{"name":"patstructpathbuilder"}}],[11,"with_field_pat","","",92,{"inputs":[{"name":"patstructpathbuilder"},{"name":"fieldpat"}],"output":{"name":"self"}}],[11,"with_pats","","",92,{"inputs":[{"name":"patstructpathbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"pat","","",92,{"inputs":[{"name":"patstructpathbuilder"},{"name":"i"}],"output":{"name":"patbuilder"}}],[11,"with_ids","","",92,{"inputs":[{"name":"patstructpathbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"mut_id","","",92,{"inputs":[{"name":"patstructpathbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"id","","",92,{"inputs":[{"name":"patstructpathbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"etc","","",92,{"inputs":[{"name":"patstructpathbuilder"}],"output":{"name":"result"}}],[11,"build","","",92,{"inputs":[{"name":"patstructpathbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",93,{"inputs":[{"name":"patstructfieldbuilder"},{"name":"p"}],"output":{"name":"patstructpathbuilder"}}],[11,"invoke","","",94,{"inputs":[{"name":"patexprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"with_pats","","",95,{"inputs":[{"name":"pattuplebuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_pat","","",95,{"inputs":[{"name":"pattuplebuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"pat","","",95,{"inputs":[{"name":"pattuplebuilder"}],"output":{"name":"patbuilder"}}],[11,"build","","",95,{"inputs":[{"name":"pattuplebuilder"}],"output":{"name":"result"}}],[11,"invoke","","",95,{"inputs":[{"name":"pattuplebuilder"},{"name":"p"}],"output":{"name":"self"}}],[0,"path","aster","",null,null],[3,"PathBuilder","aster::path","",null,null],[3,"PathSegmentsBuilder","","",null,null],[3,"PathSegmentBuilder","","",null,null],[3,"TypeBindingBuilder","","",null,null],[8,"IntoPath","","",null,null],[10,"into_path","","",96,{"inputs":[{"name":"intopath"}],"output":{"name":"path"}}],[11,"into_path","syntax::ast","",97,{"inputs":[{"name":"path"}],"output":{"name":"path"}}],[11,"into_path","","",51,{"inputs":[{"name":"ident"}],"output":{"name":"path"}}],[11,"into_path","collections::string","",53,{"inputs":[{"name":"string"}],"output":{"name":"path"}}],[11,"new","aster::path","",98,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",98,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",98,{"inputs":[{"name":"pathbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"span","","Update the span to start from this location.",98,{"inputs":[{"name":"pathbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"global","","",98,{"inputs":[{"name":"pathbuilder"}],"output":{"name":"self"}}],[11,"ids","","",98,{"inputs":[{"name":"pathbuilder"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",98,{"inputs":[{"name":"pathbuilder"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",98,{"inputs":[{"name":"pathbuilder"},{"name":"i"}],"output":{"name":"pathsegmentbuilder"}}],[11,"ids","","",99,{"inputs":[{"name":"pathsegmentsbuilder"},{"name":"i"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"id","","",99,{"inputs":[{"name":"pathsegmentsbuilder"},{"name":"t"}],"output":{"name":"pathsegmentsbuilder"}}],[11,"segment","","",99,{"inputs":[{"name":"pathsegmentsbuilder"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"build","","",99,{"inputs":[{"name":"pathsegmentsbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",99,{"inputs":[{"name":"pathsegmentsbuilder"},{"name":"pathsegment"}],"output":{"name":"self"}}],[11,"with_callback","","",100,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_generics","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_lifetime","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"n"}],"output":{"name":"self"}}],[11,"with_tys","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"ty","","",100,{"inputs":[{"name":"pathsegmentbuilder"}],"output":{"name":"tybuilder"}}],[11,"with_binding","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"typebinding"}],"output":{"name":"self"}}],[11,"binding","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"t"}],"output":{"name":"tybuilder"}}],[11,"build","","",100,{"inputs":[{"name":"pathsegmentbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",100,{"inputs":[{"name":"pathsegmentbuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",101,{"inputs":[{"name":"typebindingbuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"qpath","aster","",null,null],[3,"QPathBuilder","aster::qpath","",null,null],[3,"QPathTyBuilder","","",null,null],[3,"QPathQSelfBuilder","","",null,null],[11,"new","","",102,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","Construct a `QPathBuilder` that will call the `callback` with a constructed `ast::QSelf`\nand `ast::Path`.",102,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","Update the span to start from this location.",102,{"inputs":[{"name":"qpathbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_ty","","Build a qualified path first by starting with a type builder.",102,{"inputs":[{"name":"qpathbuilder"},{"name":"p"}],"output":{"name":"qpathtybuilder"}}],[11,"ty","","Build a qualified path first by starting with a type builder.",102,{"inputs":[{"name":"qpathbuilder"}],"output":{"name":"tybuilder"}}],[11,"build","","Build a qualified path with a concrete type and path.",102,{"inputs":[{"name":"qpathbuilder"},{"name":"qself"},{"name":"path"}],"output":{"name":"result"}}],[11,"invoke","","",102,{"inputs":[{"name":"qpathbuilder"},{"name":"p"}],"output":{"name":"qpathtybuilder"}}],[11,"as_","","Build a qualified path with a path builder.",103,{"inputs":[{"name":"qpathtybuilder"}],"output":{"name":"pathbuilder"}}],[11,"id","","",103,{"inputs":[{"name":"qpathtybuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"segment","","",103,{"inputs":[{"name":"qpathtybuilder"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",103,{"inputs":[{"name":"qpathtybuilder"},{"name":"path"}],"output":{"name":"qpathqselfbuilder"}}],[11,"id","","",104,{"inputs":[{"name":"qpathqselfbuilder"},{"name":"t"}],"output":{"name":"result"}}],[11,"segment","","",104,{"inputs":[{"name":"qpathqselfbuilder"},{"name":"t"}],"output":{"name":"pathsegmentbuilder"}}],[11,"invoke","","",104,{"inputs":[{"name":"qpathqselfbuilder"},{"name":"pathsegment"}],"output":{"name":"result"}}],[0,"stmt","aster","",null,null],[3,"StmtBuilder","aster::stmt","",null,null],[3,"StmtLetIdBuilder","","",null,null],[3,"StmtExprBuilder","","",null,null],[3,"StmtSemiBuilder","","",null,null],[3,"StmtLetBuilder","","",null,null],[3,"StmtLetTyBuilder","","",null,null],[3,"StmtItemBuilder","","",null,null],[11,"new","","",105,{"inputs":[],"output":{"name":"stmtbuilder"}}],[11,"with_callback","","",105,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",105,{"inputs":[{"name":"stmtbuilder"},{"name":"stmt"}],"output":{"name":"result"}}],[11,"span","","",105,{"inputs":[{"name":"stmtbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"build_stmt_kind","","",105,{"inputs":[{"name":"stmtbuilder"},{"name":"stmtkind"}],"output":{"name":"result"}}],[11,"build_let","","",105,{"inputs":[{"name":"stmtbuilder"},{"name":"p"},{"name":"option"},{"name":"option"}],"output":{"name":"result"}}],[11,"let_","","",105,{"inputs":[{"name":"stmtbuilder"}],"output":{"name":"patbuilder"}}],[11,"let_id","","",105,{"inputs":[{"name":"stmtbuilder"},{"name":"i"}],"output":{"name":"exprbuilder"}}],[11,"build_expr","","",105,{"inputs":[{"name":"stmtbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"expr","","",105,{"inputs":[{"name":"stmtbuilder"}],"output":{"name":"exprbuilder"}}],[11,"semi","","",105,{"inputs":[{"name":"stmtbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build_item","","",105,{"inputs":[{"name":"stmtbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"item","","",105,{"inputs":[{"name":"stmtbuilder"}],"output":{"name":"itembuilder"}}],[11,"invoke","","",105,{"inputs":[{"name":"stmtbuilder"},{"name":"p"}],"output":{"name":"stmtletbuilder"}}],[11,"invoke","","",106,{"inputs":[{"name":"stmtletidbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",107,{"inputs":[{"name":"stmtexprbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",108,{"inputs":[{"name":"stmtsemibuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"ty","","",109,{"inputs":[{"name":"stmtletbuilder"}],"output":{"name":"tybuilder"}}],[11,"build_expr","","",109,{"inputs":[{"name":"stmtletbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"expr","","",109,{"inputs":[{"name":"stmtletbuilder"}],"output":{"name":"exprbuilder"}}],[11,"build","","",109,{"inputs":[{"name":"stmtletbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",109,{"inputs":[{"name":"stmtletbuilder"},{"name":"p"}],"output":{"name":"stmtlettybuilder"}}],[11,"invoke","","",109,{"inputs":[{"name":"stmtletbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"expr","","",110,{"inputs":[{"name":"stmtlettybuilder"}],"output":{"name":"exprbuilder"}}],[11,"build","","",110,{"inputs":[{"name":"stmtlettybuilder"}],"output":{"name":"result"}}],[11,"invoke","","",110,{"inputs":[{"name":"stmtlettybuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",111,{"inputs":[{"name":"stmtitembuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"str","aster","",null,null],[8,"ToInternedString","aster::str","",null,null],[10,"to_interned_string","","",112,{"inputs":[{"name":"tointernedstring"}],"output":{"name":"internedstring"}}],[11,"to_interned_string","syntax::parse::token","",113,{"inputs":[{"name":"internedstring"}],"output":{"name":"internedstring"}}],[11,"to_interned_string","syntax::ast","",51,{"inputs":[{"name":"ident"}],"output":{"name":"internedstring"}}],[11,"to_interned_string","","",52,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[0,"struct_field","aster","",null,null],[3,"StructFieldBuilder","aster::struct_field","",null,null],[11,"named","","",114,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unnamed","","",114,{"inputs":[],"output":{"name":"self"}}],[11,"named_with_callback","","",114,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"unnamed_with_callback","","",114,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",114,{"inputs":[{"name":"structfieldbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"pub_","","",114,{"inputs":[{"name":"structfieldbuilder"}],"output":{"name":"self"}}],[11,"with_attrs","","",114,{"inputs":[{"name":"structfieldbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"attr","","",114,{"inputs":[{"name":"structfieldbuilder"}],"output":{"name":"attrbuilder"}}],[11,"build_ty","","",114,{"inputs":[{"name":"structfieldbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"ty","","",114,{"inputs":[{"name":"structfieldbuilder"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",114,{"inputs":[{"name":"structfieldbuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"invoke","","",114,{"inputs":[{"name":"structfieldbuilder"},{"name":"p"}],"output":{"name":"result"}}],[0,"ty","aster","",null,null],[3,"TyBuilder","aster::ty","",null,null],[3,"TyPathBuilder","","",null,null],[3,"TyQPathBuilder","","",null,null],[3,"TySliceBuilder","","",null,null],[3,"TyRefBuilder","","",null,null],[3,"TyOptionBuilder","","",null,null],[3,"TyResultOkBuilder","","",null,null],[3,"TyResultErrBuilder","","",null,null],[3,"TyPhantomDataBuilder","","",null,null],[3,"TyBoxBuilder","","",null,null],[3,"TyIteratorBuilder","","",null,null],[3,"TyObjectSumBuilder","","",null,null],[3,"TyObjectSumTyBuilder","","",null,null],[3,"TyTupleBuilder","","",null,null],[11,"new","","",115,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",115,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"build","","",115,{"inputs":[{"name":"tybuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"span","","",115,{"inputs":[{"name":"tybuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"build_ty_kind","","",115,{"inputs":[{"name":"tybuilder"},{"name":"tykind"}],"output":{"name":"result"}}],[11,"id","","",115,{"inputs":[{"name":"tybuilder"},{"name":"i"}],"output":{"name":"result"}}],[11,"build_path","","",115,{"inputs":[{"name":"tybuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"build_qpath","","",115,{"inputs":[{"name":"tybuilder"},{"name":"qself"},{"name":"path"}],"output":{"name":"result"}}],[11,"path","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"pathbuilder"}}],[11,"qpath","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"qpathbuilder"}}],[11,"isize","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"i8","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"i16","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"i32","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"i64","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"usize","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"u8","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"u16","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"u32","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"u64","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"f32","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"f64","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"bool","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"unit","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"tuple","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"tytuplebuilder"}}],[11,"build_slice","","",115,{"inputs":[{"name":"tybuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"slice","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"tybuilder"}}],[11,"ref_","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"tyrefbuilder"}}],[11,"infer","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"result"}}],[11,"option","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"tybuilder"}}],[11,"result","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"tybuilder"}}],[11,"phantom_data","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"tybuilder"}}],[11,"box_","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"tybuilder"}}],[11,"iterator","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"tybuilder"}}],[11,"object_sum","","",115,{"inputs":[{"name":"tybuilder"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",116,{"inputs":[{"name":"typathbuilder"},{"name":"path"}],"output":{"name":"result"}}],[11,"invoke","","",117,null],[11,"invoke","","",118,{"inputs":[{"name":"tyslicebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"mut_","","",119,{"inputs":[{"name":"tyrefbuilder"}],"output":{"name":"self"}}],[11,"lifetime","","",119,{"inputs":[{"name":"tyrefbuilder"},{"name":"n"}],"output":{"name":"self"}}],[11,"build_ty","","",119,{"inputs":[{"name":"tyrefbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"ty","","",119,{"inputs":[{"name":"tyrefbuilder"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",119,{"inputs":[{"name":"tyrefbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",120,{"inputs":[{"name":"tyoptionbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",121,{"inputs":[{"name":"tyresultokbuilder"},{"name":"p"}],"output":{"name":"tybuilder"}}],[11,"invoke","","",122,{"inputs":[{"name":"tyresulterrbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",123,{"inputs":[{"name":"typhantomdatabuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",124,{"inputs":[{"name":"tyboxbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",125,{"inputs":[{"name":"tyiteratorbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",126,{"inputs":[{"name":"tyobjectsumbuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"with_bounds","","",127,{"inputs":[{"name":"tyobjectsumtybuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_bound","","",127,{"inputs":[{"name":"tyobjectsumtybuilder"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",127,{"inputs":[{"name":"tyobjectsumtybuilder"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_generics","","",127,{"inputs":[{"name":"tyobjectsumtybuilder"},{"name":"generics"}],"output":{"name":"self"}}],[11,"with_lifetimes","","",127,{"inputs":[{"name":"tyobjectsumtybuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"lifetime","","",127,{"inputs":[{"name":"tyobjectsumtybuilder"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",127,{"inputs":[{"name":"tyobjectsumtybuilder"}],"output":{"name":"result"}}],[11,"invoke","","",127,{"inputs":[{"name":"tyobjectsumtybuilder"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"with_tys","","",128,{"inputs":[{"name":"tytuplebuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_ty","","",128,{"inputs":[{"name":"tytuplebuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"ty","","",128,{"inputs":[{"name":"tytuplebuilder"}],"output":{"name":"tybuilder"}}],[11,"build","","",128,{"inputs":[{"name":"tytuplebuilder"}],"output":{"name":"result"}}],[11,"invoke","","",128,{"inputs":[{"name":"tytuplebuilder"},{"name":"p"}],"output":{"name":"self"}}],[0,"ty_param","aster","",null,null],[3,"TyParamBuilder","aster::ty_param","",null,null],[3,"TyParamBoundBuilder","","",null,null],[3,"TraitTyParamBoundBuilder","","",null,null],[3,"PolyTraitRefBuilder","","",null,null],[11,"new","","",129,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"from_ty_param","","",129,{"inputs":[{"name":"typaram"}],"output":{"name":"self"}}],[11,"with_callback","","",129,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"from_ty_param_with_callback","","",129,{"inputs":[{"name":"f"},{"name":"typaram"}],"output":{"name":"self"}}],[11,"span","","",129,{"inputs":[{"name":"typarambuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_default","","",129,{"inputs":[{"name":"typarambuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"default","","",129,{"inputs":[{"name":"typarambuilder"}],"output":{"name":"tybuilder"}}],[11,"with_bound","","",129,{"inputs":[{"name":"typarambuilder"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",129,{"inputs":[{"name":"typarambuilder"}],"output":{"name":"typaramboundbuilder"}}],[11,"with_trait_bound","","",129,{"inputs":[{"name":"typarambuilder"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"trait_bound","","",129,{"inputs":[{"name":"typarambuilder"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime_bound","","",129,{"inputs":[{"name":"typarambuilder"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",129,{"inputs":[{"name":"typarambuilder"}],"output":{"name":"result"}}],[11,"invoke","","",129,{"inputs":[{"name":"typarambuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",129,{"inputs":[{"name":"typarambuilder"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"invoke","","",129,{"inputs":[{"name":"typarambuilder"},{"name":"polytraitref"}],"output":{"name":"self"}}],[11,"new","","",130,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",130,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",130,{"inputs":[{"name":"typaramboundbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"build_trait","","",130,{"inputs":[{"name":"typaramboundbuilder"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":{"name":"result"}}],[11,"trait_","","",130,{"inputs":[{"name":"typaramboundbuilder"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"maybe_trait","","",130,{"inputs":[{"name":"typaramboundbuilder"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",130,{"inputs":[{"name":"typaramboundbuilder"},{"name":"l"}],"output":{"name":"result"}}],[11,"invoke","","",131,{"inputs":[{"name":"traittyparamboundbuilder"},{"name":"polytraitref"}],"output":{"name":"result"}}],[11,"with_callback","","",132,{"inputs":[{"name":"p"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",132,{"inputs":[{"name":"polytraitrefbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"with_lifetime","","",132,{"inputs":[{"name":"polytraitrefbuilder"},{"name":"l"}],"output":{"name":"self"}}],[11,"lifetime","","",132,{"inputs":[{"name":"polytraitrefbuilder"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"build","","",132,{"inputs":[{"name":"polytraitrefbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",132,{"inputs":[{"name":"polytraitrefbuilder"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[0,"variant","aster","",null,null],[3,"VariantBuilder","aster::variant","",null,null],[11,"new","","",133,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"with_callback","","",133,{"inputs":[{"name":"t"},{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",133,{"inputs":[{"name":"variantbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"attr","","",133,{"inputs":[{"name":"variantbuilder"}],"output":{"name":"attrbuilder"}}],[11,"unit","","",133,{"inputs":[{"name":"variantbuilder"}],"output":{"name":"result"}}],[11,"tuple","","",133,{"inputs":[{"name":"variantbuilder"}],"output":{"name":"structfieldbuilder"}}],[11,"struct_","","",133,{"inputs":[{"name":"variantbuilder"}],"output":{"name":"variantdatastructbuilder"}}],[11,"build_variant_data","","",133,{"inputs":[{"name":"variantbuilder"},{"name":"variantdata"}],"output":{"name":"result"}}],[11,"build_variant_","","",133,{"inputs":[{"name":"variantbuilder"},{"name":"variant_"}],"output":{"name":"result"}}],[11,"build","","",133,{"inputs":[{"name":"variantbuilder"},{"name":"variant"}],"output":{"name":"result"}}],[11,"invoke","","",133,{"inputs":[{"name":"variantbuilder"},{"name":"attribute"}],"output":{"name":"self"}}],[11,"invoke","","",133,{"inputs":[{"name":"variantbuilder"},{"name":"variantdata"}],"output":{"name":"result"}}],[0,"variant_data","aster","",null,null],[3,"VariantDataBuilder","aster::variant_data","",null,null],[3,"VariantDataTupleBuilder","","",null,null],[3,"VariantDataStructBuilder","","",null,null],[11,"new","","",134,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",134,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",134,{"inputs":[{"name":"variantdatabuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"tuple","","",134,{"inputs":[{"name":"variantdatabuilder"}],"output":{"name":"structfieldbuilder"}}],[11,"struct_","","",134,{"inputs":[{"name":"variantdatabuilder"}],"output":{"name":"variantdatastructbuilder"}}],[11,"unit","","",134,{"inputs":[{"name":"variantdatabuilder"}],"output":{"name":"result"}}],[11,"with_fields","","",135,{"inputs":[{"name":"variantdatatuplebuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_field","","",135,{"inputs":[{"name":"variantdatatuplebuilder"},{"name":"structfield"}],"output":{"name":"self"}}],[11,"field","","",135,{"inputs":[{"name":"variantdatatuplebuilder"}],"output":{"name":"structfieldbuilder"}}],[11,"with_ty","","",135,{"inputs":[{"name":"variantdatatuplebuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"ty","","",135,{"inputs":[{"name":"variantdatatuplebuilder"}],"output":{"name":"tybuilder"}}],[11,"build","","",135,{"inputs":[{"name":"variantdatatuplebuilder"}],"output":{"name":"result"}}],[11,"invoke","","",135,{"inputs":[{"name":"variantdatatuplebuilder"},{"name":"p"}],"output":{"name":"self"}}],[11,"invoke","","",135,{"inputs":[{"name":"variantdatatuplebuilder"},{"name":"structfield"}],"output":{"name":"self"}}],[11,"with_fields","","",136,{"inputs":[{"name":"variantdatastructbuilder"},{"name":"i"}],"output":{"name":"self"}}],[11,"with_field","","",136,{"inputs":[{"name":"variantdatastructbuilder"},{"name":"structfield"}],"output":{"name":"self"}}],[11,"field","","",136,{"inputs":[{"name":"variantdatastructbuilder"},{"name":"t"}],"output":{"name":"structfieldbuilder"}}],[11,"build","","",136,{"inputs":[{"name":"variantdatastructbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",136,{"inputs":[{"name":"variantdatastructbuilder"},{"name":"structfield"}],"output":{"name":"self"}}],[0,"where_predicate","aster","",null,null],[3,"WherePredicateBuilder","aster::where_predicate","",null,null],[3,"WhereBoundPredicateBuilder","","",null,null],[3,"WhereBoundPredicateTyBuilder","","",null,null],[3,"WhereBoundPredicateTyBoundsBuilder","","",null,null],[3,"WhereRegionPredicateBuilder","","",null,null],[3,"WhereEqPredicateBuilder","","",null,null],[11,"new","","",137,{"inputs":[],"output":{"name":"self"}}],[11,"with_callback","","",137,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"span","","",137,{"inputs":[{"name":"wherepredicatebuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"bound","","",137,{"inputs":[{"name":"wherepredicatebuilder"}],"output":{"name":"tybuilder"}}],[11,"lifetime","","",137,{"inputs":[{"name":"wherepredicatebuilder"},{"name":"l"}],"output":{"name":"whereregionpredicatebuilder"}}],[11,"eq","","",137,{"inputs":[{"name":"wherepredicatebuilder"},{"name":"p"}],"output":{"name":"whereeqpredicatebuilder"}}],[11,"invoke","","",137,{"inputs":[{"name":"wherepredicatebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",138,{"inputs":[{"name":"whereboundpredicatebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"with_for_lifetime","","",139,{"inputs":[{"name":"whereboundpredicatetybuilder"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",139,{"inputs":[{"name":"whereboundpredicatetybuilder"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",139,{"inputs":[{"name":"whereboundpredicatetybuilder"},{"name":"typarambound"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"bound","","",139,{"inputs":[{"name":"whereboundpredicatetybuilder"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",139,{"inputs":[{"name":"whereboundpredicatetybuilder"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",139,{"inputs":[{"name":"whereboundpredicatetybuilder"},{"name":"l"}],"output":{"name":"whereboundpredicatetyboundsbuilder"}}],[11,"invoke","","",139,{"inputs":[{"name":"whereboundpredicatetybuilder"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",139,{"inputs":[{"name":"whereboundpredicatetybuilder"},{"name":"typarambound"}],"output":{"name":"result"}}],[11,"with_for_lifetime","","",140,{"inputs":[{"name":"whereboundpredicatetyboundsbuilder"},{"name":"l"}],"output":{"name":"self"}}],[11,"for_lifetime","","",140,{"inputs":[{"name":"whereboundpredicatetyboundsbuilder"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"with_bound","","",140,{"inputs":[{"name":"whereboundpredicatetyboundsbuilder"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",140,{"inputs":[{"name":"whereboundpredicatetyboundsbuilder"}],"output":{"name":"typaramboundbuilder"}}],[11,"trait_","","",140,{"inputs":[{"name":"whereboundpredicatetyboundsbuilder"},{"name":"p"}],"output":{"name":"polytraitrefbuilder"}}],[11,"lifetime","","",140,{"inputs":[{"name":"whereboundpredicatetyboundsbuilder"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",140,{"inputs":[{"name":"whereboundpredicatetyboundsbuilder"}],"output":{"name":"result"}}],[11,"invoke","","",140,{"inputs":[{"name":"whereboundpredicatetyboundsbuilder"},{"name":"lifetimedef"}],"output":{"name":"self"}}],[11,"invoke","","",140,{"inputs":[{"name":"whereboundpredicatetyboundsbuilder"},{"name":"typarambound"}],"output":{"name":"self"}}],[11,"bound","","",141,{"inputs":[{"name":"whereregionpredicatebuilder"},{"name":"l"}],"output":{"name":"self"}}],[11,"build","","",141,{"inputs":[{"name":"whereregionpredicatebuilder"}],"output":{"name":"result"}}],[11,"ty","","",142,{"inputs":[{"name":"whereeqpredicatebuilder"}],"output":{"name":"tybuilder"}}],[11,"build_ty","","",142,{"inputs":[{"name":"whereeqpredicatebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"invoke","","",142,{"inputs":[{"name":"whereeqpredicatebuilder"},{"name":"p"}],"output":{"name":"result"}}],[11,"clone","aster","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"astbuilder"}}],[11,"new","","",143,{"inputs":[],"output":{"name":"astbuilder"}}],[11,"span","","",143,{"inputs":[{"name":"astbuilder"},{"name":"span"}],"output":{"name":"self"}}],[11,"interned_string","","",143,{"inputs":[{"name":"astbuilder"},{"name":"s"}],"output":{"name":"internedstring"}}],[11,"id","","",143,{"inputs":[{"name":"astbuilder"},{"name":"i"}],"output":{"name":"ident"}}],[11,"name","","",143,{"inputs":[{"name":"astbuilder"},{"name":"n"}],"output":{"name":"name"}}],[11,"lifetime","","",143,{"inputs":[{"name":"astbuilder"},{"name":"l"}],"output":{"name":"lifetime"}}],[11,"arm","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"armbuilder"}}],[11,"attr","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"attrbuilder"}}],[11,"path","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"pathbuilder"}}],[11,"qpath","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"qpathbuilder"}}],[11,"ty","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"tybuilder"}}],[11,"lifetime_def","","",143,{"inputs":[{"name":"astbuilder"},{"name":"n"}],"output":{"name":"lifetimedefbuilder"}}],[11,"ty_param","","",143,{"inputs":[{"name":"astbuilder"},{"name":"i"}],"output":{"name":"typarambuilder"}}],[11,"ty_param_bound","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"typaramboundbuilder"}}],[11,"from_ty_param","","",143,{"inputs":[{"name":"astbuilder"},{"name":"typaram"}],"output":{"name":"typarambuilder"}}],[11,"generics","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"genericsbuilder"}}],[11,"where_predicate","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"wherepredicatebuilder"}}],[11,"from_generics","","",143,{"inputs":[{"name":"astbuilder"},{"name":"generics"}],"output":{"name":"genericsbuilder"}}],[11,"lit","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"litbuilder"}}],[11,"expr","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"exprbuilder"}}],[11,"stmt","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"stmtbuilder"}}],[11,"block","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"blockbuilder"}}],[11,"pat","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"patbuilder"}}],[11,"fn_decl","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"fndeclbuilder"}}],[11,"method_sig","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"methodsigbuilder"}}],[11,"self_","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"selfbuilder"}}],[11,"arg","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"argbuilder"}}],[11,"variant_data","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"variantdatabuilder"}}],[11,"variant","","",143,{"inputs":[{"name":"astbuilder"},{"name":"t"}],"output":{"name":"variantbuilder"}}],[11,"struct_field","","",143,{"inputs":[{"name":"astbuilder"},{"name":"t"}],"output":{"name":"structfieldbuilder"}}],[11,"tuple_field","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"structfieldbuilder"}}],[11,"item","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"itembuilder"}}],[11,"trait_item","","",143,{"inputs":[{"name":"astbuilder"},{"name":"t"}],"output":{"name":"itemtraititembuilder"}}],[11,"impl_item","","",143,{"inputs":[{"name":"astbuilder"},{"name":"t"}],"output":{"name":"itemimplitembuilder"}}],[11,"const_","","",143,{"inputs":[{"name":"astbuilder"}],"output":{"name":"constbuilder"}}]],"paths":[[3,"ArmBuilder"],[3,"ArmPatBuilder"],[3,"ArmBodyBuilder"],[3,"AttrBuilder"],[3,"AttrListBuilder"],[3,"AttrNameValueBuilder"],[3,"BlockBuilder"],[3,"Const"],[3,"ConstBuilder"],[3,"ExprBuilder"],[3,"ExprUnaryBuilder"],[3,"ExprBinaryLhsBuilder"],[3,"ExprBinaryRhsBuilder"],[3,"ExprReturnBuilder"],[3,"ExprTupleBuilder"],[3,"ExprStructBuilder"],[3,"ExprStructPathBuilder"],[3,"ExprStructFieldBuilder"],[3,"ExprCallBuilder"],[3,"ExprCallArgsBuilder"],[3,"ExprMethodCallBuilder"],[3,"ExprMethodCallArgsBuilder"],[3,"ExprRefBuilder"],[3,"ExprPathBuilder"],[3,"ExprAssignBuilder"],[3,"ExprAssignLhsBuilder"],[3,"ExprAssignOpBuilder"],[3,"ExprAssignOpLhsBuilder"],[3,"ExprIndexBuilder"],[3,"ExprIndexLhsBuilder"],[3,"ExprRepeatBuilder"],[3,"ExprRepeatLhsBuilder"],[3,"ExprLoopBuilder"],[3,"ExprIfBuilder"],[3,"ExprIfThenBuilder"],[3,"ExprIfThenElseBuilder"],[3,"ExprElseIfBuilder"],[3,"ExprElseIfThenBuilder"],[3,"ExprMatchBuilder"],[3,"ExprMatchArmBuilder"],[3,"ExprParenBuilder"],[3,"ExprFieldBuilder"],[3,"ExprTupFieldBuilder"],[3,"ExprSliceBuilder"],[3,"ExprVecBuilder"],[3,"ExprTryBuilder"],[3,"FnDeclBuilder"],[3,"ArgBuilder"],[3,"ArgPatBuilder"],[3,"GenericsBuilder"],[8,"ToIdent"],[3,"Ident"],[3,"Name"],[3,"String"],[8,"Invoke"],[3,"Identity"],[3,"ItemBuilder"],[3,"ItemFnDeclBuilder"],[3,"ItemFnBuilder"],[3,"ItemUseBuilder"],[3,"ItemUsePathBuilder"],[3,"ItemUsePathListBuilder"],[3,"ItemStructBuilder"],[3,"ItemTupleStructBuilder"],[3,"ItemEnumBuilder"],[3,"ItemExternCrateBuilder"],[3,"ItemMacBuilder"],[3,"ItemTyBuilder"],[3,"ItemTraitBuilder"],[3,"ItemTraitItemBuilder"],[3,"ItemTraitMethodBuilder"],[3,"ItemTraitTypeBuilder"],[3,"ItemImplBuilder"],[3,"ItemImplItemBuilder"],[3,"ItemImplMethodBuilder"],[3,"ItemConstBuilder"],[8,"IntoLifetime"],[8,"IntoLifetimeDef"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"LifetimeDefBuilder"],[3,"LitBuilder"],[3,"MacBuilder"],[3,"MethodSigBuilder"],[3,"SelfBuilder"],[8,"ToName"],[3,"PatBuilder"],[3,"PatRangeBuilder"],[3,"PatRangeExprBuilder"],[3,"PatEnumBuilder"],[3,"PatEnumPathBuilder"],[3,"PatStructBuilder"],[3,"PatStructPathBuilder"],[3,"PatStructFieldBuilder"],[3,"PatExprBuilder"],[3,"PatTupleBuilder"],[8,"IntoPath"],[3,"Path"],[3,"PathBuilder"],[3,"PathSegmentsBuilder"],[3,"PathSegmentBuilder"],[3,"TypeBindingBuilder"],[3,"QPathBuilder"],[3,"QPathTyBuilder"],[3,"QPathQSelfBuilder"],[3,"StmtBuilder"],[3,"StmtLetIdBuilder"],[3,"StmtExprBuilder"],[3,"StmtSemiBuilder"],[3,"StmtLetBuilder"],[3,"StmtLetTyBuilder"],[3,"StmtItemBuilder"],[8,"ToInternedString"],[3,"InternedString"],[3,"StructFieldBuilder"],[3,"TyBuilder"],[3,"TyPathBuilder"],[3,"TyQPathBuilder"],[3,"TySliceBuilder"],[3,"TyRefBuilder"],[3,"TyOptionBuilder"],[3,"TyResultOkBuilder"],[3,"TyResultErrBuilder"],[3,"TyPhantomDataBuilder"],[3,"TyBoxBuilder"],[3,"TyIteratorBuilder"],[3,"TyObjectSumBuilder"],[3,"TyObjectSumTyBuilder"],[3,"TyTupleBuilder"],[3,"TyParamBuilder"],[3,"TyParamBoundBuilder"],[3,"TraitTyParamBoundBuilder"],[3,"PolyTraitRefBuilder"],[3,"VariantBuilder"],[3,"VariantDataBuilder"],[3,"VariantDataTupleBuilder"],[3,"VariantDataStructBuilder"],[3,"WherePredicateBuilder"],[3,"WhereBoundPredicateBuilder"],[3,"WhereBoundPredicateTyBuilder"],[3,"WhereBoundPredicateTyBoundsBuilder"],[3,"WhereRegionPredicateBuilder"],[3,"WhereEqPredicateBuilder"],[3,"AstBuilder"]]};
searchIndex["quasi"] = {"doc":"","items":[[3,"IterWrapper","quasi","",null,null],[3,"ZipLockstep","","",null,null],[5,"parse_expr_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[8,"ToTokens","","",null,null],[10,"to_tokens","","",0,{"inputs":[{"name":"totokens"},{"name":"extctxt"}],"output":{"name":"vec"}}],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",1,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_expr","","",1,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"p"}}],[10,"parse_stmt","","",1,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"stmt"}}],[10,"parse_tts","","",1,{"inputs":[{"name":"extparseutils"},{"name":"string"}],"output":{"name":"vec"}}],[8,"IntoWrappedIterator","","",null,null],[16,"Item","","",2,null],[16,"IntoIter","","",2,null],[10,"into_wrappable_iter","","",2,{"inputs":[{"name":"intowrappediterator"}],"output":{"name":"intoiter"}}],[11,"into_wrapped_iter","","",2,{"inputs":[{"name":"intowrappediterator"}],"output":{"name":"iterwrapper"}}],[8,"IntoWrappedRepeat","","",null,null],[16,"Item","","",3,null],[16,"IntoIter","","",3,null],[10,"into_wrappable_iter","","",3,{"inputs":[{"name":"intowrappedrepeat"}],"output":{"name":"intoiter"}}],[11,"into_wrapped_iter","","",3,{"inputs":[{"name":"intowrappedrepeat"}],"output":{"name":"iterwrapper"}}],[11,"to_tokens","syntax::ast","",4,{"inputs":[{"name":"tokentree"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","collections::vec","",5,{"inputs":[{"name":"vec"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::codemap","",6,{"inputs":[{"name":"spanned"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","core::option","",7,{"inputs":[{"name":"option"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",8,{"inputs":[{"name":"ident"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",9,{"inputs":[{"name":"path"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",10,{"inputs":[{"name":"ty"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",12,{"inputs":[{"name":"generics"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",13,{"inputs":[{"name":"whereclause"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","quasi","",14,{"inputs":[{"name":"stmt"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ast","",15,{"inputs":[{"name":"arm"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","syntax::ptr","",11,{"inputs":[{"name":"p"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","quasi","",16,{"inputs":[{"name":"attribute"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"to_tokens","","",17,{"inputs":[{"name":"lit"},{"name":"extctxt"}],"output":{"name":"vec"}}],[11,"parse_item","syntax::ext::base","",18,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_stmt","","",18,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"stmt"}}],[11,"parse_expr","","",18,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"p"}}],[11,"parse_tts","","",18,{"inputs":[{"name":"extctxt"},{"name":"string"}],"output":{"name":"vec"}}],[11,"zip_wrap","quasi","",19,{"inputs":[{"name":"iterwrapper"},{"name":"iterwrapper"}],"output":{"name":"iterwrapper"}}],[11,"check","","",19,{"inputs":[{"name":"iterwrapper"},{"name":"bool"}],"output":{"name":"self"}}],[11,"next","","",19,{"inputs":[{"name":"iterwrapper"}],"output":{"name":"option"}}],[11,"size_hint","","",19,null],[11,"next","","",20,{"inputs":[{"name":"ziplockstep"}],"output":{"name":"option"}}],[11,"size_hint","","",20,null],[11,"into_wrappable_iter","syntax::codemap","",6,{"inputs":[{"name":"spanned"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","syntax::ast","",4,{"inputs":[{"name":"tokentree"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",8,{"inputs":[{"name":"ident"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",9,{"inputs":[{"name":"path"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",10,{"inputs":[{"name":"ty"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","syntax::ptr","",11,{"inputs":[{"name":"p"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",11,{"inputs":[{"name":"p"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",11,{"inputs":[{"name":"p"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",11,{"inputs":[{"name":"p"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",11,{"inputs":[{"name":"p"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","syntax::ast","",12,{"inputs":[{"name":"generics"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",13,{"inputs":[{"name":"whereclause"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",21,{"inputs":[{"name":"stmtkind"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","syntax::ptr","",11,{"inputs":[{"name":"p"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",11,{"inputs":[{"name":"p"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","syntax::ast","",15,{"inputs":[{"name":"arm"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","syntax::ptr","",11,{"inputs":[{"name":"p"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","syntax::ast","",22,{"inputs":[{"name":"attribute_"}],"output":{"name":"repeat"}}],[11,"into_wrappable_iter","","",23,{"inputs":[{"name":"litkind"}],"output":{"name":"repeat"}}]],"paths":[[8,"ToTokens"],[8,"ExtParseUtils"],[8,"IntoWrappedIterator"],[8,"IntoWrappedRepeat"],[4,"TokenTree"],[3,"Vec"],[3,"Spanned"],[4,"Option"],[3,"Ident"],[3,"Path"],[3,"Ty"],[3,"P"],[3,"Generics"],[3,"WhereClause"],[6,"Stmt"],[3,"Arm"],[6,"Attribute"],[6,"Lit"],[3,"ExtCtxt"],[3,"IterWrapper"],[3,"ZipLockstep"],[4,"StmtKind"],[3,"Attribute_"],[4,"LitKind"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",13,null],[12,"sa_family","","",13,null],[12,"sa_data","","",13,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",14,null],[12,"sin6_family","","",14,null],[12,"sin6_port","","",14,null],[12,"sin6_flowinfo","","",14,null],[12,"sin6_addr","","",14,null],[12,"sin6_scope_id","","",14,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",15,null],[12,"sun_family","","",15,null],[12,"sun_path","","",15,null],[3,"passwd","","",null,null],[12,"pw_name","","",16,null],[12,"pw_passwd","","",16,null],[12,"pw_uid","","",16,null],[12,"pw_gid","","",16,null],[12,"pw_change","","",16,null],[12,"pw_class","","",16,null],[12,"pw_gecos","","",16,null],[12,"pw_dir","","",16,null],[12,"pw_shell","","",16,null],[12,"pw_expire","","",16,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",17,null],[12,"ifa_name","","",17,null],[12,"ifa_flags","","",17,null],[12,"ifa_addr","","",17,null],[12,"ifa_netmask","","",17,null],[12,"ifa_dstaddr","","",17,null],[12,"ifa_data","","",17,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",18,null],[12,"tm_min","","",18,null],[12,"tm_hour","","",18,null],[12,"tm_mday","","",18,null],[12,"tm_mon","","",18,null],[12,"tm_year","","",18,null],[12,"tm_wday","","",18,null],[12,"tm_yday","","",18,null],[12,"tm_isdst","","",18,null],[12,"tm_gmtoff","","",18,null],[12,"tm_zone","","",18,null],[3,"utsname","","",null,null],[12,"sysname","","",19,null],[12,"nodename","","",19,null],[12,"release","","",19,null],[12,"version","","",19,null],[12,"machine","","",19,null],[3,"msghdr","","",null,null],[12,"msg_name","","",20,null],[12,"msg_namelen","","",20,null],[12,"msg_iov","","",20,null],[12,"msg_iovlen","","",20,null],[12,"msg_control","","",20,null],[12,"msg_controllen","","",20,null],[12,"msg_flags","","",20,null],[3,"fsid_t","","",null,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",21,null],[12,"gl_offs","","",21,null],[12,"gl_pathv","","",21,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",22,null],[12,"ss_family","","",22,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",23,null],[12,"ai_family","","",23,null],[12,"ai_socktype","","",23,null],[12,"ai_protocol","","",23,null],[12,"ai_addrlen","","",23,null],[12,"ai_canonname","","",23,null],[12,"ai_addr","","",23,null],[12,"ai_next","","",23,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",24,null],[12,"denom","","",24,null],[3,"stat","","",null,null],[12,"st_dev","","",25,null],[12,"st_mode","","",25,null],[12,"st_nlink","","",25,null],[12,"st_ino","","",25,null],[12,"st_uid","","",25,null],[12,"st_gid","","",25,null],[12,"st_rdev","","",25,null],[12,"st_atime","","",25,null],[12,"st_atime_nsec","","",25,null],[12,"st_mtime","","",25,null],[12,"st_mtime_nsec","","",25,null],[12,"st_ctime","","",25,null],[12,"st_ctime_nsec","","",25,null],[12,"st_birthtime","","",25,null],[12,"st_birthtime_nsec","","",25,null],[12,"st_size","","",25,null],[12,"st_blocks","","",25,null],[12,"st_blksize","","",25,null],[12,"st_flags","","",25,null],[12,"st_gen","","",25,null],[12,"st_lspare","","",25,null],[12,"st_qspare","","",25,null],[3,"dirent","","",null,null],[12,"d_ino","","",26,null],[12,"d_seekoff","","",26,null],[12,"d_reclen","","",26,null],[12,"d_namlen","","",26,null],[12,"d_type","","",26,null],[12,"d_name","","",26,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",27,null],[12,"si_errno","","",27,null],[12,"si_code","","",27,null],[12,"si_pid","","",27,null],[12,"si_uid","","",27,null],[12,"si_status","","",27,null],[12,"si_addr","","",27,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",28,null],[12,"sa_mask","","",28,null],[12,"sa_flags","","",28,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",29,null],[12,"ss_size","","",29,null],[12,"ss_flags","","",29,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",30,null],[12,"fst_posmode","","",30,null],[12,"fst_offset","","",30,null],[12,"fst_length","","",30,null],[12,"fst_bytesalloc","","",30,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",31,null],[12,"ra_count","","",31,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",32,null],[12,"f_frsize","","",32,null],[12,"f_blocks","","",32,null],[12,"f_bfree","","",32,null],[12,"f_bavail","","",32,null],[12,"f_files","","",32,null],[12,"f_ffree","","",32,null],[12,"f_favail","","",32,null],[12,"f_fsid","","",32,null],[12,"f_flag","","",32,null],[12,"f_namemax","","",32,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",33,null],[12,"dli_fbase","","",33,null],[12,"dli_sname","","",33,null],[12,"dli_saddr","","",33,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",34,null],[12,"sin_family","","",34,null],[12,"sin_port","","",34,null],[12,"sin_addr","","",34,null],[12,"sin_zero","","",34,null],[3,"statfs","","",null,null],[12,"f_bsize","","",35,null],[12,"f_iosize","","",35,null],[12,"f_blocks","","",35,null],[12,"f_bfree","","",35,null],[12,"f_bavail","","",35,null],[12,"f_files","","",35,null],[12,"f_ffree","","",35,null],[12,"f_fsid","","",35,null],[12,"f_owner","","",35,null],[12,"f_type","","",35,null],[12,"f_flags","","",35,null],[12,"f_fssubtype","","",35,null],[12,"f_fstypename","","",35,null],[12,"f_mntonname","","",35,null],[12,"f_mntfromname","","",35,null],[12,"f_reserved","","",35,null],[3,"kevent","","",null,null],[12,"ident","","",36,null],[12,"filter","","",36,null],[12,"flags","","",36,null],[12,"fflags","","",36,null],[12,"data","","",36,null],[12,"udata","","",36,null],[3,"kevent64_s","","",null,null],[12,"ident","","",37,null],[12,"filter","","",37,null],[12,"flags","","",37,null],[12,"fflags","","",37,null],[12,"data","","",37,null],[12,"udata","","",37,null],[12,"ext","","",37,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",38,null],[12,"dqb_bsoftlimit","","",38,null],[12,"dqb_curbytes","","",38,null],[12,"dqb_ihardlimit","","",38,null],[12,"dqb_isoftlimit","","",38,null],[12,"dqb_curinodes","","",38,null],[12,"dqb_btime","","",38,null],[12,"dqb_itime","","",38,null],[12,"dqb_id","","",38,null],[12,"dqb_spare","","",38,null],[3,"termios","","",null,null],[12,"c_iflag","","",39,null],[12,"c_oflag","","",39,null],[12,"c_cflag","","",39,null],[12,"c_lflag","","",39,null],[12,"c_cc","","",39,null],[12,"c_ispeed","","",39,null],[12,"c_ospeed","","",39,null],[3,"flock","","",null,null],[12,"l_start","","",40,null],[12,"l_len","","",40,null],[12,"l_pid","","",40,null],[12,"l_type","","",40,null],[12,"l_whence","","",40,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",41,null],[12,"hdr_cnt","","",41,null],[12,"trailers","","",41,null],[12,"trl_cnt","","",41,null],[3,"lconv","","",null,null],[12,"decimal_point","","",42,null],[12,"thousands_sep","","",42,null],[12,"grouping","","",42,null],[12,"int_curr_symbol","","",42,null],[12,"currency_symbol","","",42,null],[12,"mon_decimal_point","","",42,null],[12,"mon_thousands_sep","","",42,null],[12,"mon_grouping","","",42,null],[12,"positive_sign","","",42,null],[12,"negative_sign","","",42,null],[12,"int_frac_digits","","",42,null],[12,"frac_digits","","",42,null],[12,"p_cs_precedes","","",42,null],[12,"p_sep_by_space","","",42,null],[12,"n_cs_precedes","","",42,null],[12,"n_sep_by_space","","",42,null],[12,"p_sign_posn","","",42,null],[12,"n_sign_posn","","",42,null],[12,"int_p_cs_precedes","","",42,null],[12,"int_n_cs_precedes","","",42,null],[12,"int_p_sep_by_space","","",42,null],[12,"int_n_sep_by_space","","",42,null],[12,"int_p_sign_posn","","",42,null],[12,"int_n_sign_posn","","",42,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",43,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",43,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",43,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",43,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",43,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",43,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",43,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",43,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",43,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",43,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",43,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",43,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",43,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",43,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"option"}}],[11,"clone","","",43,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"eq","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"fmt","","",43,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",44,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",44,null],[11,"clone","libc","",45,{"inputs":[{"name":"pthread_attr_t"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",21,{"inputs":[{"name":"glob_t"}],"output":{"name":"glob_t"}}],[11,"clone","","",22,{"inputs":[{"name":"sockaddr_storage"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",23,{"inputs":[{"name":"addrinfo"}],"output":{"name":"addrinfo"}}],[11,"clone","","",24,{"inputs":[{"name":"mach_timebase_info"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",25,{"inputs":[{"name":"stat"}],"output":{"name":"stat"}}],[11,"clone","","",26,{"inputs":[{"name":"dirent"}],"output":{"name":"dirent"}}],[11,"clone","","",46,{"inputs":[{"name":"pthread_mutex_t"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",47,{"inputs":[{"name":"pthread_mutexattr_t"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",48,{"inputs":[{"name":"pthread_cond_t"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",49,{"inputs":[{"name":"pthread_rwlock_t"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",27,{"inputs":[{"name":"siginfo_t"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",28,{"inputs":[{"name":"sigaction"}],"output":{"name":"sigaction"}}],[11,"clone","","",29,{"inputs":[{"name":"stack_t"}],"output":{"name":"stack_t"}}],[11,"clone","","",30,{"inputs":[{"name":"fstore_t"}],"output":{"name":"fstore_t"}}],[11,"clone","","",31,{"inputs":[{"name":"radvisory"}],"output":{"name":"radvisory"}}],[11,"clone","","",32,{"inputs":[{"name":"statvfs"}],"output":{"name":"statvfs"}}],[11,"clone","","",33,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[11,"clone","","",34,{"inputs":[{"name":"sockaddr_in"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",35,{"inputs":[{"name":"statfs"}],"output":{"name":"statfs"}}],[11,"clone","","",36,{"inputs":[{"name":"kevent"}],"output":{"name":"kevent"}}],[11,"clone","","",37,{"inputs":[{"name":"kevent64_s"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",38,{"inputs":[{"name":"dqblk"}],"output":{"name":"dqblk"}}],[11,"clone","","",39,{"inputs":[{"name":"termios"}],"output":{"name":"termios"}}],[11,"clone","","",40,{"inputs":[{"name":"flock"}],"output":{"name":"flock"}}],[11,"clone","","",41,{"inputs":[{"name":"sf_hdtr"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",42,{"inputs":[{"name":"lconv"}],"output":{"name":"lconv"}}],[11,"clone","","",13,{"inputs":[{"name":"sockaddr"}],"output":{"name":"sockaddr"}}],[11,"clone","","",14,{"inputs":[{"name":"sockaddr_in6"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",15,{"inputs":[{"name":"sockaddr_un"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",16,{"inputs":[{"name":"passwd"}],"output":{"name":"passwd"}}],[11,"clone","","",17,{"inputs":[{"name":"ifaddrs"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",50,{"inputs":[{"name":"fd_set"}],"output":{"name":"fd_set"}}],[11,"clone","","",18,{"inputs":[{"name":"tm"}],"output":{"name":"tm"}}],[11,"clone","","",19,{"inputs":[{"name":"utsname"}],"output":{"name":"utsname"}}],[11,"clone","","",20,{"inputs":[{"name":"msghdr"}],"output":{"name":"msghdr"}}],[11,"clone","","",51,{"inputs":[{"name":"fsid_t"}],"output":{"name":"fsid_t"}}],[11,"clone","","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"hostent"}],"output":{"name":"hostent"}}],[11,"clone","","",10,{"inputs":[{"name":"iovec"}],"output":{"name":"iovec"}}],[11,"clone","","",11,{"inputs":[{"name":"pollfd"}],"output":{"name":"pollfd"}}],[11,"clone","","",12,{"inputs":[{"name":"winsize"}],"output":{"name":"winsize"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"CTL_HW","","",null,null],[17,"HW_NCPU","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_SYSCOUNT","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[4,"Option"],[8,"Clone"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_rwlock_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `b`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the bytes (`b`) flag was enabled.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"eq","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"ordering"}}],[11,"clone","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"limit_class","","Get the character class size limit for this set.",5,{"inputs":[{"name":"literals"}],"output":{"name":"usize"}}],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,{"inputs":[{"name":"literals"},{"name":"usize"}],"output":{"name":"literals"}}],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"any_complete","","Returns true if any member in this set is complete.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,{"inputs":[{"name":"literals"}],"output":{"name":"bool"}}],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,{"inputs":[{"name":"literals"}],"output":{"name":"literals"}}],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,{"inputs":[{"name":"literals"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"union","","Unions this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_product","","Extends this set with another set.",5,{"inputs":[{"name":"literals"},{"name":"literals"}],"output":{"name":"bool"}}],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,{"inputs":[{"name":"literals"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,{"inputs":[{"name":"literals"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,{"inputs":[{"name":"literals"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"reverse","","Reverses all members in place.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"clear","","Clears this set of all members.",5,{"inputs":[{"name":"literals"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"literals"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,{"inputs":[{"name":"lit"}],"output":{"name":"bool"}}],[11,"cut","","Cuts this literal.",6,{"inputs":[{"name":"lit"}],"output":null}],[11,"eq","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"lit"},{"name":"lit"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"lit"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"as_ref","","",6,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",7,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",7,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",7,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",7,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",7,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",7,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",7,{"inputs":[{"name":"vec"}],"output":{"name":"box"}}],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",7,null],[11,"as_slice","","Extracts a slice containing the entire vector.",7,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",7,null],[11,"set_len","","Sets the length of a vector.",7,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",7,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"retain","","Retains only the elements specified by the predicate.",7,null],[11,"push","","Appends an element to the back of a collection.",7,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",7,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",7,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",7,{"inputs":[{"name":"vec"},{"name":"r"}],"output":{"name":"drain"}}],[11,"clear","","Clears the vector, removing all values.",7,null],[11,"len","","Returns the number of elements in the vector.",7,{"inputs":[{"name":"vec"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns `true` if the vector contains no elements.",7,{"inputs":[{"name":"vec"}],"output":{"name":"bool"}}],[11,"split_off","","Splits the collection into two at the given index.",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"vec"}}],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",7,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",7,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",7,null],[11,"from","","",7,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","","",7,null],[11,"as_mut","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"as_ref","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"fmt","","",7,{"inputs":[{"name":"vec"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"vec"}}],[11,"drop","","",7,null],[11,"cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"option"}}],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"eq","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"extend","","",7,null],[11,"extend","","",7,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",7,{"inputs":[{"name":"vec"}],"output":{"name":"intoiter"}}],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"deref_mut","","",7,null],[11,"deref","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index","","",7,null],[11,"index_mut","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index","","",7,{"inputs":[{"name":"vec"},{"name":"usize"}],"output":{"name":"t"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[11,"clone_from","","",7,null],[11,"borrow_mut","","",7,null],[11,"borrow","","",7,null],[11,"from","","",7,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"deref","regex_syntax","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[11,"deref_mut","","",6,{"inputs":[{"name":"lit"}],"output":{"name":"vec"}}],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"eq","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"expr"},{"name":"expr"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"expr"}],"output":{"name":"expr"}}],[11,"eq","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"repeater"},{"name":"repeater"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"repeater"}],"output":{"name":"repeater"}}],[11,"eq","","",8,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"charclass"},{"name":"charclass"}],"output":{"name":"bool"}}],[11,"fmt","","",8,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"classrange"},{"name":"classrange"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"classrange"}],"output":{"name":"classrange"}}],[11,"eq","","",9,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"byteclass"},{"name":"byteclass"}],"output":{"name":"bool"}}],[11,"fmt","","",9,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"byterange"},{"name":"byterange"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"byterange"}],"output":{"name":"byterange"}}],[11,"fmt","","",10,{"inputs":[{"name":"exprbuilder"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"exprbuilder"}],"output":{"name":"exprbuilder"}}],[11,"new","","Create a new builder for configuring expression parsing.",10,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"allow_bytes","","Whether the Unicode flag can be used or not. By default, the flag is\nenabled but it cannot be toggled.",10,{"inputs":[{"name":"exprbuilder"},{"name":"bool"}],"output":{"name":"exprbuilder"}}],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",10,{"inputs":[{"name":"exprbuilder"},{"name":"usize"}],"output":{"name":"exprbuilder"}}],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",10,{"inputs":[{"name":"exprbuilder"},{"name":"str"}],"output":{"name":"result"}}],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,{"inputs":[{"name":"expr"}],"output":{"name":"literals"}}],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[11,"deref","","",8,{"inputs":[{"name":"charclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",8,{"inputs":[{"name":"charclass"}],"output":{"name":"intoiter"}}],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",8,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given character from the class if it exists.",8,{"inputs":[{"name":"charclass"},{"name":"char"}],"output":null}],[11,"negate","","Negates the character class.",8,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"case_fold","","Apply case folding to this character class.",8,{"inputs":[{"name":"charclass"}],"output":{"name":"charclass"}}],[11,"eq","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"classrange"},{"name":"char"}],"output":{"name":"option"}}],[11,"new","","Create a new class from an existing set of ranges.",9,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",9,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"remove","","Removes the given byte from the class if it exists.",9,{"inputs":[{"name":"byteclass"},{"name":"u8"}],"output":null}],[11,"negate","","Negates the byte class.",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"case_fold","","Apply case folding to this byte class.",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"byteclass"}}],[11,"deref","","",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"vec"}}],[11,"into_iter","","",9,{"inputs":[{"name":"byteclass"}],"output":{"name":"intoiter"}}],[11,"eq","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"byterange"},{"name":"u8"}],"output":{"name":"option"}}],[11,"fmt","","",2,{"inputs":[{"name":"expr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"repeater"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"charclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"classrange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",9,{"inputs":[{"name":"byteclass"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"byterange"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"error"},{"name":"error"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"eq","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"position","","Returns an approximate *character* offset at which the error occurred.",11,{"inputs":[{"name":"error"}],"output":{"name":"usize"}}],[11,"kind","","Returns the type of the regex parse error.",11,{"inputs":[{"name":"error"}],"output":{"name":"errorkind"}}],[11,"description","","",11,{"inputs":[{"name":"error"}],"output":{"name":"str"}}],[11,"fmt","","",11,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"Vec"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["quine_mc_cluskey"] = {"doc":"","items":[[3,"Essentials","quine_mc_cluskey","",null,null],[12,"minterms","","",0,null],[12,"essentials","","",0,null],[3,"Term","","",null,null],[4,"Bool","","",null,null],[13,"True","","",1,null],[13,"False","","",1,null],[13,"Term","","",1,null],[13,"And","","",1,null],[13,"Or","","",1,null],[13,"Not","","",1,null],[4,"TermFromStrError","","",null,null],[13,"Only32TermsSupported","","",2,null],[13,"UnsupportedCharacter","","",2,null],[5,"simplify_prime_implicant_expr","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"vec"}}],[5,"essential_minterms","","",null,{"inputs":[{"name":"vec"}],"output":{"name":"essentials"}}],[11,"clone","","",1,{"inputs":[{"name":"bool"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"bool"},{"name":"self"}],"output":{"name":"bool"}}],[11,"minterms","","",1,{"inputs":[{"name":"bool"}],"output":{"name":"vec"}}],[11,"simplify","","",1,{"inputs":[{"name":"bool"}],"output":{"name":"vec"}}],[11,"fmt","","",1,{"inputs":[{"name":"bool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"essentials"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"prime_implicant_expr","","",0,{"inputs":[{"name":"essentials"}],"output":{"name":"vec"}}],[11,"cmp","","",3,{"inputs":[{"name":"term"},{"name":"term"}],"output":{"name":"ordering"}}],[11,"clone","","",3,{"inputs":[{"name":"term"}],"output":{"name":"term"}}],[11,"partial_cmp","","",3,{"inputs":[{"name":"term"},{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",3,{"inputs":[{"name":"term"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"term"},{"name":"self"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"termfromstrerror"},{"name":"termfromstrerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"termfromstrerror"},{"name":"termfromstrerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"termfromstrerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","",3,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[11,"with_dontcare","","",3,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"self"}}],[11,"combine","","",3,{"inputs":[{"name":"term"},{"name":"term"}],"output":{"name":"option"}}],[11,"contains","","",3,{"inputs":[{"name":"term"},{"name":"self"}],"output":{"name":"bool"}}],[11,"to_bool_expr","","",3,{"inputs":[{"name":"term"},{"name":"u32"}],"output":{"name":"bool"}}]],"paths":[[3,"Essentials"],[4,"Bool"],[4,"TermFromStrError"],[3,"Term"]]};
searchIndex["nom"] = {"doc":"nom, eating data byte by byte","items":[[3,"ProducerRepeat","nom","ProducerRepeat takes a single value, and generates it at each step",null,null],[3,"MemProducer","","A MemProducer generates values from an in memory byte buffer",null,null],[3,"FileProducer","","",null,null],[3,"MapConsumer","","MapConsumer takes a function S -&gt; T and applies it on a consumer producing values of type S",null,null],[3,"ChainConsumer","","ChainConsumer takes a consumer C1 R -&gt; S, and a consumer C2 S -&gt; T, and makes a consumer R -&gt; T by applying C2 on C1&#39;s result",null,null],[4,"ErrorKind","","indicates which parser returned an error",null,null],[13,"Custom","","",0,null],[13,"Tag","","",0,null],[13,"MapRes","","",0,null],[13,"MapOpt","","",0,null],[13,"Alt","","",0,null],[13,"IsNot","","",0,null],[13,"IsA","","",0,null],[13,"SeparatedList","","",0,null],[13,"SeparatedNonEmptyList","","",0,null],[13,"Many1","","",0,null],[13,"Count","","",0,null],[13,"TakeUntilAndConsume","","",0,null],[13,"TakeUntil","","",0,null],[13,"TakeUntilEitherAndConsume","","",0,null],[13,"TakeUntilEither","","",0,null],[13,"LengthValue","","",0,null],[13,"TagClosure","","",0,null],[13,"Alpha","","",0,null],[13,"Digit","","",0,null],[13,"HexDigit","","",0,null],[13,"OctDigit","","",0,null],[13,"AlphaNumeric","","",0,null],[13,"Space","","",0,null],[13,"MultiSpace","","",0,null],[13,"LengthValueFn","","",0,null],[13,"Eof","","",0,null],[13,"ExprOpt","","",0,null],[13,"ExprRes","","",0,null],[13,"CondReduce","","",0,null],[13,"Switch","","",0,null],[13,"TagBits","","",0,null],[13,"OneOf","","",0,null],[13,"NoneOf","","",0,null],[13,"Char","","",0,null],[13,"CrLf","","",0,null],[13,"RegexpMatch","","",0,null],[13,"RegexpMatches","","",0,null],[13,"RegexpFind","","",0,null],[13,"RegexpCapture","","",0,null],[13,"RegexpCaptures","","",0,null],[13,"TakeWhile1","","",0,null],[13,"Complete","","",0,null],[13,"Fix","","",0,null],[13,"Escaped","","",0,null],[13,"EscapedTransform","","",0,null],[13,"TagStr","","",0,null],[13,"IsNotStr","","",0,null],[13,"IsAStr","","",0,null],[13,"TakeWhile1Str","","",0,null],[13,"NonEmpty","","",0,null],[13,"ManyMN","","",0,null],[13,"TakeUntilAndConsumeStr","","",0,null],[13,"TakeUntilStr","","",0,null],[4,"Err","","Contains the error that a parser can return",null,null],[13,"Code","","An error code, represented by an ErrorKind, which can contain a custom error code represented by E",1,null],[13,"Node","","An error code, and the next error",1,null],[13,"Position","","An error code, and the input position",1,null],[13,"NodePosition","","An error code, the input position and the next error",1,null],[4,"Needed","","Contains information on needed data if a parser returned `Incomplete`",null,null],[13,"Unknown","","needs more data, but we do not know how much",2,null],[13,"Size","","contains the required data size",2,null],[4,"IResult","","Holds the result of parsing functions",null,null],[13,"Done","","indicates a correct parsing, the first field containing the rest of the unparsed data, the second field contains the parsed data",3,null],[13,"Error","","contains a Err, an enum that can indicate an error code, a position in the input, and a pointer to another error, making a list of errors in the parsing tree",3,null],[13,"Incomplete","","Incomplete contains a Needed, an enum than can represent a known quantity of input data, or unknown",3,null],[4,"Input","","",null,null],[13,"Element","","",4,null],[13,"Empty","","",4,null],[13,"Eof","","",4,null],[4,"ConsumerState","","Stores a consumer&#39;s current computation state",null,null],[13,"Done","","A value of type O has been produced",5,null],[13,"Error","","An error of type E has been encountered",5,null],[13,"Continue","","Continue applying, and pass a message of type M to the data source",5,null],[4,"Move","","",null,null],[13,"Consume","","indcates how much data was consumed",6,null],[13,"Seek","","indicates where in the input the consumer must seek",6,null],[13,"Await","","indicates more data is needed",6,null],[4,"FileProducerState","","",null,null],[13,"Normal","","",7,null],[13,"Error","","",7,null],[13,"Eof","","",7,null],[5,"error_to_list","","",null,{"inputs":[{"name":"err"}],"output":{"name":"vec"}}],[5,"compare_error_paths","","",null,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[5,"add_error_pattern","","",null,{"inputs":[{"name":"hashmap"},{"name":"iresult"},{"name":"str"}],"output":{"name":"bool"}}],[5,"slice_to_offsets","","",null,null],[5,"prepare_errors","","",null,null],[5,"print_error","","",null,null],[5,"generate_colors","","",null,null],[5,"code_from_offset","","",null,null],[5,"reset_color","","",null,{"inputs":[{"name":"vec"}],"output":null}],[5,"write_color","","",null,{"inputs":[{"name":"vec"},{"name":"u8"}],"output":null}],[5,"print_codes","","",null,{"inputs":[{"name":"hashmap"},{"name":"hashmap"}],"output":{"name":"string"}}],[5,"print_offsets","","",null,null],[5,"error_to_u32","","",null,{"inputs":[{"name":"errorkind"}],"output":{"name":"u32"}}],[5,"tag_cl","","",null,null],[5,"print","","",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"begin","","",null,null],[5,"not_line_ending","","",null,null],[5,"line_ending","","Recognizes a line feed",null,null],[5,"is_alphabetic","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_hex_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_oct_digit","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_alphanumeric","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"is_space","","",null,{"inputs":[{"name":"u8"}],"output":{"name":"bool"}}],[5,"alpha","","Recognizes lowercase and uppercase alphabetic characters: a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"digit","","Recognizes numerical characters: 0-9",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"hex_digit","","Recognizes hexadecimal numerical characters: 0-9, A-F, a-f",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"oct_digit","","Recognizes octal characters: 0-7",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"alphanumeric","","Recognizes numerical and alphabetic characters: 0-9a-zA-Z",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"space","","Recognizes spaces and tabs",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"multispace","","Recognizes spaces, tabs, carriage returns and line feeds",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"sized_buffer","","",null,null],[5,"length_value","","",null,null],[5,"be_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"be_u16","","Recognizes big endian unsigned 2 bytes integer",null,null],[5,"be_u32","","Recognizes big endian unsigned 4 bytes integer",null,null],[5,"be_u64","","Recognizes big endian unsigned 8 bytes integer",null,null],[5,"be_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"be_i16","","Recognizes big endian signed 2 bytes integer",null,null],[5,"be_i32","","Recognizes big endian signed 4 bytes integer",null,null],[5,"be_i64","","Recognizes big endian signed 8 bytes integer",null,null],[5,"le_u8","","Recognizes an unsigned 1 byte integer (equivalent to take!(1)",null,null],[5,"le_u16","","Recognizes little endian unsigned 2 bytes integer",null,null],[5,"le_u32","","Recognizes little endian unsigned 4 bytes integer",null,null],[5,"le_u64","","Recognizes little endian unsigned 8 bytes integer",null,null],[5,"le_i8","","Recognizes a signed 1 byte integer (equivalent to take!(1)",null,null],[5,"le_i16","","Recognizes little endian signed 2 bytes integer",null,null],[5,"le_i32","","Recognizes little endian signed 4 bytes integer",null,null],[5,"le_i64","","Recognizes little endian signed 8 bytes integer",null,null],[5,"be_f32","","Recognizes big endian 4 bytes floating point number",null,null],[5,"be_f64","","Recognizes big endian 8 bytes floating point number",null,null],[5,"hex_u32","","Recognizes a hex-encoded integer",null,null],[5,"eof","","Recognizes empty input buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"non_empty","","Recognizes non empty buffers",null,{"inputs":[{"name":"t"}],"output":{"name":"iresult"}}],[5,"rest","","Return the remaining input.",null,null],[5,"newline","","",null,null],[5,"crlf","","",null,null],[5,"eol","","",null,null],[5,"tab","","",null,null],[5,"anychar","","",null,null],[5,"shift","","",null,null],[11,"clone","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"errorkind"}}],[11,"hash","","",0,null],[11,"eq","","",0,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"errorkind"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"errorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"errorkind"}],"output":{"name":"str"}}],[11,"clone","","",1,{"inputs":[{"name":"err"}],"output":{"name":"err"}}],[11,"eq","","",1,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"err"},{"name":"err"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"err"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"needed"}],"output":{"name":"needed"}}],[11,"eq","","",2,{"inputs":[{"name":"needed"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"needed"},{"name":"needed"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"needed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_known","","",2,{"inputs":[{"name":"needed"}],"output":{"name":"bool"}}],[11,"map","","Maps a `Needed` to `Needed` by appling a function to a contained `Size` value.",2,{"inputs":[{"name":"needed"},{"name":"f"}],"output":{"name":"needed"}}],[11,"clone","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"iresult"}}],[11,"eq","","",3,{"inputs":[{"name":"iresult"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"iresult"},{"name":"iresult"}],"output":{"name":"bool"}}],[11,"fmt","","",3,{"inputs":[{"name":"iresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_done","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"is_err","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"is_incomplete","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"bool"}}],[11,"map","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, N, E&gt;` by appling a function\nto a contained `Done` value, leaving `Error` and `Incomplete` value\nuntouched.",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_inc","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, E&gt;` by appling a function\nto a contained `Incomplete` value, leaving `Done` and `Error` value\nuntouched.",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"map_err","","Maps a `IResult&lt;I, O, E&gt;` to `IResult&lt;I, O, N&gt;` by appling a function\nto a contained `Error` value, leaving `Done` and `Incomplete` value\nuntouched.",3,{"inputs":[{"name":"iresult"},{"name":"f"}],"output":{"name":"iresult"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"remaining_input","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"output","","",3,{"inputs":[{"name":"iresult"}],"output":{"name":"option"}}],[11,"description","","",1,{"inputs":[{"name":"err"}],"output":{"name":"str"}}],[11,"fmt","","",1,{"inputs":[{"name":"err"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"input"}],"output":{"name":"input"}}],[11,"fmt","","",4,{"inputs":[{"name":"input"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"consumerstate"}],"output":{"name":"consumerstate"}}],[11,"fmt","","",5,{"inputs":[{"name":"consumerstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"map","","",5,{"inputs":[{"name":"consumerstate"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"flat_map","","",5,{"inputs":[{"name":"consumerstate"},{"name":"f"}],"output":{"name":"consumerstate"}}],[11,"apply","","",8,{"inputs":[{"name":"producerrepeat"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",9,null],[11,"eq","","",6,{"inputs":[{"name":"move"},{"name":"move"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"move"},{"name":"move"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"move"}],"output":{"name":"move"}}],[11,"fmt","","",6,{"inputs":[{"name":"move"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"apply","","",9,{"inputs":[{"name":"memproducer"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"eq","","",7,{"inputs":[{"name":"fileproducerstate"},{"name":"fileproducerstate"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"fileproducerstate"}],"output":{"name":"fileproducerstate"}}],[11,"fmt","","",7,{"inputs":[{"name":"fileproducerstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"fileproducer"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"result"}}],[11,"state","","",10,{"inputs":[{"name":"fileproducer"}],"output":{"name":"fileproducerstate"}}],[11,"refill","","",10,{"inputs":[{"name":"fileproducer"}],"output":{"name":"option"}}],[11,"resize","","Resize the internal buffer, copy the data to the new one and returned how much data was copied",10,{"inputs":[{"name":"fileproducer"},{"name":"usize"}],"output":{"name":"usize"}}],[11,"apply","","",10,{"inputs":[{"name":"fileproducer"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",11,{"inputs":[{"name":"c"},{"name":"f"}],"output":{"name":"mapconsumer"}}],[11,"handle","","",11,{"inputs":[{"name":"mapconsumer"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",11,{"inputs":[{"name":"mapconsumer"}],"output":{"name":"consumerstate"}}],[11,"new","","",12,{"inputs":[{"name":"c1"},{"name":"c2"}],"output":{"name":"chainconsumer"}}],[11,"handle","","",12,{"inputs":[{"name":"chainconsumer"},{"name":"input"}],"output":{"name":"consumerstate"}}],[11,"state","","",12,{"inputs":[{"name":"chainconsumer"}],"output":{"name":"consumerstate"}}],[8,"HexDisplay","","useful functions to calculate the offset between slices and show a hexdump of a slice",null,null],[10,"offset","","offset between the first byte of self and the first byte of the argument",13,null],[10,"to_hex","","Converts the value of `self` to a hex dump, returning the owned\nstring.",13,{"inputs":[{"name":"hexdisplay"},{"name":"usize"}],"output":{"name":"string"}}],[10,"to_hex_from","","Converts the value of `self` to a hex dump beginning at `from` address, returning the owned\nstring.",13,{"inputs":[{"name":"hexdisplay"},{"name":"usize"},{"name":"usize"}],"output":{"name":"string"}}],[8,"InputLength","","",null,null],[10,"input_len","","",14,{"inputs":[{"name":"inputlength"}],"output":{"name":"usize"}}],[8,"AsChar","","",null,null],[10,"as_char","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"char"}}],[10,"is_alpha","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_alphanum","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_0_to_9","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_hex_digit","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[10,"is_oct_digit","","",15,{"inputs":[{"name":"aschar"}],"output":{"name":"bool"}}],[8,"IterIndices","","",null,null],[16,"Item","","",16,null],[16,"Iter","","",16,null],[10,"iter_indices","","",16,{"inputs":[{"name":"iterindices"}],"output":{"name":"iter"}}],[8,"AsBytes","","",null,null],[10,"as_bytes","","",17,null],[8,"GetInput","","",null,null],[10,"remaining_input","","",18,{"inputs":[{"name":"getinput"}],"output":{"name":"option"}}],[8,"GetOutput","","",null,null],[10,"output","","",19,{"inputs":[{"name":"getoutput"}],"output":{"name":"option"}}],[8,"Consumer","","The Consumer trait wraps a computation and its state",null,null],[10,"handle","","implement handle for the current computation, returning the new state of the consumer",20,{"inputs":[{"name":"consumer"},{"name":"input"}],"output":{"name":"consumerstate"}}],[10,"state","","returns the current state",20,{"inputs":[{"name":"consumer"}],"output":{"name":"consumerstate"}}],[8,"Producer","","The producer wraps a data source, like file or network, and applies a consumer on it",null,null],[10,"apply","","Applies a consumer once on the produced data, and return the consumer&#39;s state",21,{"inputs":[{"name":"producer"},{"name":"consumer"}],"output":{"name":"consumerstate"}}],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,{"inputs":[{"name":"producer"},{"name":"consumer"}],"output":{"name":"option"}}],[14,"dbg!","","Prints a message if the parser fails",null,null],[14,"dbg_dmp!","","Prints a message and the input if the parser fails",null,null],[14,"closure!","","Wraps a parser in a closure",null,null],[14,"named!","","Makes a function from a parser combination",null,null],[14,"call!","","Used to wrap common expressions and function as macros",null,null],[14,"apply!","","emulate function currying: `apply!(my_function, arg1, arg2, ...)` becomes `my_function(input, arg1, arg2, ...)`",null,null],[14,"error!","","Prevents backtracking if the child parser fails",null,null],[14,"add_error!","","Add an error if the child parser fails",null,null],[14,"fix_error!","","translate parser result from IResult&lt;I,O,u32&gt; to IResult&lt;I,O,E&gt; woth a custom type",null,null],[14,"complete!","","replaces a `Incomplete` returned by the child parser\nwith an `Error`",null,null],[14,"try_parse!","","A bit like `std::try!`, this macro will return the remaining input and parsed value if the child parser returned `Done`,\nand will do an early return for `Error` and `Incomplete`\nthis can provide more flexibility than `chain!` if needed",null,null],[14,"flat_map!","","`flat_map!(R -&gt; IResult&lt;R,S&gt;, S -&gt; IResult&lt;S,T&gt;) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"map!","","`map!(I -&gt; IResult&lt;I,O&gt;, O -&gt; P) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function on the result of a parser",null,null],[14,"map_res!","","`map_res!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Result&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning a Result on the output of a parser",null,null],[14,"map_opt!","","`map_opt!(I -&gt; IResult&lt;I,O&gt;, O -&gt; Option&lt;P&gt;) =&gt; I -&gt; IResult&lt;I, P&gt;`\nmaps a function returning an Option on the output of a parser",null,null],[14,"value!","","`value!(T, R -&gt; IResult&lt;R, S&gt; ) =&gt; R -&gt; IResult&lt;R, T&gt;`",null,null],[14,"expr_res!","","`expr_res!(Result&lt;E,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Result&lt;T,E&gt; and returns a IResult::Done(I,T) if Ok",null,null],[14,"expr_opt!","","`expr_opt!(Option&lt;O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nevaluate an expression that returns a Option&lt;T&gt; and returns a IResult::Done(I,T) if Some",null,null],[14,"chain!","","`chain!(I-&gt;IResult&lt;I,A&gt; ~ I-&gt;IResult&lt;I,B&gt; ~ ... I-&gt;IResult&lt;I,X&gt; , || { return O } ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchains parsers and assemble the results through a closure",null,null],[14,"tuple!","","`tuple!(I-&gt;IResult&lt;I,A&gt;, I-&gt;IResult&lt;I,B&gt;, ... I-&gt;IResult&lt;I,X&gt;) =&gt; I -&gt; IResult&lt;I, (A, B, ..., X)&gt;`\nchains parsers and assemble the sub results in a tuple.",null,null],[14,"alt!","","`alt!(I -&gt; IResult&lt;I,O&gt; | I -&gt; IResult&lt;I,O&gt; | ... | I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\ntry a list of parsers, return the result of the first successful one",null,null],[14,"alt_complete!","","This is a combination of the `alt!` and `complete!` combinators. Rather\nthan returning `Incomplete` on partial input, `alt_complete!` will try the\nnext alternative in the chain. You should use this only if you know you\nwill not receive partial input for the rules you&#39;re trying to match (this\nis almost always the case for parsing programming languages).",null,null],[14,"switch!","","`switch!(I -&gt; IResult&lt;I,P&gt;, P =&gt; I -&gt; IResult&lt;I,O&gt; | ... | P =&gt; I -&gt; IResult&lt;I,O&gt; ) =&gt; I -&gt; IResult&lt;I, O&gt;`\nchoose the next parser depending on the result of the first one, if successful,\nand returns the result of the second parser",null,null],[14,"opt!","","`opt!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"opt_res!","","`opt_res!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Result&lt;nom::Err,O&gt;&gt;`\nmake the underlying parser optional",null,null],[14,"cond!","","`cond!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Option&lt;O&gt;&gt;`\nConditional combinator",null,null],[14,"cond_reduce!","","`cond_reduce!(bool, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nConditional combinator with error",null,null],[14,"peek!","","`peek!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nreturns a result without consuming the input",null,null],[14,"tap!","","`tap!(name: I -&gt; IResult&lt;I,O&gt; =&gt; { block }) =&gt; I -&gt; IResult&lt;I, O&gt;`\nallows access to the parser&#39;s result without affecting it",null,null],[14,"pair!","","`pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\npair(X,Y), returns (x,y)",null,null],[14,"separated_pair!","","`separated_pair!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I, T&gt;, I -&gt; IResult&lt;I,P&gt;) =&gt; I -&gt; IResult&lt;I, (O,P)&gt;`\nseparated_pair(X,sep,Y) returns (x,y)",null,null],[14,"preceded!","","`preceded!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\npreceded(opening, X) returns X",null,null],[14,"terminated!","","`terminated!(I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,T&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\nterminated(X, closing) returns X",null,null],[14,"delimited!","","`delimited!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;, I -&gt; IResult&lt;I,U&gt;) =&gt; I -&gt; IResult&lt;I, O&gt;`\ndelimited(opening, X, closing) returns X",null,null],[14,"separated_list!","","`separated_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"separated_nonempty_list!","","`separated_nonempty_list!(I -&gt; IResult&lt;I,T&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nseparated_nonempty_list(sep, X) returns Vec&lt;X&gt;",null,null],[14,"many0!","","`many0!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 0 or more times and returns the list of results in a Vec",null,null],[14,"many1!","","`many1!(I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser 1 or more times and returns the list of results in a Vec",null,null],[14,"many_m_n!","","`many_m_n!(usize, usize, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the parser between m and n times (n included) and returns the list of results in a Vec",null,null],[14,"count!","","`count!(I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\nApplies the child parser a specified number of times",null,null],[14,"count_fixed!","","`count_fixed!(O, I -&gt; IResult&lt;I,O&gt;, nb) =&gt; I -&gt; IResult&lt;I, [O; nb]&gt;`\nApplies the child parser a fixed number of times and returns a fixed size array\nThe type must be specified and it must be `Copy`",null,null],[14,"length_value!","","`length_value!(I -&gt; IResult&lt;I, nb&gt;, I -&gt; IResult&lt;I,O&gt;) =&gt; I -&gt; IResult&lt;I, Vec&lt;O&gt;&gt;`\ngets a number from the first parser, then applies the second parser that many times",null,null],[14,"method!","","Makes a method from a parser combination",null,null],[14,"call_m!","","Used to called methods then move self back into self",null,null],[14,"apply_m!","","emulate function currying for method calls on structs\n`apply!(self.my_function, arg1, arg2, ...)` becomes `self.my_function(input, arg1, arg2, ...)`",null,null],[14,"recognize!","","`recognize!(&amp;[T] -&gt; IResult&lt;&amp;[T], O&gt; ) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nif the child parser was successful, return the consumed input as produced value",null,null],[14,"tag!","","`tag!(&amp;[T]: nom::AsBytes) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ndeclares a byte array as a suite to recognize",null,null],[14,"is_not!","","`is_not!(&amp;[T:AsBytes]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that do not appear in the provided array",null,null],[14,"is_a!","","`is_a!(&amp;[T]) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes that appear in the provided array",null,null],[14,"escaped!","","`escaped!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"escaped_transform!","","`escaped_transform!(&amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;, T, &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], Vec&lt;T&gt;&gt;`\nmatches a byte string with escaped characters.",null,null],[14,"take_while!","","`take_while!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function fails.",null,null],[14,"take_while1!","","`take_while1!(&amp;[T] -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest (non empty) list of bytes until the provided function fails.",null,null],[14,"take_till!","","`take_till!(T -&gt; bool) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nreturns the longest list of bytes until the provided function succeeds",null,null],[14,"take!","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming the specified number of bytes",null,null],[14,"take_str!","","`take!(nb) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;str&gt;`\nsame as take! but returning a &amp;str",null,null],[14,"take_until_and_consume!","","`take_until_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\ngenerates a parser consuming bytes until the specified byte sequence is found, and consumes it",null,null],[14,"take_until!","","`take_until!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds the specified tag",null,null],[14,"take_until_either_and_consume!","","`take_until_either_and_consume!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`\nconsumes data until it finds any of the specified characters, and consume it",null,null],[14,"take_until_either!","","`take_until_either!(tag) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;`",null,null],[14,"length_bytes!","","`length_bytes!(&amp;[T] -&gt; IResult&lt;&amp;[T], nb&gt;) =&gt; &amp;[T] -&gt; IResult&lt;&amp;[T], &amp;[T]&gt;\ngets a number from the first parser, then extracts that many bytes from the\nremaining stream",null,null],[14,"bits!","","`bits!( parser ) =&gt; ( &amp;[u8], (&amp;[u8], usize) -&gt; IResult&lt;(&amp;[u8], usize), T&gt; ) -&gt; IResult&lt;&amp;[u8], T&gt;`\ntransforms its byte slice input in a bit stream for the underlying parsers",null,null],[14,"take_bits!","","`take_bits!(type, nb) =&gt; ( (&amp;[T], usize), U, usize) -&gt; IResult&lt;(&amp;[T], usize), U&gt;`\ngenerates a parser consuming the specified number of bytes",null,null],[14,"tag_bits!","","matches an integer pattern to a bitstream. The number of bits of the input to compare must be specified",null,null],[14,"u16!","","if parameter is true, parse a big endian u16 integer,\notherwise a little endian u16 integer",null,null],[14,"u32!","","if parameter is true, parse a big endian u32 integer,\notherwise a little endian u32 integer",null,null],[14,"u64!","","if parameter is true, parse a big endian u64 integer,\notherwise a little endian u64 integer",null,null],[14,"i16!","","if parameter is true, parse a big endian i16 integer,\notherwise a little endian i16 integer",null,null],[14,"i32!","","if parameter is true, parse a big endian i32 integer,\notherwise a little endian i32 integer",null,null],[14,"i64!","","if parameter is true, parse a big endian i64 integer,\notherwise a little endian i64 integer",null,null],[14,"one_of!","","matches one of the provided characters",null,null],[14,"none_of!","","matches anything but the provided characters",null,null],[14,"char!","","matches one character: `char!(char) =&gt; &amp;[u8] -&gt; IResult&lt;&amp;[u8], char&gt;",null,null],[14,"consumer_from_parser!","","",null,null],[14,"tag_s!","","`tag_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ndeclares a string as a suite to recognize",null,null],[14,"take_s!","","`take_s!(nb) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming the specified number of characters",null,null],[14,"is_not_s!","","`is_not_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that do not appear in the provided array",null,null],[14,"is_a_s!","","`is_a_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters that appear in the provided array",null,null],[14,"take_while_s!","","`take_while_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function fails.",null,null],[14,"take_while1_s!","","`take_while1_s!(char -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest (non empty) list of characters until the provided function fails.",null,null],[14,"take_till_s!","","`take_till_s!(&amp;str -&gt; bool) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\nreturns the longest list of characters until the provided function succeeds",null,null],[14,"take_until_and_consume_s!","","`take_until_and_consume_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and consumes it",null,null],[14,"take_until_s!","","`take_until_s!(&amp;str) =&gt; &amp;str -&gt; IResult&lt;&amp;str, &amp;str&gt;`\ngenerates a parser consuming all chars until the specified string is found and leaves it in the remaining input",null,null],[11,"run","","Applies a consumer once on the produced data, and returns the generated value if there is one",21,{"inputs":[{"name":"producer"},{"name":"consumer"}],"output":{"name":"option"}}]],"paths":[[4,"ErrorKind"],[4,"Err"],[4,"Needed"],[4,"IResult"],[4,"Input"],[4,"ConsumerState"],[4,"Move"],[4,"FileProducerState"],[3,"ProducerRepeat"],[3,"MemProducer"],[3,"FileProducer"],[3,"MapConsumer"],[3,"ChainConsumer"],[8,"HexDisplay"],[8,"InputLength"],[8,"AsChar"],[8,"IterIndices"],[8,"AsBytes"],[8,"GetInput"],[8,"GetOutput"],[8,"Consumer"],[8,"Producer"]]};
searchIndex["transformable_channels"] = {"doc":"Implementation of channels that supports iterator-like operation such as `map`, `filter`\n...","items":[[0,"mpsc","transformable_channels","Near drop-in replacement for std::sync::mpsc;\nA variant of `std::sync::mpsc` that supports `map`-style operations.",null,null],[11,"try_recv","std::sync::mpsc","Attempts to return a pending value on this receiver without blocking",0,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",0,{"inputs":[{"name":"receiver"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",0,{"inputs":[{"name":"receiver"}],"output":{"name":"iter"}}],[3,"Receiver","transformable_channels::mpsc","The receiving-half of Rust&#39;s channel type. This half can only be owned by\none thread",null,null],[3,"RawSender","","An implementation of `ExtSender` directly on top of `std::sync::mpsc::Sender` and with\nthe same performance.",null,null],[3,"FilterMappedSender","","An `ExtSender` obtained from a call to method `filter_map`.",null,null],[3,"FilteredSender","","An `ExtSender` obtained from a call to method `filter`.",null,null],[3,"MappedSender","","An `ExtSender` obtained from a call to method `map`.",null,null],[3,"TiedSender","","An `ExtSender` obtained from a call to method `tie`.",null,null],[5,"channel","","Creates a new asynchronous channel, returning the sender/receiver halves.\nAll data sent on the sender will become available on the receiver, and no send will block\nthe calling thread (this channel has an &quot;infinite buffer&quot;).",null,null],[8,"ExtSender","","The sending-half of this crate&#39;s asynchronous channel type. This half can only be owned by one\nthread, but all instances can be cloned to let copies be shared with other threads.",null,null],[10,"send","","Attempts to send a value on this channel.",1,{"inputs":[{"name":"extsender"},{"name":"t"}],"output":{"name":"result"}}],[10,"internal_clone","","A low-level method used to define Clone(). Probably not useful outside of this crate. May\ndisappear in future versions.",1,{"inputs":[{"name":"extsender"}],"output":{"name":"box"}}],[8,"TransformableSender","","",null,null],[11,"map","","From an `ExtSender`, derive a new `ExtSender` with the same `Receiver`, but which transforms\nvalues prior to transmitting them.",2,{"inputs":[{"name":"transformablesender"},{"name":"f"}],"output":{"name":"mappedsender"}}],[11,"filter","","From an `ExtSender`, derive a new `ExtSender` with the same `Receiver`, but which may decide\nto discard some values instead of transmitting them.",2,{"inputs":[{"name":"transformablesender"},{"name":"f"}],"output":{"name":"filteredsender"}}],[11,"filter_map","","From an `ExtSender`, derive a new `ExtSender` with the same `Receiver`, but which may both\ntransform values priori to transmitting them, or to discard them entirely.",2,{"inputs":[{"name":"transformablesender"},{"name":"f"}],"output":{"name":"filtermappedsender"}}],[11,"tie","","From two `ExtSender`s, derive a new `ExtSender` which sends to both `ExtSender`s.",2,{"inputs":[{"name":"transformablesender"},{"name":"s"}],"output":{"name":"tiedsender"}}],[11,"send","alloc::boxed","",3,{"inputs":[{"name":"box"},{"name":"t"}],"output":{"name":"result"}}],[11,"internal_clone","","",3,{"inputs":[{"name":"box"}],"output":{"name":"box"}}],[11,"clone","","",3,{"inputs":[{"name":"box"}],"output":{"name":"self"}}],[11,"send","transformable_channels::mpsc","Let the wrapped `Sender` send the value. Discard error values.",4,{"inputs":[{"name":"rawsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"internal_clone","","Clone the wrapped `Sender` and wrap the result.",4,{"inputs":[{"name":"rawsender"}],"output":{"name":"box"}}],[11,"clone","","",4,{"inputs":[{"name":"rawsender"}],"output":{"name":"self"}}],[11,"send","","",5,{"inputs":[{"name":"filtermappedsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"internal_clone","","",5,{"inputs":[{"name":"filtermappedsender"}],"output":{"name":"box"}}],[11,"clone","","",5,{"inputs":[{"name":"filtermappedsender"}],"output":{"name":"self"}}],[11,"send","","",6,{"inputs":[{"name":"filteredsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"internal_clone","","",6,{"inputs":[{"name":"filteredsender"}],"output":{"name":"box"}}],[11,"clone","","",6,{"inputs":[{"name":"filteredsender"}],"output":{"name":"self"}}],[11,"send","","",7,{"inputs":[{"name":"mappedsender"},{"name":"t"}],"output":{"name":"result"}}],[11,"internal_clone","","",7,{"inputs":[{"name":"mappedsender"}],"output":{"name":"box"}}],[11,"clone","","",7,{"inputs":[{"name":"mappedsender"}],"output":{"name":"self"}}],[11,"send","","",8,null],[11,"internal_clone","","",8,{"inputs":[{"name":"tiedsender"}],"output":{"name":"box"}}],[11,"clone","","",8,{"inputs":[{"name":"tiedsender"}],"output":{"name":"self"}}]],"paths":[[3,"Receiver"],[8,"ExtSender"],[8,"TransformableSender"],[3,"Box"],[3,"RawSender"],[3,"FilterMappedSender"],[3,"FilteredSender"],[3,"MappedSender"],[3,"TiedSender"]]};
searchIndex["sublock"] = {"doc":"Variants of `RwLock` that support sublocks, opened for reading if the main `RwLock` is opened\nfor reading, opened for writing if the main `RwLock` is opened for writing.","items":[[0,"atomlock","sublock","A variant of `RwLock` based on dynamic checks (comparable to `RefCell`).\nA variant of RwLock with sublocks that can be opened for reading iff the main lock is currently\nopened for reading, opened for writing iff the main lock is currently opened for writing.",null,null],[6,"LockResult","sublock::atomlock","",null,null],[3,"Liveness","","",null,null],[3,"SubCell","","",null,null],[3,"MainLock","","A variant of RwLock with sublocks that can be opened for reading iff the main lock is currently\nopened for reading, opened for writing iff the main lock is currently opened for writing.",null,null],[3,"WriteGuard","","",null,null],[6,"ReadGuard","","",null,null],[11,"new","","",0,{"inputs":[{"name":"arc"},{"name":"t"}],"output":{"name":"self"}}],[11,"borrow","","",0,{"inputs":[{"name":"subcell"}],"output":{"name":"t"}}],[11,"borrow_mut","","",0,{"inputs":[{"name":"subcell"}],"output":{"name":"t"}}],[11,"drop","","",1,{"inputs":[{"name":"mainlock"}],"output":null}],[11,"deref","","",2,{"inputs":[{"name":"writeguard"}],"output":{"name":"target"}}],[11,"deref_mut","","",2,{"inputs":[{"name":"writeguard"}],"output":{"name":"target"}}],[11,"drop","","",2,{"inputs":[{"name":"writeguard"}],"output":null}],[11,"new","","",1,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"read","","",1,{"inputs":[{"name":"mainlock"}],"output":{"name":"lockresult"}}],[11,"try_read","","",1,{"inputs":[{"name":"mainlock"}],"output":{"name":"trylockresult"}}],[11,"write","","",1,{"inputs":[{"name":"mainlock"}],"output":{"name":"lockresult"}}],[11,"try_write","","",1,{"inputs":[{"name":"mainlock"}],"output":{"name":"trylockresult"}}],[11,"liveness","","",1,{"inputs":[{"name":"mainlock"}],"output":{"name":"arc"}}],[0,"prooflock","sublock","A variant of `RwLock` based on proofs of opening. Faster and safer than `atomlock`, but\na bit more verbose.\nA variant of RwLock with sublocks that can be opened at no cost by providing a proof that the\nmain lock is opened.",null,null],[3,"SubCell","sublock::prooflock","",null,null],[3,"Proof","","A proof that the MainLock is currently opened.\nIts lifetime is limited by that of the ReadGuard that provided it.",null,null],[3,"ProofMut","","A proof that the MainLock is currently opened mutably.\nIts lifetime is limited by that of the WriteGuard that provided it.",null,null],[3,"MainLock","","A variant of `RwLock` with sublocks that can be opened at no cost by providing a proof\nthat the main lock is opened.",null,null],[6,"ReadGuard","","",null,null],[6,"WriteGuard","","",null,null],[8,"ProofBorrow","","A trait specifying that a structure supports immutable borrowing if some proof is provided.",null,null],[10,"borrow","","",3,{"inputs":[{"name":"proofborrow"},{"name":"p"}],"output":{"name":"t"}}],[8,"ProofBorrowMut","","A trait specifying that a structure supports mutable borrowing if some proof is provided.",null,null],[10,"borrow_mut","","",4,{"inputs":[{"name":"proofborrowmut"},{"name":"p"}],"output":{"name":"t"}}],[11,"new","","",5,{"inputs":[{"name":"proofmut"},{"name":"t"}],"output":{"name":"self"}}],[11,"borrow","","",5,{"inputs":[{"name":"subcell"},{"name":"proof"}],"output":{"name":"t"}}],[11,"borrow","","",5,{"inputs":[{"name":"subcell"},{"name":"proofmut"}],"output":{"name":"t"}}],[11,"borrow_mut","","",5,{"inputs":[{"name":"subcell"},{"name":"proofmut"}],"output":{"name":"t"}}],[11,"new","","",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"read","","",6,{"inputs":[{"name":"mainlock"}],"output":{"name":"lockresult"}}],[11,"try_read","","",6,{"inputs":[{"name":"mainlock"}],"output":{"name":"trylockresult"}}],[11,"write","","",6,{"inputs":[{"name":"mainlock"}],"output":{"name":"lockresult"}}],[11,"try_write","","",6,{"inputs":[{"name":"mainlock"}],"output":{"name":"trylockresult"}}]],"paths":[[3,"SubCell"],[3,"MainLock"],[3,"WriteGuard"],[8,"ProofBorrow"],[8,"ProofBorrowMut"],[3,"SubCell"],[3,"MainLock"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,{"inputs":[{"name":"phfhash"},{"name":"h"}],"output":null}],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[11,"phf_hash","collections::string","",1,{"inputs":[{"name":"string"},{"name":"h"}],"output":null}],[11,"phf_hash","collections::vec","",2,{"inputs":[{"name":"vec"},{"name":"h"}],"output":null}]],"paths":[[8,"PhfHash"],[3,"String"],[3,"Vec"]]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,{"inputs":[{"name":"void"}],"output":null}],[8,"ResultVoidExt","","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,{"inputs":[{"name":"resultvoidext"}],"output":{"name":"t"}}],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,{"inputs":[{"name":"resultvoiderrext"}],"output":{"name":"e"}}],[11,"clone","","",2,{"inputs":[{"name":"void"}],"output":{"name":"void"}}],[11,"fmt","","",2,{"inputs":[{"name":"void"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"void"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"void"},{"name":"t"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"void"},{"name":"t"}],"output":{"name":"option"}}],[11,"void_unwrap","core::result","Get the value out of an always-ok Result.",3,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"void_unwrap_err","","Get the error out of an always-err Result.",3,{"inputs":[{"name":"result"}],"output":{"name":"e"}}]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"],[4,"Result"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
initSearch(searchIndex);
